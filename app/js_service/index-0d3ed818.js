'use strict';

var main$1 = require('./main-c092fbbe.js');
var service = require('./service-1fe2dbf4.js');
var mbus = require('./mbus-015f1fcd.js');
var posConfig = require('./posConfig-01f26cba.js');
var CouponsConfig = require('./CouponsConfig-2dca118f.js');
require('os');

var lodash = main$1.createCommonjsModule(function (module, exports) {
(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined$1;

  /** Used as the semantic version number. */
  var VERSION = '4.17.11';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof main$1.commonjsGlobal == 'object' && main$1.commonjsGlobal && main$1.commonjsGlobal.Object === Object && main$1.commonjsGlobal;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined$1 : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined$1 : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined$1) {
        result = result === undefined$1 ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined$1 : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined$1,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
        symIterator = Symbol ? Symbol.iterator : undefined$1,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined$1,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
        symbolToString = symbolProto ? symbolProto.toString : undefined$1;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined$1;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined$1;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined$1 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined$1 : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined$1;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined$1 && !eq(object[key], value)) ||
          (value === undefined$1 && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined$1 && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined$1 : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined$1) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined$1) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined$1) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });

        return result;
      }

      if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });

        return result;
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined$1 : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined$1, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined$1
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined$1 || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined$1;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined$1 ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined$1;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined$1 : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined$1 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined$1
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined$1 && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined$1;

          if (newValue === undefined$1) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined$1;

      var isCommon = newValue === undefined$1;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined$1;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
          if (newValue === undefined$1) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined$1;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined$1,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined$1;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined$1 ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined$1,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined$1,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined$1;

        if (newValue === undefined$1) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined$1,
            guard = length > 2 ? sources[2] : undefined$1;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined$1;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined$1 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined$1;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
            args, holders, undefined$1, undefined$1, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined$1;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined$1 : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined$1 && other === undefined$1) {
          return defaultValue;
        }
        if (value !== undefined$1) {
          result = value;
        }
        if (other !== undefined$1) {
          if (result === undefined$1) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined$1 ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined$1;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined$1) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined$1,
          newHoldersRight = isCurry ? undefined$1 : holders,
          newPartials = isCurry ? partials : undefined$1,
          newPartialsRight = isCurry ? undefined$1 : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined$1, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined$1;
      }
      ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined$1 ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined$1;
      }
      var data = isBindKey ? undefined$1 : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined$1
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined$1, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined$1 ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined$1 : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined$1) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined$1
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined$1, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined$1;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined$1;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined$1,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined$1 || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined$1, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined$1 ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined$1;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined$1;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined$1) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined$1) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined$1) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined$1 ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined$1;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined$1;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined$1;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined$1, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined$1;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined$1) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined$1, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined$1 ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined$1) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined$1) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined$1;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined$1;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined$1;
      return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined$1, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined$1;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined$1;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined$1;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined$1
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined$1);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined$1) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined$1 : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined$1;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined$1
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined$1;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined$1 ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined$1 : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined$1;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined$1 : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined$1;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined$1 : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined$1 : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined$1;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined$1;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined$1;
        return result;
      }

      function cancel() {
        if (timerId !== undefined$1) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined$1;
      }

      function flush() {
        return timerId === undefined$1 ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined$1) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined$1) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined$1 ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined$1;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined$1;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined$1;
      var result = customizer ? customizer(value, other) : undefined$1;
      return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined$1;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined$1;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined$1;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined$1 ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined$1, customDefaultsMerge);
      return apply(mergeWith, undefined$1, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined$1 : baseGet(object, path);
      return result === undefined$1 ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined$1;
      }
      while (++index < length) {
        var value = object == null ? undefined$1 : object[toKey(path[index])];
        if (value === undefined$1) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined$1;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined$1;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined$1) {
        upper = lower;
        lower = undefined$1;
      }
      if (upper !== undefined$1) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined$1) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined$1) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined$1;
      }
      if (floating === undefined$1) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined$1;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined$1;
        }
      }
      if (lower === undefined$1 && upper === undefined$1) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined$1) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined$1
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined$1;
      }
      limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined$1;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined$1, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined$1)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined$1)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined$1)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined$1) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined$1 : pattern;

      if (pattern === undefined$1) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined$1, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined$1 : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined$1;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined$1;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined$1;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined$1;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined$1) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined$1
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(main$1.commonjsGlobal));
});

var JSONbig = require('json-bigint')({
  storeAsString: true
});

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { service.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var apiname =  service.config.hws_apiname ;
/**
 * 激活
 * @param data
 * @constructor
 */

var Register = function Register(data) {
  //console.log('激活：', data);
  {
    return service.ExecAsyncWeb({
      apiname: apiname().register,
      method: 'post'
    }, data);
  }
}; //https://dq.hexcloud.cn/api/v1/config/pos_info
/**
 * 签到
 * @param staff_id
 * @param pos_id
 */

var posCheck = function posCheck(staff_id, pos_id) {
  return service.ExecAsyncWeb({
    apiname: apiname().posCheck,
    method: 'post'
  }, {
    staff_id: staff_id,
    pos_id: pos_id
  });
};

var GetTypeForm = function GetTypeForm() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return service.ExecAsyncWeb({
    method: 'get',
    apiname: apiname(data).typeForm
  }, _objectSpread(_objectSpread({}, data), {}, {
    offset: 0,
    limit: 100
  }));
}; // 时段报表

var GetTimeForm = function GetTimeForm() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return service.ExecAsyncWeb({
    method: 'get',
    apiname: apiname(data).timeForm
  }, data);
}; //获取支付渠道来源

var DailyPayment = function DailyPayment() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return service.ExecAsyncWeb({
    method: "post",
    apiname: apiname(data).dailyPayment
  }, data);
}; //支付折扣互转

var PaymentDiscountTrans = function PaymentDiscountTrans() {
  return service.ExecAsyncWeb({
    //method: "post",
    apiname: apiname().paymentDiscountTrans
  });
}; //查询早餐信息

var GetBreakFast = function GetBreakFast(data) {
  return service.ExecAsyncWeb({
    apiname: apiname(data).getBreakFast,
    method: 'get'
  }, data);
}; //核销早餐信息

var UsedBreakFast = function UsedBreakFast(data) {
  return service.ExecAsyncWeb({
    apiname: apiname(data).usedBreakFast,
    method: 'post'
  }, data);
};
/*

 //todo
 /!** 获取历史订单
 * https://costa.hexcloud.cn/api/v1/transactions/order/log?store_ids=4017824671357227009&start_date=2017-10-18&end_date=2017-10-31
 * 不传start_date与end_date时，默认为查询今天，end_date需要加一天
 * 如果需要分页，需要传参数limit:每页的条数，offset:从第几条数据之后查询 (例如：每页10条，查询第2页，limit=10,offset=10);如果不需要分页，limit会给默认值-1
 * 用于搜索的参数：
 *      operation_user_id:用户id
 *      pos_id:pos终端的id
 *      ticket_number:订单号
 **!/
 export const getHistoryOrder = (option = {}) => {
 let start_date = option.start_date ? option.start_date : moment().format('YYYY-MM-DD');
 let end_date = option.end_date ? option.end_date : moment().add(1, 'day').format('YYYY-MM-DD');
 let page = option.limit ? {limit: option.limit, offset: option.offset} : {limit: -1}
 if (option.operation_user_id) {
 page.operation_user_id = option.operation_user_id
 }
 if (option.pos_id) {
 page.pos_id = option.pos_id
 }
 if (option.ticket_number) {
 page.ticket_number = option.ticket_number
 }
 // if(option.store_id){page.store_ids=option.store_id}
 return ExecAsync({
 apiname: 'api/v1/transactions/order/log',
 loading: true,
 }, {
 store_ids: config.store_id,
 start_date: start_date,
 end_date: end_date,
 stringified: true,
 order: 'desc',
 sort: 'startTime',
 ...page,
 })
 }

 //提交订单
 //https://costa.hexcloud.cn/api/v1/transactions/order/log
 export const submitOrder = (data = {}) => {
 return ExecAsync({
 apiname: 'api/v1/transactions/order/log',
 method: 'post',
 }, [data])
 }

 //支付接口
 //https://costa.hexcloud.cn/api/v1/payment/centre/pay
 export const pay = (data) => {
 return new Promise((resolve, reject) => {
 ExecAsync({
 apiname: 'api/v1/payment/centre/pay',
 method: 'post',
 //loading: true,
 }, data).then((res) => {
 if (res.status_code === 1) {
 reject({
 code: 'PAY_FAILED',
 description: '支付失败',
 status_code: 1
 })
 }
 //支付状态为waiting等待时
 if (res.payload.pay_status === 'WAITING') {
 let count = 60;    //记时，1分钟后超时
 //查询支付结果
 let getPay = (id) => {
 this.queryPay({ticket_id: id}).then(result => {
 if (result.payload.pay_status === 'WAITING') {
 count -= 5;
 if (count < 0) {
 clearInterval(this.payTimer)
 resolve({
 code: 'PAY_FAILED',
 description: '支付失败',
 status_code: 1
 })
 }
 } else if (result.payload.pay_status === 'PAID') {
 clearInterval(this.payTimer)
 resolve(result)
 } else {
 clearInterval(this.payTimer)
 resolve({
 code: 'PAY_FAILED',
 description: '支付失败',
 status_code: 1
 })
 }
 })
 }
 this.payTimer = setInterval(() => {
 getPay(res.payload.ticket_id)
 }, 5000)
 } else {
 resolve(res);
 }
 }, (err) => {
 if (this.payTimer) {
 clearInterval(this.payTimer)
 }
 reject(err);
 });
 });
 }
 //取消支付
 //https://costa.hexcloud.cn/api/v1/payment/centre/cancel
 //可以传{context_id:id}或者{ticket_id:id}
 export const cancelPay = (data) => {
 return ExecAsync({
 apiname: 'api/v1/payment/centre/cancel',
 method: 'post',
 loading: true,
 }, data)
 }

 //退款
 //https://costa.hexcloud.cn/api/v1/payment/centre/refund
 //可以传{context_id:id}或者{ticket_id:id}
 export const refundPay = (data) => {
 return ExecAsync({
 apiname: 'api/v1/payment/centre/refund',
 method: 'post',
 loading: true,
 }, data)
 }

 //查询支付结果，自动接口，支付等待时自动调用
 //https://costa.hexcloud.cn/api/v1/payment/centre/query
 export const queryPay = (data) => {
 return ExecAsync({
 apiname: 'api/v1/payment/centre/query',
 method: 'post',
 loading: true,
 }, data)
 }

 //计算促销规则
 //https://costa.hexcloud.cn/engine/promotion/execute
 export const executePromotion = (data) => {
 console.log('促销提交数据：', JSON.stringify(data))
 return ExecAsync({
 apiname: 'engine/promotion/execute',
 method: 'post',
 }, data)
 }

 /!**
 * pos激活
 * https://costa.hexcloud.cn/api/v1/pos/activation/do
 *!/
 export const register = (data) => {
 //console.log('提交POS激活数据', JSON.stringify(data))
 return ExecAsync({
 apiname: 'api/v1/pos/activation/do?stringified=true',
 method: 'post',
 }, data)
 }

 /!**
 * 获取离线促销规则
 * https://costa.hexcloud.cn/api/v1/promotion/rule/store/4017824671357227009?stringified=true
 *!/
 export const getPromotion = (store_id) => {
 return ExecAsync({
 apiname: `api/v1/promotion/rule/store/${store_id}`,       //api名
 method: 'get',                  //get,post 可选，默认为get
 }, {
 stringified: true,
 });
 }

 export const posCheck = (staff_id, pos_id) => {
 return ExecAsync({
 apiname: 'api/v1/pos/attendance/check?stringified=true',
 method: 'post',
 }, {staff_id, pos_id});
 };
 */

var apiname$1 =  service.config.hws_apiname ; //获取会员

var GetMemberInfoByCard = function GetMemberInfoByCard(id, _ref) {
  var store_id = _ref.store_id,
      membershipCooperation = _ref.membershipCooperation,
      ticketId = _ref.ticketId;
  //console.log('会员',membershipCooperation)
  //console.log('获取会员',id,{store_id,membershipCooperation})
  return service.ExecAsyncWeb({
    apiname: apiname$1({
      id: id,
      store_id: store_id,
      membershipCooperation: membershipCooperation,
      ticketId: ticketId
    }).getMember,
    method: 'get'
  });
}; //会员充值

var RechargeMember = function RechargeMember(data, obj) {
  return service.ExecAsyncWeb({
    apiname: apiname$1(obj).rechargeMember,
    method: 'post'
  }, data);
}; //会员充值记录

var QueryMemberRecharge = function QueryMemberRecharge(data, obj) {
  return service.ExecAsyncWeb({
    apiname: apiname$1(obj).queryMemberRecharge,
    method: 'post'
  }, data);
}; //会员退充值

var RefundMemberRecharge = function RefundMemberRecharge(data, obj) {
  return service.ExecAsyncWeb({
    apiname: apiname$1(obj).refundMemberRecharge,
    method: 'post'
  }, data);
}; //会员渠道

var apiname$2 =  service.config.hws_apiname ;
var refund = function refund(data) {
  return service.ExecAsyncWeb({
    apiname: apiname$2().payRefund,
    method: 'post'
  }, data);
};
var query = function query(data) {
  return service.ExecAsyncWeb({
    apiname: apiname$2().payQuery,
    method: 'post'
  }, data);
};
var pay = function pay(data) {
  console.log('data', data); //{"code":"INTERNAL_SERVER_ERROR","payload":"","s·tatus_code":1}
  // return Promise.resolve({ "code": "INTERNAL_SERVER_ERROR", "payload": "", "status_code": 1 })
  //     .then(res => {
  //         if (res && res.status_code == 1) {
  //             res.description || (res.description = `服务器异常(${res.code}),请换一种方式支付或稍后重试`)
  //         }
  //         return res
  //     })

  return service.ExecAsyncWeb({
    apiname: apiname$2().pay,
    method: 'post'
  }, data).then(function (res) {
    // TODO: 需优化
    if (res && res.status_code == 1) {
      res.description || (res.description = "\u670D\u52A1\u5668\u5F02\u5E38(".concat(res.code, "),\u8BF7\u6362\u4E00\u79CD\u65B9\u5F0F\u652F\u4ED8\u6216\u7A0D\u540E\u91CD\u8BD5)"));
    }

    return res;
  });
};
var cancel$1 = function cancel() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return service.ExecAsyncWeb({
    apiname: apiname$2().payCancel,
    method: 'post'
  }, data);
}; //tp/bthhotels/room?hotel_code={酒店编码}&room_no={房间号}

var getHotelRoom = function getHotelRoom() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return service.ExecAsyncWeb({
    apiname: apiname$2().getHotelRoom
  }, data);
}; // 查询房间信息

var getRoomInfo = function getRoomInfo(data) {
  return service.ExecAsyncWeb({
    apiname: apiname$2(data).getRoomInfo,
    method: 'get'
  }, data);
}; // 查询AR信息

var getARInfo = function getARInfo(data) {
  return service.ExecAsyncWeb({
    apiname: apiname$2(data).getARInfo,
    method: 'get'
  }, data);
}; //查询款待员工列表

var getTreatList = function getTreatList(data) {
  return service.ExecAsyncWeb({
    apiname: apiname$2(data).getTreatList,
    method: 'get'
  }, data.search ? {
    search: data.search
  } : {});
};
var cardQuery = function cardQuery(data) {
  return service.ExecAsyncWeb({
    apiname: apiname$2(data).cardQuery,
    method: 'post'
  }, data);
}; //余额查询

var balanceQuery = function balanceQuery() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var p = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return service.ExecAsyncWeb({
    apiname: apiname$2(data).cardQuery,
    method: 'post'
  }, p);
};

/**
 * Created by laomao on 2017/12/18.
 */
var updatePassword = function updatePassword(staff_id, old_pos_password, pos_password) {
  return service.ExecAsyncWeb({
    // apiname: 'api/v1/pos/staff/password/update?stringified=true',
    apiname: "oauth2/oauth/api/v1/users/".concat(staff_id),
    method: 'put'
  }, {
    "id": staff_id,
    "old_password": old_pos_password,
    "new_password": pos_password,
    "new_password_confirm": pos_password
  });
};

var apiname$3 =  service.config.hws_apiname ; //获取卡券

var GetCoupon = function GetCoupon(data) {
  return service.ExecAsyncWeb({
    apiname: apiname$3(data).getCoupon,
    method: 'get'
  });
}; //核销产品券

var PayProCoupon = function PayProCoupon(data) {
  return service.ExecAsyncWeb({
    apiname: apiname$3().payProCoupon,
    method: 'post'
  }, data);
}; //反核销产品券

var CancelPayProCoupon = function CancelPayProCoupon(data) {
  return service.ExecAsyncWeb({
    apiname: apiname$3().cancelPayProCoupon,
    method: 'post'
  }, data);
};

var apiname$4 =  service.config.hws_apiname ;
/**
PATCH /api/v1/takeaway/order/command/< command >?stringified=true

command

操作命令	描述
confirm	确认接单
cancel	取消接单
refund	退单
agreerefund	同意退单
请求 body

字段名称	字段类型	是否必须	描述
ticket_id	string	是	订单id
device	json	是	POS 信息
device

字段名称	字段类型	是否必须	描述
id	string	是	POS id
返回 body

字段名称	字段类型	描述
ticket_id	string	订单id
status	string	订单状态
status_seq_number	string	操作序列号
pos_id	string	POS id
reason	string	原因


 */
//操作外卖订单
//http://developmentdoc.hexcloud.cn/api/data_ops/wai-mai-ding-dan-cao-zuo.html

var onOrder = function onOrder(data) {
  var command = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'confirm';
  return service.ExecAsyncWeb({
    apiname: apiname$4({
      command: command
    }).takeawayOrderCommand,
    method: 'POST'
  }, data);
};

/**
 * Created by laomao on 2017/12/27.
 */
var rpc = service.JavaServiceClient;

var _dec, _class;

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { service.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var GetSysDb = service.DbProxy.GetSysDb,
    GetTicketDb = service.DbProxy.GetTicketDb,
    GetDailyDb = service.DbProxy.GetDailyDb,
    GetPayInfoDb = service.DbProxy.GetPayInfoDb;

function getDailyKnotinfo(store_id, start, user) {
  var store = {};
  var items = [];
  var pays = [];
  var tickets = [];
  var promotions = [];
  var today = service.moment();
  var paykeyboard = service.SysData[store_id].paymentMeta;
  return GetSysDb(store_id).GetStoreInfo().then(function (storeInfo) {
    store = {
      code: storeInfo.code,
      name: storeInfo.name,
      address: storeInfo.address,
      saleTime: start,
      user: user
    };
    return service.bluebird.all([GetTicketDb(store_id).GetTicketByBusDate(start), GetPayInfoDb(store_id).listPayInfo({})]);
  }).then(function (_ref) {
    var _ref2 = service.slicedToArray(_ref, 2),
        list = _ref2[0],
        payInfos = _ref2[1];

    var ticketInfos = list.docs;
    var types = {};
    var paymentTypes = {};
    var promotionTypes = {};
    var allMoney = 0;
    var people = 0;
    var unUpload = false;
    var sumOverflow = 0;
    var countOverflow = 0;
    var sumRemoveZero = 0; //抹零

    var countRemoveZero = 0; //抹零

    if (ticketInfos) {
      ticketInfos.forEach(function (ticket) {
        //计算抹零
        sumRemoveZero = service.decimal.add(sumRemoveZero, ticket.removezero_amount || 0).toDecimalPlaces(2, 4).toNumber();

        if (ticket.removezero_amount) {
          countRemoveZero++;
        } //计算商品


        if (ticket) {
          if (!ticket.isUpload) {
            if (!unUpload) {
              unUpload = true;
            }
          }

          if (ticket.products) {
            ticket.products.forEach(function (product) {
              var type = product.name;

              if (types[type]) {
                types[type].price = service.decimal.add(types[type].price, product.price).toDecimalPlaces(2, 4).toNumber(); //types[type].price += product.price;

                types[type].count += product.qty;
              } else {
                types[type] = {
                  price: product.price,
                  count: product.qty
                };
              }
            });
          } //计算服务费


          if (ticket.promotions) {
            ticket.promotions.forEach(function (promotion) {
              var type = promotion.type;

              if (promotionTypes[type]) {
                promotionTypes[type] = service.decimal.add(promotionTypes[type], promotion.discount).toDecimalPlaces(2, 4).toNumber(); //promotionTypes[type] += promotion.discount;
              } else {
                promotionTypes[type] = promotion.discount;
              }
            });
          } //计算小票
          //allMoney += +ticket.pay_amount


          allMoney = service.decimal.add(allMoney, ticket.net_amount).toDecimalPlaces(2, 4).toNumber();
          people += +ticket.people; //计算支付

          if (ticket.payments) {
            ticket.payments.forEach(function (payment) {
              //计算溢收
              if (!!payment.overflow) {
                sumOverflow = service.decimal.add(sumOverflow, payment.overflow || 0).toDecimalPlaces(2, 4).toNumber();
                countOverflow++;
              }

              var name = payment.id;

              if (paymentTypes[name]) {
                //paymentTypes[name].pay_amount += +payment.amount;
                paymentTypes[name].pay_amount = service.decimal.add(paymentTypes[name].pay_amount, payment.amount).toDecimalPlaces(2, 4).toNumber();
                paymentTypes[name].count++;
              } else {
                paymentTypes[name] = {
                  pay_amount: +payment.amount,
                  count: 1
                };
              }
            });
          }
        }
      });
    }

    service.lodash.forOwn(types, function (v, k) {
      v.type = k;
      items.push(v);
    });

    service.lodash.forOwn(paymentTypes, function (v, k) {
      var pay = paykeyboard[k];

      if (pay && pay.name) {
        // console.log('支付方式            ', pay.name);
        v.payment_name = pay.name;
      } else {
        v.payment_name = '';
      }

      pays.push(v);
    });

    if (countOverflow) {
      pays.push({
        payment_name: '溢收',
        count: countOverflow,
        pay_amount: sumOverflow
      });
    }

    if (countRemoveZero) {
      pays.push({
        payment_name: '抹零',
        count: countRemoveZero,
        pay_amount: sumRemoveZero
      });
    }

    if (promotionTypes['服务费']) {
      promotions.push({
        type: '服务费',
        discount: promotionTypes['服务费']
      });
    }

    service.lodash.forOwn(promotionTypes, function (v, k) {
      if (k !== '服务费') {
        promotions.push({
          type: k,
          discount: 0 - v
        });
      }
    });

    tickets.push({
      name: '小票单数',
      value: ticketInfos.length
    });
    tickets.push({
      name: '就餐人数合计',
      value: people
    });
    tickets.push({
      name: '餐饮收入合计',
      value: allMoney
    }); //计算payin payout

    var payInfo = {
      payin: 0,
      payout: 0
    };

    if (payInfos.docs) {
      var infos = payInfos.docs;
      infos.forEach(function (info) {
        if (info.type === 'payin') {
          payInfo.payin = service.decimal.add(payInfo.payin, info.money).toDecimalPlaces(2, 4).toNumber();
        } else {
          payInfo.payout = service.decimal.add(payInfo.payout, info.money).toDecimalPlaces(2, 4).toNumber();
        }
      });
    }

    return {
      store: store,
      items: items,
      pays: pays,
      tickets: tickets,
      promotions: promotions,
      ticketInfos: ticketInfos,
      unUpload: unUpload,
      sumOverflow: sumOverflow,
      payInfo: payInfo
    };
  })["catch"](function (err) {
    console.log('err', err);
  });
}

var DailyService = (_dec = mbus.Name('Daily'), _dec(_class = /*#__PURE__*/function () {
  function DailyService() {
    service.classCallCheck(this, DailyService);
  }

  service.createClass(DailyService, [{
    key: "dailyKnot",

    /**
     * 日结信息
     */
    value: function dailyKnot(client, name) {
      return GetSysDb(client.store_id).GetSaleTime().then(function (saletime) {
        return getDailyKnotinfo(client.store_id, saletime);
      }).then(function (data) {
        return {
          status_code: 0,
          data: data
        };
      })["catch"](function (e) {
        return {
          status_code: 1,
          code: 'DAILY_ERROR',
          description: e
        };
      });
    }
    /**
     * 日结小票
     */

  }, {
    key: "confirmInfo",
    value: function confirmInfo(client, name, number) {
      var _this = this;

      var today = service.moment();
      var todayStr = today.format('YYYY-MM-DD');
      var saleTime = '';
      return GetSysDb(client.store_id).GetSaleTime().then(function (saletime) {
        saleTime = saletime;

        if (saleTime > todayStr) {
          throw '营业时间已经大于当日时间';
        }

        return getDailyKnotinfo(client.store_id, saletime);
      }).then(function (data) {
        if (data.unUpload) {
          throw '有小票没有上传';
        }

        return _this.confirmTrans(client, name, number, false).then(function () {
          return data;
        });
      }).then(function (data) {
        data.start_time = saleTime;
        data.end_time = todayStr;
        data.busDate = saleTime;

        if (saleTime.substr(0, 10) === todayStr.substr(0, 10)) {
          saleTime = today.add(1, 'd').startOf('d').format('YYYY-MM-DD');
        } else {
          saleTime = todayStr;
        }

        return service.bluebird.all([GetDailyDb(client.store_id).saveDaily(data), GetSysDb(client.store_id).SetSaleTime(saleTime), GetSysDb(client.store_id).SetWorkPlan('clear')]);
      }).then(function (data) {
        service.SysData[client.store_id].busDate = saleTime;
        return {
          status_code: 0,
          data: data[0]
        };
      })["catch"](function (e) {
        return {
          status_code: 1,
          code: 'DAILY_ERROR',
          description: e
        };
      });
    }
    /**
     * 查询历史交班信息
     */

  }, {
    key: "historyWorkInfo",
    value: function historyWorkInfo(client, busDate, plan) {
      return GetDailyDb(client.store_id).getTrans({
        busDate: busDate,
        plan: plan
      }).then(function (res) {
        //            res.docs[0].tickets.map((item, index)=> {
        //            })
        // console.log(res.docs, 'res.docsres.docsres.docsres.docs')
        if (res.docs && res.docs.length > 0) {
          res.docs.forEach(function (v) {
            if (v && v.tickets) {
              v.tickets.forEach(function (item) {
                item.ticketNo = item.ticket_no;
                item.ticketId = item.ticket_id;
                item.busDate = item.bus_date;
                item.grossAmount = item.gross_amount;
                item.orderLine = item.products;
                item.payAmount = item.pay_amount;
                item.discountAmount = item.discount_amount;
                item.endTime = item.end_time;
                item.netAmount = item.net_amount;
              });
            }
          });
        }

        return {
          status_code: 0,
          data: res.docs
        };
      })["catch"](function (e) {
        return {
          status_code: 1,
          code: 'TRNAS_ERROR',
          description: e
        };
      });
    }
  }, {
    key: "GetTransTime",
    value: function GetTransTime(client) {
      return GetSysDb(client.store_id).GetTransTime().then(function (start) {
        return start;
      })["catch"](function (err) {
        return {
          status_code: 1,
          code: 'TRNAS_ERROR',
          description: e
        };
      });
    }
    /**
     * 查询交班信息交班信息
     */
    // transWorkInfo(client, user, number) {
    //     let tradeDetail = [];
    //     let payDetail = [];
    //     let payTotal = [];
    //     let record;
    //     let paykeyboard = SysData[client.store_id].paymentMeta;
    //     let end = moment().format('YYYY-MM-DD HH:mm:ss');
    //     return GetSysDb(client.store_id).GetTransTime()
    //     .then(start => {
    //         if (!start) {
    //             start = "";
    //         }
    //         return Promise.all([
    //             // GetTicketDb(store_id).GetTicketByEndTime(start, end, null),
    //             GetPayInfoDb(store_id).getPayInfoByTime(start, end, null),
    //             GetSysDb(client.store_id).GetStoreInfo(),
    //             GetSysDb(client.store_id).GetSaleTime(),
    //             GetSysDb(client.store_id).GetPosMoney(),
    //             GetSysDb(client.store_id).WorkInfo(),
    //             GetSysDb(client.store_id).GetWorkPlan(),
    //         ]);
    //     // }).then(([tickets, payInfos, storeInfo, saleTime, money, workInfo, plan]) => {
    //     }).then(([ payInfos, storeInfo, saleTime, money, workInfo, plan]) => {
    //         let store = {
    //             name: storeInfo.name,
    //             address: storeInfo.address,
    //             saleTime: saleTime,
    //             user,
    //         }
    //         let docs = tickets.docs;
    //         let pay = {};
    //         if (!money) {
    //             money = 0;
    //         }
    //         let info = {
    //             money: money,
    //             workTime: workInfo,
    //             transTime: end,
    //             number,
    //             user,
    //         }
    //         let saleInfo = {
    //             ticketNum: docs ? docs.length : 0,
    //         };
    //         let totalMoney = 0;
    //         docs.forEach(doc => {
    //             let op = SysData[client.store_id].users[doc.operator_id] ? SysData[client.store_id].users[doc.operator_id].name : '';
    //             let data = {
    //                 ticket_no: doc.ticket_no,
    //                 operator: op,
    //                 net_amount: doc.net_amount,
    //                 time: doc.end_time,
    //             };
    //             tradeDetail.push(data);
    //             //计算支付总计和明细
    //             doc.payments.forEach(p => {
    //                 let pid = p.id;
    //                 if (pay[pid]) {
    //                     pay[pid].count++;
    //                     pay[pid].amount = Decimal.add(pay[pid].amount, p.amount).toDecimalPlaces(2, 4).toNumber();
    //                 } else {
    //                     pay[pid] = {
    //                         amount: p.amount,
    //                         count: 1,
    //                     };
    //                 }
    //                 payDetail.push({
    //                     ticket_no: doc.ticket_no,
    //                     operator: op,
    //                     method: pid,
    //                     amount: p.amount,
    //                     time: p.pay_time,
    //                 });
    //             });
    //         });
    //         _.forOwn(pay, (v, k) => {
    //             let m = '';
    //             if (paykeyboard[k]) {
    //                 m = paykeyboard[k].name;
    //             }
    //             payTotal.push({method: m, count: v.count, amount: v.amount});
    //             if (m === '现金') {
    //                 money = Decimal.add(money, v.amount).toDecimalPlaces(2, 4).toNumber();
    //             }
    //             totalMoney = Decimal.add(totalMoney, v.amount).toDecimalPlaces(2, 4).toNumber();
    //         });
    //         payDetail.forEach(v => {
    //             let id = v.method;
    //             let m = '';
    //             if (paykeyboard[id]) {
    //                 m = paykeyboard[id].name;
    //             }
    //             v.method = m;
    //         });
    //         if (payInfos.docs) {
    //             payInfos.docs.forEach(v => {
    //                 if (v.type === 'payin') {
    //                     money = Decimal.add(money, +v.money).toDecimalPlaces(2, 4).toNumber();
    //                 } else if (v.type === 'payout') {
    //                     money = Decimal.add(money, -v.money).toDecimalPlaces(2, 4).toNumber();
    //                 }
    //             });
    //         }
    //         info.nowMoney = money;
    //         saleInfo.totalMoney = totalMoney;
    //         let b = moment(workInfo, 'YYYY-MM-DD HH:mm:ss');
    //         let e = moment(end, 'YYYY-MM-DD HH:mm:ss');
    //         let duration = (e - b) / 1000;
    //         info.duration = duration;
    //         record = {tickets: docs, tradeDetail, payTotal, payDetail, payInfos: payInfos.docs, store, info, saleInfo, plan, busDate: saleTime};
    //         //  info: totalMoney , money
    //         record = {store, info, saleInfo, plan, busDate: saleTime};
    //         return {status_code: 0, data: record};
    //     }).catch(e => {
    //         console.log('交班错误', e)
    //         return {status_code: 1, description: '交班错误', data: e, code: 'TRANS_ERROR'};
    //     });
    // }

    /**
     * 查询交班信息交班信息
     */

  }, {
    key: "transWorkInfo",
    value: function transWorkInfo(client, user, number, resdata, money) {
      var end = service.moment().format('YYYY-MM-DD HH:mm:ss');
      return service.bluebird.all([GetSysDb(client.store_id).GetStoreInfo(), // GetSysDb(client.store_id).GetSaleTime(),
      GetSysDb(client.store_id).WorkInfo(), GetSysDb(client.store_id).GetWorkPlan()]).then(function (_ref3) {
        var _ref4 = service.slicedToArray(_ref3, 3),
            storeInfo = _ref4[0],
            workInfo = _ref4[1],
            plan = _ref4[2];

        var totalMoney = resdata.totalMoney,
            tickets = resdata.tickets,
            nowMoney = resdata.nowMoney,
            saleTime = resdata.saleTime,
            data = posConfig.objectWithoutProperties(resdata, ["totalMoney", "tickets", "nowMoney", "saleTime"]);

        var store = {
          name: storeInfo.name,
          address: storeInfo.address,
          saleTime: saleTime,
          user: user
        };
        var info = {
          money: money,
          nowMoney: nowMoney,
          workTime: workInfo,
          transTime: end,
          number: number,
          user: user
        };
        var b = service.moment(workInfo, 'YYYY-MM-DD HH:mm:ss');
        var e = service.moment(end, 'YYYY-MM-DD HH:mm:ss');
        var duration = (e - b) / 1000;
        info.duration = duration;
        var docs = tickets.docs;
        var saleInfo = {
          ticketNum: docs ? docs.length : 0
        };
        saleInfo.totalMoney = totalMoney;
        record = _objectSpread$1(_objectSpread$1({}, data), {}, {
          tickets: tickets,
          store: store,
          info: info,
          saleInfo: saleInfo,
          plan: plan,
          busDate: saleTime
        });
        return {
          status_code: 0,
          data: record
        };
      })["catch"](function (e) {
        console.log('交班错误', e);
        return {
          status_code: 1,
          description: '交班错误',
          data: e,
          code: 'TRANS_ERROR'
        };
      });
    }
  }, {
    key: "confirmTrans",
    value: function confirmTrans(client, user, number, noNext) {
      return this.transWorkInfo(client, user, number).then(function (ret) {
        if (ret.status_code === 0) {
          var now = service.moment().format('YYYY-MM-DD HH:mm:ss');
          return service.bluebird.all([GetSysDb(client.store_id).SetTransTime(now), GetSysDb(client.store_id).SetWorkPlan(noNext ? 'no' : 'next'), GetDailyDb(client.store_id).saveTrans(ret.data), GetSysDb(client.store_id).SetPosMoney(ret.data.info.nowMoney), GetSysDb(client.store_id).SetWorkInfo("")]).then(function () {
            ret.data.store.print_time = now;
            return ret;
          });
        }

        return ret;
      })["catch"](function (e) {
        console.log('交班错误', e);
        return {
          status_code: 1,
          code: 'TRANSERROR',
          description: e
        };
      });
    }
  }, {
    key: "historyDailyInfo",
    value: function historyDailyInfo(client, start, end) {
      return GetDailyDb(client.store_id).getDailyList({
        start: start,
        end: end
      }).then(function (data) {
        return {
          status_code: 0,
          data: data
        };
      })["catch"](function (e) {
        return {
          status_code: 1,
          code: 'FIND_ERROR',
          data: e,
          description: '查询错误'
        };
      });
    }
  }, {
    key: "getPosMoney",
    value: function getPosMoney(client) {
      return GetSysDb(client.store_id).GetPosMoney().then(function (money) {
        return money;
      })["catch"](function (err) {
        return {
          status_code: 1,
          code: 'GET_MONEY_ERROR',
          description: e
        };
      });
    }
  }]);

  return DailyService;
}()) || _class);

var _$1 = require('lodash');

var Promise$1 = require('bluebird');

var debug = require('debug')('hex:hipos:service:table:store:memory');

var _$2 = require('lodash');

var axios = require('axios');

var debug$1 = require('debug')('hex:hipos:service:table');

var JSONBig = require('json-bigint')({
  storeAsString: true
});

var BoltStore;

try {
  BoltStore = require('./storage/bolt-ws');
} catch (e) {
  debug$1("fail load boltdb websocket store");
}

var Promise$2 = require('bluebird');

/**
 * Created by laomao on 2018/1/11.
 */
var ts = service.Ts; // import DbProxy from '../../db/proxy';
// let { GetTsDb } = DbProxy
// export let ts = GetTsDb;

var main = service.GetMain();
var meta = new service.BoltDb('posMetadata', main);
var _tmpDb = {};
var DataInit = (function () {
  return meta.get('config_info').then(function (res) {
    if (res) {
      //打印模板
      var printer_templates = res.printer_templates || res.print_template || {}; //console.log('打印模板', printer_templates)
      //console.log('res.adapter', res.adapter)

      _tmpDb.GetPosAdapter = res.adapter;
      return Promise.all([service.SetTemplates(printer_templates), service.SetPosAdapter(res.adapter)]);
    }

    return;
  }) //商品主档
  .then(function () {
    return meta.get('product');
  }).then(function (res) {
    if (res) {
      //商品类别
      return meta.get('product_category').then(function (r) {
        if (r) {
          var ProductCategory = {};

          for (var i in r) {
            var o = r[i];
            ProductCategory[o.id] = o;
          } //console.log('新的',ProductCategory)


          return ProductCategory;
        }

        return {};
      }).then(function (ProductCategory) {
        return {
          res: res,
          ProductCategory: ProductCategory
        };
      });
    }

    return {};
  }).then(function (_ref) {
    var res = _ref.res,
        ProductCategory = _ref.ProductCategory;

    //console.log('商品主档', res)
    if (res) {
      //console.log('商品分类数据', ProductCategory)
      var ProductData = res; //console.log('商品数据》》', ProductData);

      var ProductObj = {};

      var _loop = function _loop(i) {
        var item = ProductData[i];
        var ids = [];

        if (item.relation && item.relation.product_category) {
          ids = [item.relation.product_category]; //console.log('商品分类 ：',item.relation);

          var categoryObj = ProductCategory[item.relation.product_category]; //console.log('categoryObj:',categoryObj)

          if (categoryObj && categoryObj.parent) {
            //console.log('有商品类别！！', categoryObj.id)
            var getParentId = function getParentId(co) {
              //console.log(':::>>',co);
              ids = [co.id].concat(service.toConsumableArray(ids));

              if (co.parent) {
                getParentId(co.parent);
              }
            };

            getParentId(categoryObj.parent);
          }
        }

        item.categories = ids;
        item.has_topping = !!(item.topping && item.topping.length > 0); //console.log('item.has_topping', item.name, item.has_topping)

        ProductObj[item.product_id] = item;
      };

      for (var i in ProductData) {
        _loop(i);
      }

      service.productFormatting(ProductObj); // console.log('商品转格式后存到数据的数据', ProductObj)

      _tmpDb.GetProduct = ProductObj;
      return service.SetProduct(ProductObj)["catch"](function (err) {
        console.log('商品主档存数据库异常', err);
        return err;
      });
    }
  }) //支付信息
  .then(function () {
    return meta.get('payment_meta');
  }).then(function (res) {
    if (res) {
      var data = {};
      var PaymentIgnore = null;

      for (var i in res) {
        var o = res[i];
        data[o.id] = o;

        if (o.code == '888888') {
          PaymentIgnore = o;
        }
      } //console.log('存到数据库的支付信息数据', data)


      return service.SetPaymentMeta(data).then(function (res) {
        if (PaymentIgnore) {
          _tmpDb.GetPaymentIgnore = PaymentIgnore;
          return service.SetPaymentIgnore(PaymentIgnore).then(function (_res) {
            return res;
          });
        }

        return res;
      })["catch"](function (err) {
        console.log('支付信息存数据库异常', err);
        return err;
      });
    }

    return res;
  }) //卡券分类
  .then(function () {
    return meta.get('coupon');
  }).then(function (res) {
    if (res) {
      return CouponsConfig.CouponsConfig(res).then(function (data) {
        //console.log('保存卡券分类到数据库', data)
        _tmpDb.GetCoupon = data;
        return service.SetCoupon(data)["catch"](function (err) {
          console.log('保存卡券数据库出错', err);
          return err;
        });
      });
    }

    return res;
  }) //原因主档
  .then(function () {
    return meta.get('reason_info');
  }).then(function (res) {
    if (res) {
      var ReasonInfoObj = {};

      for (var r in res) {
        var o = res[r];
        ReasonInfoObj[o.group] || (ReasonInfoObj[o.group] = []);
        ReasonInfoObj[o.group].push(o);
      } //console.log('原因主档', ReasonInfoObj)


      return service.SetReasonInfo(ReasonInfoObj)["catch"](function (err) {
        console.log('原因信息存数据库异常', err);
        return err;
      });
    }

    return res;
  }) //pos用户
  .then(function () {
    return meta.get('pos_user');
  }).then(function (res) {
    console.log("拉取pos用户结果》", res);

    if (res) {
      return service.SetUser(res)["catch"](function (err) {
        console.log('pos用户存数据库异常', err);
        return err;
      });
    }

    return res;
  }) //支付渠道来源
  .then(function () {
    return meta.get('cooperation');
  }).then(function (res) {
    //console.log('支付渠道来源', res)
    if (res) {
      var data = {};
      res.forEach(function (o) {
        data[o.id] = o;
      });
      _tmpDb.SetCooperation = data;
      return service.SetCooperation(data)["catch"](function (err) {
        console.log('支付渠道来源存数据库异常', err);
        return err;
      });
    }

    return Promise.reject(res);
  }) //商品键盘 todo
  .then(function () {
    return meta.get('keyboard_main');
  }).then(function (res) {
    //return obj;
    //if (res.status_code == 0 && res.payload) {
    //console.log('商品键盘',res)
    if (res) {
      // console.log('商品键盘', res)
      return service.mainKeyboardAssemble(res, service.GetProduct())["catch"](function (err) {
        console.log('商品键盘组装异常', err);
        return Promise.reject({
          next: true,
          err: err
        });
      }).then(function (data) {
        for (var i in data) {
          data[i].has_children = !!(data[i].children && data[i].children.length); //delete data[i].children
        }

        _tmpDb.GetMainKeyboard = data;
        service.SetKeyboard(data);
        return data;
      });
    }

    return Promise.reject({
      res: res
    });
  }) //支付键盘
  .then(function () {
    return meta.get('keyboard_payment');
  }).then(function (res) {
    //console.log('支付键盘结果', res);
    if (res) {
      return service.paymentKeyboardAssemble(res, service.GetPaymentMeta())["catch"](function (err) {
        console.log('支付键盘组装异常', err);
        return Promise.reject({
          next: true,
          err: err
        });
      }).then(function (data) {
        //console.log('支付键盘', data);
        var p;

        if (_tmpDb.SetCooperation) {
          p = Promise.resolve(_tmpDb.SetCooperation);
        } else {
          p = service.GetCooperation();
        }

        return p.then(function (res) {
          //console.log('支付渠道来源', res);
          if (res) {
            data = (data || []).map(function (o) {
              o.payment || (o.payment = {});
              var cooperation_id = o.payment.cooperation_id;

              if (cooperation_id) {
                var c = res[cooperation_id];
                o.payment.local_app_path = c.local_app_path || ""; //console.log('支付项', o, c.local_app_path);
              }

              return o;
            });
          } else {
            console.log('支付渠道来源数据为空');
          }

          return data;
        })["catch"](function (err) {
          console.log('获取支付渠道来源异常', err);
          return data;
        });
      }).then(function (data) {
        _tmpDb.GetPaymentKeyboard = data;
        return data;
      }).then(function (data) {
        return service.SetKeyboard$1(data);
      });
    }

    return Promise.reject(res);
  }) //功能键盘
  .then(function () {
    return meta.get('keyboard_func');
  }).then(function (res) {
    //console.log('功能键盘结果', res);
    if (res) {
      return service.SetKeyboard$2(res)["catch"](function (err) {
        console.log('功能键盘存数据库异常', err);
        return obj;
      });
    }

    return Promise.reject(res);
  }) //餐段键盘
  .then(function () {
    return meta.get('keyboard_meal');
  }).then(function (res) {
    // console.log('餐段键盘结果', res);
    if (res) {
      return service.SetKeyBoardMeal(res)["catch"](function (err) {
        console.log('餐段键盘存数据库异常', err);
        return obj;
      });
    }

    return Promise.reject(res);
  }) //充值键盘
  .then(function () {
    return meta.get('keyboard_charge');
  }).then(function (res) {
    //console.log('充值键盘结果', res);
    if (res) {
      return service.paymentKeyboardAssemble(res, service.GetPaymentMeta())["catch"](function (err) {
        console.log('充值键盘组装异常', err);
        return Promise.reject({
          next: true,
          err: err
        });
      }).then(function (data) {
        //console.log('充值键盘', data);
        var p;

        if (_tmpDb.SetCooperation) {
          p = Promise.resolve(_tmpDb.SetCooperation);
        } else {
          p = service.GetCooperation();
        }

        return p.then(function (res) {
          //console.log('支付渠道来源', res);
          if (res) {
            data = (data || []).map(function (o) {
              o.payment || (o.payment = {});
              var cooperation_id = o.payment.cooperation_id;

              if (cooperation_id) {
                var c = res[cooperation_id];
                o.payment.local_app_path = c.local_app_path || ""; //console.log('支付项', o, c.local_app_path);
              }

              return o;
            });
          } else {
            console.log('支付渠道来源数据为空');
          }

          return data;
        })["catch"](function (err) {
          console.log('获取支付渠道来源异常', err);
          return data;
        });
      }).then(function (data) {
        //console.log('充值键盘最终保存到数据库数据', data)
        return data;
      }).then(function (data) {
        _tmpDb.GetKeyboardCharge = data;
        return data;
      }).then(function (data) {
        return service.SetKeyboardCharge(data);
      })["catch"](function (err) {
        console.log('充值键盘存数据库异常', err);
        return Promise.reject(err);
      });
    }

    return res;
  }).then(function () {
    return _tmpDb;
  });
});

function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { service.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var DailyService$1 = new DailyService();
service.createSysData();
var _tmpDb$1 = {};
var timeVaue = {};

var time = function time(data) {
  timeVaue[data] = new Date().getTime();
};

var timeEnd = function timeEnd(data) {
  console.info(data + ':' + (new Date().getTime() - timeVaue[data]));
  delete timeVaue[data];
};
/**
 'NORMAL', '普通商品',   1, 'sale_type'
 'ADDITION', '配料或配菜',   2, 'sale_type'
 'MEAL_BUNDLE', '固定套餐',   3, 'sale_type'
 'MEAL_CUSTOM', '可选套餐',   4, 'sale_type')
 'SPU', '标准化商品',   5, 'sale_type'
 */


console.info('js load complete');

var LoadInit = function LoadInit() {
  time("loadData");
  time('goInit');
  return DataInit()["catch"](function (err) {
    console.log('数据初始化错误', err);
  }).then(function (_db) {
    _tmpDb$1 = _db || {}; //console.log('_tmpDb', _tmpDb)

    timeEnd('goInit');
    time('datainit');
    return CacheMemory();
  });
};

var CacheMemory = function CacheMemory() {
  return service.GetPosId().then(function (res) {
    if (res) {
      service.SysData.pos_id = res;
      _tmpDb$1.GetPosId = res;
      return res;
    }

    return Promise.reject({
      end: true,
      fail: true,
      code: "NOT_DEFINED_POSID",
      description: "获取不到posid",
      status_code: 1
    });
  }) //从数据库拿数据来初始化
  .then(function (res) {
    return Promise.all([service.GetPosInfo()["catch"](function (err) {
      // console.log('GetPosInfo异常', err)
      return Promise.reject(err);
    }), service.GetConfigPosInfo()["catch"](function (err) {
      // console.log('GetConfigPosInfo异常', err)
      return Promise.reject(err);
    }), Promise.resolve().then(function () {
      if (!_tmpDb$1.GetPosAdapter) {
        return Promise.reject();
      }

      return _tmpDb$1.GetPosAdapter;
    })["catch"](function () {
      return service.GetPosAdapter()["catch"](function (err) {
        // console.log('GetPosAdapter异常', err)
        return Promise.reject(err);
      });
    }), Promise.resolve().then(function () {
      if (!_tmpDb$1.GetMainKeyboard) {
        return Promise.reject();
      }

      return _tmpDb$1.GetMainKeyboard;
    })["catch"](function () {
      return service.GetKeyboard().then(function (res) {
        //console.log('主键盘数据', res)
        return res || [];
      })["catch"](function (err) {
        console.log('GetKeyboard异常', err);
        return Promise.reject(err);
      });
    }), service.GetStoreInfo().then()["catch"](function (err) {
      // console.log('GetStoreInfo异常', err)
      return Promise.reject(err);
    }), Promise.resolve(_tmpDb$1.GetPosId), Promise.resolve().then(function () {
      if (!_tmpDb$1.GetPaymentKeyboard) {
        return Promise.reject();
      }

      return _tmpDb$1.GetPaymentKeyboard;
    })["catch"](function () {
      return service.GetKeyboard$1(true).then(function (res) {
        return res && res.docs || [];
      })["catch"](function (err) {
        console.log('GetKeyboard异常', err);
        return Promise.reject(err);
      });
    }), Promise.resolve().then(function () {
      if (!_tmpDb$1.GetKeyboardCharge) {
        return Promise.reject();
      }

      return _tmpDb$1.GetKeyboardCharge;
    })["catch"](function () {
      return service.GetKeyboardCharge()["catch"](function (err) {
        console.log('GetKeyboardCharge异常', err);
        return Promise.reject(err);
      });
    }), ts.init().then(function (res) {// console.log('桌位数据00000：', res);
    })["catch"](function (err) {
      console.log('桌位数据异常000000：', err);
      return null;
    }), // Ts.initialize()
    //   .then(res => {
    //     console.log('桌位数据：', res);
    //   })
    //   .catch(err => {
    //     console.log('桌位数据异常：', err);
    //     return null;
    //   }),
    service.GetEnginData().then(function (res) {
      try {
        var engine = Promotion["default"];

        if (res) {
          //console.log('促销引擎规则数据：',JSON.stringify(res))
          engine && engine.initialize(res);
        }

        return res;
      } catch (err) {
        return null;
      }
    })["catch"](function (err) {
      console.log('GetEnginData异常', err);
      return err;
    }), Promise.resolve().then(function () {
      if (!_tmpDb$1.GetProduct) {
        return Promise.reject();
      }

      return _tmpDb$1.GetProduct;
    })["catch"](function () {
      return service.GetProduct()["catch"](function (err) {
        console.log('GetProduct异常', err);
        return Promise.reject(err);
      });
    }), service.GetPosConfig()["catch"](function (err) {
      console.log('GetPosConfig异常', err);
      return Promise.reject(err);
    }), // //订单号
    // SysDb.GetTicketNo()
    //   .catch(err => {
    //     console.log('GetTicketNo异常', err)
    //     return null
    //   }),
    //特殊的
    service.GetSaleTime()["catch"](function (err) {
      console.log('GetSaleTime异常', err);
      return null;
    }), Promise.resolve().then(function () {
      if (!_tmpDb$1.GetCoupon) {
        return Promise.reject();
      }

      return _tmpDb$1.GetCoupon;
    })["catch"](function () {
      return service.GetCoupon()["catch"](function (err) {
        console.log('GetCoupon异常', err);
        return Promise.reject(err);
      });
    }), //SysDb.GetRegister(),
    //特殊的
    rpc.getGetWeyData()["catch"](function (err) {
      console.log('getGetWeyData异常', err);
      return Promise.reject(err);
    }), service.GetMembershipCooperation()["catch"](function (err) {
      console.log('GetMembershipCooperation异常', err);
      Promise.reject(err);
    }), Promise.resolve().then(function () {
      if (!_tmpDb$1.GetPaymentIgnore) {
        return Promise.reject();
      }

      return _tmpDb$1.GetPaymentIgnore;
    })["catch"](function () {
      return service.GetPaymentIgnore()["catch"](function (err) {
        console.log('GetPaymentIgnore异常', err);
        return Promise.reject(err);
      });
    }), service.GetPaymentMeta(), // SysDb.GetPaymentDiscountTrans(),
    service.GetRegister()]);
  }).then(function (res) {
    timeEnd('datainit');
    return res;
  }).then(function (_ref) {
    var _ref2 = service.slicedToArray(_ref, 20),
        posInfo = _ref2[0],
        ConfigPosInfo = _ref2[1],
        adapter = _ref2[2],
        keyBoardMains = _ref2[3],
        storeInfo = _ref2[4],
        pos_Id = _ref2[5],
        payment = _ref2[6],
        keyboardCharge = _ref2[7],
        table = _ref2[8],
        engin = _ref2[9],
        Product = _ref2[10],
        PosConfig = _ref2[11],
        TicketNo = _ref2[12],
        SaleTime = _ref2[13],
        Coupon
    /*,Register*/
    = _ref2[14],
        gatewayData = _ref2[15],
        MembershipCooperation = _ref2[16],
        PaymentIgnore = _ref2[17],
        PaymentMeta = _ref2[18],
        // PaymentDiscountTrans,
    RegisterInfo = _ref2[19];

    time('cacheData'); //console.log('所有数据', _tmpDb)

    _tmpDb$1 = null;
    posInfo || (posInfo = {});
    service.SysData.pos = {
      code: posInfo.code
    };
    service.SysData.paymentIgnore = PaymentIgnore;
    service.SysData.config_id = posInfo.config_id;
    service.SysData.store_id = posInfo.store_id; //SysData.pos_prefix = (Register && Register.order_prefix) || "";

    if (!ConfigPosInfo) {
      // console.log('拿不到配置信息', ConfigPosInfo)
      service.SysData.err.push('获取接口api/v1/config/pos_info失败');
      rpc.unregister();

      if (onglobalThis.onload) {
        onglobalThis.onload();
      }

      return;
    }

    service.SysData.paymentMeta = PaymentMeta; //console.log('商品数据db：',Product);
    //console.log('pos配制', PosConfig)
    //if()
    // console.log('酒店编码:', PosConfig.store.cost_center_name);

    service.SysData.hotelCode = PosConfig.store.cost_center_name;
    service.SysData.membershipCooperation = MembershipCooperation || [];
    service.SysData.busDate = SaleTime;
    service.SysData.product = Product || {};
    service.SysData.keyboardData = {};
    service.SysData.keyboardPayment = {};
    service.SysData.storeInfo = storeInfo;

    if (!service.SysData.busDate) {
      service.SysData.err.push('获取营业日期失败'); // console.log('获取营业日期失败！！！！！！！！！！！！！！！！')
    }

    if (TicketNo) {
      var bds = TicketNo.split('-'); // console.log('$$$$$$$$$$$$$$$', bds, TicketNo)

      var NoDate = service.moment(bds[0]).format('YYYY-MM-DD'); //console.log('订单号日期和营业日期', NoDate == SysData.busDate)

      localStorage.ticketNoDate = NoDate;
    } // TicketInit(posInfo.store_id, TicketNo || localStorage.ticketNo || '')


    keyBoardMains.forEach(function (v) {
      delete v.children;
      service.SysData.keyboardData[v.id] = v;
    }); //console.log('支付键盘！！！！！！！！！！@', payment);

    (payment || []).forEach(function (v) {
      delete v.children;
      service.SysData.keyboardPayment[v.id] = v;
      service.SysData.payByObjId[v.object_id] = v; //杉德支付退款切换支付方式退款
      //console.log(v)

      if (v.payment.name == '现金') {
        //console.log('现金！！！！！！！！！！', v)
        service.SysData.shandeRefundPayment.payment = v.payment;
      } else if (v.payment.biz_code == "SHANDE") {
        service.SysData.shandeRefundPayment.id = v.payment.id;
      }
    }); //console.log('杉德退款替换信息', SysData.shandeRefundPayment);
    // SysData.posPrefix = ((RegisterInfo || {}).order_prefix || 'null') //机器码

    service.SysData.posPrefix = RegisterInfo ? RegisterInfo.order_prefix : null; //console.log('机器码',SysData.orderPrefix)
    //支付折扣互转配置主档
    // SysData.paymentDiscountTrans = {}
    // if (!PaymentDiscountTrans) {
    //   SysData.err.push('获取不到支付折扣互转配置')
    // } else {
    //   for (let i in PaymentDiscountTrans) {
    //     let o = PaymentDiscountTrans[i]
    //     SysData.paymentDiscountTrans[o.promotion_id] = o
    //   }
    // }
    //充值键盘

    (keyboardCharge || []).forEach(function (v) {
      delete v.children;
      service.SysData.keyboardCharge[v.id] = v;
    }); //卡券分类

    service.SysData.coupon = {};
    (Coupon && Coupon.children || []).forEach(function (o) {
      //console.log('>>>>>>>', o);
      service.SysData.coupon[o.id] = o;
      service.SysData.couponRefundable[o.coop_code] = o.refundable; //console.log('退款',SysData.couponRefundable)
    });
    service.SysData.printDevices = []; //打印驱动

    var printDevices = adapter && adapter.context && adapter.context.devices || []; //console.log('打印机驱动', printDevices);

    printDevices.forEach(function (o) {
      if (o.type == 'PRINTER' || o.type == 'ticket' || o.type == 'kitchen') {
        (o.print_category || []).forEach(function (id) {
          //console.log('分组id', id, o);
          service._typeof_1(id) == 'object' && (id = id.value);
          service.SysData.printDevices.push({
            id: id,
            data: o
          });
        });
      }
    }); //console.log('缓存信息', SysData);

    var group = storeInfo.pos_config_group;
    var groups = ConfigPosInfo.config_group || {};

    var cal_result = groups["default"] || _objectSpread$2({}, ConfigPosInfo);

    if (group && groups[group]) {
      cal_result = groups[group];
    }

    var cloud_info = {};

    if (gatewayData && gatewayData.payload) {
      cloud_info.token = gatewayData.payload.HEX_CLIENT_ACCESS_TOKEN;
      cloud_info.uid = gatewayData.payload.HEX_CLIENT_DEFAULT_USERID;
      cloud_info.pid = gatewayData.payload.HEX_CLIENT_DEFAULT_PARTNERID;
      cloud_info.url = PosConfig.pos_gateway_new;
    }

    if (window.globalHiposConfig && window.globalHiposConfig.gateway) {
      cloud_info.url = window.globalHiposConfig.gateway;
    }

    var javaData = {
      config: cal_result,
      adapter: adapter,
      posInfo: {
        pos_Id: pos_Id,
        store_id: storeInfo.id,
        client_secret: service.config.signin.client_secret,
        client_id: service.config.signin.client_id,
        allow_diary_time: storeInfo.context && storeInfo.context.allow_diary_time || "",
        auto_diary_time: storeInfo.context && storeInfo.context.auto_diary_time || "",
        store_name: storeInfo.name
      },
      host_info: {
        store_name: storeInfo.name,
        store_code: storeInfo.code,
        terminal_name: PosConfig.name,
        terminal_code: PosConfig.code
      },
      cloud_info: cloud_info,
      posConfig: service.SysData.posProperties,
      screen_images: PosConfig.screen_images
    };

    if (javaData.posInfo.auto_diary_time) {
      //TicketDb.AutoDaily(javaData.posInfo.auto_diary_time);
      //TicketDb.AutoDaily("17:39:00");
      DailyService$1.autoDaily(javaData.posInfo.auto_diary_time, {});
    }

    if (PosConfig && PosConfig.store && PosConfig.store[0]) {
      javaData.posInfo.partner_id = PosConfig.store[0].partner_id;
    } //Gateway.connect(javaData)
    // console.log('给java服务数据：', javaData);


    if (javaData.cloud_info && javaData.cloud_info.url) {
      // console.log('初始化gateway');
      service.InitGateWay(javaData);
    } //Gateway.connect(javaData.config.gateway, javaData.posInfo.pos_Id)
    //Gateway.connect(javaData.config.gateway, javaData.posInfo.pos_Id)


    timeEnd('cacheData');
    time("java");
    return rpc.init(javaData).then(function () {
      // console.log('启动成功！')
      timeEnd("java");

      if (sessionStorage.getItem('autoUpdate')) {
        sessionStorage.setItem('autoUpdate', '');
        service.execClient('getNewAge', '');
      }

      if (onglobalThis.onload) {
        onglobalThis.onload();
      }

      window.tmpLoadOk && window.tmpLoadOk();
    }, function (err) {
      console.log('java服务 err:', err);
    });
  }).then(function () {
    timeEnd('loadData');
  })["catch"](function (err) {
    console.log('err', err);

    if (err && (err.code == 'NOT_DEFINED_POSID' || err.code == 'NOT_DEFINED_SIGNIN')) {
      console.log('还没激活', err);
      rpc.unregister();

      if (onglobalThis.onload) {
        onglobalThis.onload();
      }

      return; //Promise.reject(err);
    }

    console.log('主档信息不全，不能正常启动hipos,要重新拉主档', err);
  });
}; // LoadInit();

var SysInit = LoadInit;

var FuncCoupon = new ( /*#__PURE__*/function () {
  function _class() {
    service.classCallCheck(this, _class);
  }

  service.createClass(_class, [{
    key: "filterMemberCoupon",
    //过滤会员卡券
    value: function filterMemberCoupon(order, couponObj) {
      //console.log('会员》》》《', orderData._heavy.members, couponObj);
      var orderData = order.GetOrderData();

      var _loop = function _loop(i) {
        var m = orderData._heavy.members[i]; //console.log('个数》》', m.coupons.length)

        m.lockCoupons || (m.lockCoupons = {});
        m.coupons = (m.coupons || []).filter(function (o) {
          //console.log(o);
          for (var id in couponObj) {
            if (id == o.code_no) {
              //console.log('去掉卡券>>', o);
              m.lockCoupons[id] = o;
              return false;
            }
          }

          return true;
        });
        m.couponData || (m.couponData = {});

        for (var _i in m.couponData) {
          m.couponData[_i] = (m.couponData[_i] || []).filter(function (o) {
            //console.log(o);
            for (var id in couponObj) {
              if (id == o.code_no) {
                //console.log('去掉卡券>>', o);
                m.lockCoupons[id] = o;
                return false;
              }
            }

            return true;
          });
          /*if (!m.couponData[i].length) {
           delete m.couponData[i];
           }*/
        }
      };

      for (var i in orderData._heavy.members) {
        _loop(i);
      }
    } //反核销还原会员卡券

  }, {
    key: "restoreMemberCoupon",
    value: function restoreMemberCoupon(store_id, orderData, external_code) {
      (orderData._heavy.members || []).map(function (o, index) {
        for (var i in o.lockCoupons || []) {
          if (i == external_code) {
            var __o = o.lockCoupons[i];
            delete orderData._heavy.members[index].lockCoupons[i];

            orderData._heavy.members[index].coupons.push(__o);

            orderData._heavy.members[index].couponData[__o.name] && orderData._heavy.members[index].couponData[__o.name].push(__o);
          }
        }

        return o;
      });
    } //添加产品卡券

  }, {
    key: "setProductCoupon",
    value: function setProductCoupon(store_id, order, SysData, _code, o) {
      var isPay = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
      //console.log('卡券商品匹配>>>>>>>>>>>>>>>>>>>>>>>', order, SysData, _code, o);
      var orderData = order.GetOrderData();
      var isSuccess = false;

      var good = service.lodash.find(SysData[store_id].product, function (o) {
        return o.code == _code;
      });

      if (good) {
        isSuccess = true;
        good = JSON.parse(JSON.stringify(good)); //转格式。。。（后期有空做一个全局转换，拉主档转换和卡券转换共用）

        /* if (good.sale_type == 'MEAL_BUNDLE') {
            let context = { price: [] };
            if (good.context && typeof good.context == 'string') {
                context = JSON.parse(good.context);
            }
            good.meal = context.price || [];
         } else if (good.sale_type == 'MEAL_CUSTOM') {
            let item = good;
            let context = {};
            if (good.context) {
                context = JSON.parse(good.context);
            }
             //console.log('发现可选套餐', context);
            item.meal = context.price || {};
            item.meal.cus_price = item.meal.cus_price || [];
            item.meal.bud_price = item.meal.bud_price || [];
             //兼容旧版统一格式
            if (!Array.isArray(item.meal.cus_price)) {
                //console.log('需要转换1:', item.meal.cus_price);
                let _mealData = [];
                for (let q in item.meal.cus_price) {
                    let _q = item.meal.cus_price[q];
                    let _item = {
                        "items": [],
                        "price": 0,
                        "quantity": 1,
                        "group_name": q,
                    }
                    for (let c in _q) {
                        let _c = _q[c];
                        if (c == 'price') {
                            _item.price = Number(_c);
                        } else if (c == 'quantity') {
                            _item.quantity = Number(_c);
                        } else {
                            _c.type || (_c.type = 'meal');
                            _item.items.push(_c);
                        }
                        //console.log(c, _c);
                    }
                    _mealData.push(_item);
                    //console.log('cus_price>>>>>>>>>>>', q, _q);
                }
                item.meal.cus_price = _mealData;
                //console.log('cus_price转换之后', _mealData);
            }
            if (!Array.isArray(item.meal.bud_price)) {
                //console.log('需要转换2:', item.meal.bud_price);
                let _mealData = [];
                for (let q in item.meal.bud_price) {
                    let _q = item.meal.bud_price[q];
                    let _item = {
                        "items": [],
                        //"price": 0,
                        "quantity": 1,
                        "group_name": q,
                    }
                    for (let c in _q) {
                        let _c = _q[c];
                        if (c == 'price') {
                            _item.price = Number(_c);
                        } else if (c == 'quantity') {
                            _item.quantity = Number(_c);
                        } else {
                            _c.type || (_c.type = 'meal');
                            _c.price = Number(_c.price);
                            _item.items.push(_c);
                        }
                        //console.log(c, _c);
                    }
                    _mealData.push(_item);
                    //console.log('bud_price>>>>>>>>>>>', q, _q);
                }
                item.meal.bud_price = _mealData;
                //console.log('bud_price转换之后', _mealData);
             }
             //console.log('可选套餐：', JSON.stringify(item.meal));
            item.meal.cus_price = item.meal.cus_price.map((o) => {
                o.items || (o.items = []);
                o.items = o.items.map((o2) => {
                    o2.price = o.price;
                     //拼打印
                    let _pp = ProductObj[o2.id] || {};
                    _pp.relation && _pp.relation.print_category && (o2.printCategory = _pp.relation.print_category);
                     //console.log('可选中可选细项', _pp, o2);
                    //let _p = ProductObj[o2.id]||{retail:-1}
                    //o2.retail = _p.retail;
                    return o2;
                })
                return o;
            });
             item.meal.bud_price = item.meal.bud_price.map(o => {
                o.items || (o.items = []);
                o.items = o.items.map((o2) => {
                    //拼打印
                    let _pp = ProductObj[o2.id] || {};
                    _pp.relation && _pp.relation.print_category && (o2.printCategory = _pp.relation.print_category);
                    //console.log('可选中固定细项', _pp, o2);
                    return o2;
                })
                return o;
            })
            good = item;
        }
         delete good.topping;
        delete good.context; */

        delete good.topping; //console.log('找到的商品', JSON.parse(JSON.stringify(good)));

        good = new service.Goods(store_id, good.product_id, '', 'product');
        good.sequence_id = o.sequence_id;
        good.external_code = o.external_code;
        good.saleType = 'COUPON_PRODUCT';
        good.isPay = isPay; //console.log('找到的商品,转了格式', good);
        //过滤重复的卡券

        var reSet = false;

        for (var i in orderData.orderLine) {
          var _o = orderData.orderLine[i];

          if (good.external_code == _o.external_code || good.sequence_id == _o.sequence_id) {
            console.log(good.external_code + '卡券号重复，过滤');
            reSet = true;
          }
        }

        if (!reSet) {
          orderData.orderLine.push(good);
        }

        orderData.Calculator(); //orderData.coupon.push(orderData._heavy.coupon.data[o.sequence_id].req);
      } else {
        console.log(_code + '商品卡券卡券找不到商品');
      }

      return isSuccess;
    }
  }]);

  return _class;
}())();

function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { service.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var pay2promotion = {
  Promotion: false
};
var CouponPay = new ( /*#__PURE__*/function () {
  function _class() {
    service.classCallCheck(this, _class);
  }

  service.createClass(_class, [{
    key: "_getHeaderParam",

    /**
     * 卡券支付参数头部
     * @param orderData
     * @param SysData
     * @returns {{store_id: string, pos_id: string, ticket_id: *, order_no: *, amount: number, pay_amount: number, sales_date: *, sales_time: *}}
     * @private
     */
    value: function _getHeaderParam(orderData, sysData) {
      console.log('_getHeaderParam_getHeaderParam_getHeaderParam_getHeaderParam', orderData, sysData);
      return {
        store_id: sysData.store_id,
        pos_id: sysData.pos_id,
        ticket_id: orderData.paymentsId,
        order_no: orderData.ticketNo,
        amount: 0,
        pay_amount: 0,
        sales_date: service.moment(orderData.startTime).format('YYYY-MM-DD'),
        sales_time: service.moment(orderData.startTime).format('YYYY-MM-DD H:mm:ss'),
        coupons: [],
        member: []
      };
    }
    /**
     * 卡券核销参数
     * @param orderData
     * @param coupons
     * @param member
     * @param SysData
     * @returns {*}
     */

  }, {
    key: "getProductParams",
    value: function getProductParams(orderData, _ref) {
      var coupons = _ref.coupons,
          member = _ref.member;

      // console.log('获取产品卡券参数》》》》》》》》', { coupons, member })
      var params = _objectSpread$3(_objectSpread$3({}, this._getHeaderParam(orderData, service.SysData)), {}, {
        coupons: coupons || [],
        member: member || []
      });

      if (orderData.tableNo) {
        params.table_no = orderData.tableNo;
      } //先检查产品存在不存在


      var emptyProduct = [];

      var _loop = function _loop(i) {
        var coupons = params.coupons[i]; //console.log('卡券信息', coupons);

        var good = service.lodash.find(service.SysData.product, function (o) {
          return o.code == coupons.product_code;
        });

        if (!good) {
          emptyProduct.push(coupons);
        }
      };

      for (var i in params.coupons) {
        _loop(i);
      }

      if (emptyProduct.length) {
        var msg = emptyProduct.map(function (_o) {
          return _o.payment_name;
        }).join(',');
        return {
          code: 'PRODUCT_NON_EXISTENT',
          description: msg + ' 卡券商品不存在',
          status_code: 1,
          data: emptyProduct
        };
      }

      orderData._heavy || (orderData._heavy = {});
      orderData._heavy.coupon || (orderData._heavy.coupon = {
        sequenceId: 0,
        data: {}
      });
      var sid = orderData._heavy.coupon.sequenceId;

      for (var _i in params.coupons) {
        if (!params.coupons[_i].sequence_id) {
          sid++;
          params.coupons[_i].sequence_id = sid;
          var _coupons = params.coupons[_i];
          orderData._heavy.coupon.data[sid] = {
            req: _coupons
          };
        }
      }

      orderData._heavy.coupon.sequenceId = sid; //console.log('卡券支付参数', params);

      return {
        status_code: 0,
        data: params
      };
    }
    /**
     * 提前非产品核销
     * @param order
     * @returns {Promise.<{}>}
     */

  }, {
    key: "prepay",
    value: function prepay(client, order, SysData) {
      var orderData = order.GetOrderData(); // console.log('检查提前核销&&&&&&&&&&&&&&&', orderData);
      //let coupon = orderData._heavy.promotionObj.coupon;

      var payCoupon = [];
      console.log('coupon_orderData:', orderData, client);
      orderData._heavy || (orderData._heavy = {});
      orderData._heavy.coupon || (orderData._heavy.coupon = {
        sequenceId: 0,
        data: {}
      });
      var sid = orderData._heavy.coupon.sequenceId;

      for (var cp in orderData.promotion.result) {
        var _obj = orderData.promotion.result[cp];

        if (_obj._extend && _obj._extend.coupon) {
          var coupon = _obj._extend.coupon;

          for (var i in coupon) {
            var id = coupon[i];
            var o = orderData._heavy.promotionObj.coupon[id];

            if (o._extend && o._extend.prepay && !o._extend.isPay) {
              o._extend.index = cp; //todo

              var p = o._param._extend;

              if (!p.sequence_id) {
                sid++;
                p.sequence_id = sid; //console.log('支付参数*********', p);

                payCoupon.push(p);
              }
            }
          }
        }
      }

      orderData._heavy.coupon.sequenceId = sid;
      console.log('pay coupon:', payCoupon);

      if (payCoupon.length) {
        console.log('pay coupon:', payCoupon);

        var params = this._getHeaderParam(orderData, SysData);

        console.log('头部参数', params);
        params.coupons = payCoupon; //会员卡券

        var m = {};

        for (var _i2 in params.coupons) {
          var c = params.coupons[_i2];

          if (c.extend && c.extend.card_no) {
            m[c.extend.card_no + '_' + c.payment_config_code] = {
              cooperation_code: c.payment_config_code,
              card_no: c.extend.card_no
            };
          }
        }

        for (var _i3 in m) {
          params.member.push(m[_i3]);
        }

        console.log('提前核销的数据', params);
        return PayProCoupon(params).then(function (ret) {
          console.log('提前核销结果》》》', ret);

          if (ret.status_code !== 0) {
            return Promise.reject(ret);
          }

          var final_payments = ret.payload.final_payments;

          for (var _i4 in final_payments) {
            var _o2 = final_payments[_i4];

            if (_o2.pay_status == 'PAID') {
              //console.log('核销的卡券', orderData._heavy.promotionObj.coupon, o)
              var index = orderData._heavy.promotionObj.coupon[_o2.external_code]._extend.index; //console.log('索引', index);

              orderData.promotion.result[index]._extend.isPay = true;
              orderData._heavy.promotionObj.coupon[_o2.external_code]._extend.isPay = true;
              orderData._heavy.promotionObj.coupon[_o2.external_code]._param._extend.sequence_id = _o2.sequence_id;
            }
          }

          return order.Save(client).then(function (r) {
            //console.log('提前核销后的订单', orderData)
            ret.data = ret.payload;
            delete ret.payload;
            return ret;
          });
        })["catch"](function (e) {
          console.log('核销异常！！！！', e);
          return e; //e.status_code == 1 ? e : SysError.InteraceError;
        });
      }

      return Promise.resolve({});
    }
    /**
     * 卡券支付核销
     * @param order
     * @param SysData
     * @param clientData
     * @returns {*}
     */

  }, {
    key: "pay",
    value: function () {
      var _pay = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee(order, SysData, clientData) {
        var orderData, payCouponData, couponSuccess, params, _m, productCoupon, lines, i, o, _p, coupon, sid, _i5, _c, _ext, k, id, _o3, _pa, tianmao, tianmaoCoupon, _i6, _o4, c, _membersData, _membersObj, _i7, _o5, _i8, _o6, _i9, _o7, prepayCoupons;

        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // console.log('卡券支付!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
                orderData = order.GetOrderData();
                payCouponData = {
                  product: [],
                  coupon: []
                };
                couponSuccess = []; //已经核销成功的卡券

                params = this._getHeaderParam(orderData, SysData[clientData.store_id]);
                _m = {}; //检查看有没有没核销的产品卡券

                productCoupon = []; //还没核销的产品卡券

                lines = orderData.orderLine;

                for (i in lines) {
                  o = lines[i];

                  if (o.sequence_id) {
                    payCouponData.product.push(o.external_code); //console.log('产品卡券））））', orderData._heavy.promotionObj.product[o.external_code])

                    if (o.isPay) {
                      couponSuccess.push(o.external_code);
                    } else {
                      _p = _objectSpread$3({}, orderData._heavy.promotionObj.product[o.external_code]); //console.log('需要核销的产品卡券', _p);

                      if (_p.extend && _p.extend && _p.extend.card_no) {
                        //console.log('会员卡号', _p.extend.card_no)
                        //params.coupons.push({..._p})
                        _m[_p.extend.card_no + '_' + _p.payment_config_code] = {
                          cooperation_code: _p.payment_config_code,
                          card_no: _p.extend.card_no
                        };
                      }

                      params.coupons.push(_objectSpread$3({}, _p)); //todo

                      productCoupon.push(_objectSpread$3({}, _p));
                    }
                  }
                } //检查需要核销的卡券


                coupon = []; //还没核销的非产品卡券

                orderData._heavy || (orderData._heavy = {});
                orderData._heavy.coupon || (orderData._heavy.coupon = {
                  sequenceId: 0,
                  data: {}
                });
                sid = orderData._heavy.coupon.sequenceId;

                for (_i5 in orderData.promotion.result) {
                  _c = orderData.promotion.result[_i5];
                  _ext = _c._extend || {};

                  if (_ext.success && _ext.coupon) {
                    for (k in _ext.coupon) {
                      id = _ext.coupon[k];
                      payCouponData.coupon.push(id);
                      _o3 = orderData._heavy.promotionObj.coupon[id]; //console.log('卡券核销，，', o);

                      if (_o3._extend.isPay) {
                        couponSuccess.push(id);
                      } else {
                        sid++;
                        _pa = _o3._param._extend;
                        _pa.sequence_id = sid;
                        params.coupons.push(_pa);
                        coupon.push(_pa);

                        if (_pa.extend && _pa.extend.card_no) {
                          _m[_pa.extend.card_no + '_' + _pa.payment_config_code] = {
                            cooperation_code: _pa.payment_config_code,
                            card_no: _pa.extend.card_no
                          };
                        }
                      } //console.log('需要核销的卡券', o)

                    }
                  }
                } //天猫卡券


                tianmao = orderData.tianmao || [];
                tianmaoCoupon = [];

                for (_i6 in tianmao) {
                  _o4 = tianmao[_i6];
                  sid++;
                  c = {
                    "type": "NORMAL",
                    "sequence_id": sid,
                    "payment_config_code": _o4.payment_config_code,
                    "external_code": _o4.external_code,
                    "is_online": true,
                    "amount": "0",
                    "extend": {
                      "pay_times": _o4.qty
                    }
                  };
                  tianmaoCoupon.push(c);
                  orderData.isOnline = true;
                  orderData.tianmao[_i6]._coupons = c;
                }

                params.coupons = [].concat(service.toConsumableArray(params.coupons), tianmaoCoupon);
                orderData._heavy.coupon.sequenceId = sid; //过滤需要预支付的卡券项
                /// return Promise.resolve({payCouponData:payCouponData})
                //会员拼code

                _membersData = orderData._heavy && orderData._heavy.members || [];
                _membersObj = {};

                for (_i7 in _membersData) {
                  _o5 = _membersData[_i7];
                  _membersObj[_o5.card_no] = _o5;
                }

                for (_i8 in _m) {
                  _o6 = _m[_i8];

                  if (_membersObj[_o6.card_no]) {
                    _o6.code || (_o6.code = _membersObj[_o6.card_no].code);
                  }

                  params.member.push(_o6);
                } // console.log('卡券的结果检查》》', params, couponSuccess, productCoupon, coupon,tianmaoCoupon);


                if (!params.coupons.length) {
                  _context.next = 29;
                  break;
                }

                //console.log('需要核销卡券', params);
                // todo 后期优化处理
                for (_i9 in params.coupons) {
                  _o7 = _objectSpread$3({}, params.coupons[_i9]); //console.log('大飞！!!!!!!!!!!!!!', o)

                  if (_o7.member) {
                    params.member.push(_o7.member);
                    delete _o7.member;
                  }
                }

                console.log('提交给prepay接口参数', params); //过滤不需要预核销的卡券

                prepayCoupons = service.lodash.filter(params.coupons, function (item) {
                  return item.prepay;
                });

                if (prepayCoupons.length) {
                  _context.next = 28;
                  break;
                }

                return _context.abrupt("return", Promise.resolve({
                  payCouponData: payCouponData
                }));

              case 28:
                return _context.abrupt("return", PayProCoupon(_objectSpread$3(_objectSpread$3({}, params), {}, {
                  coupons: prepayCoupons
                })).then(function (ret) {
                  //console.log('prepay返回', ret);
                  if (ret.status_code !== 0) {
                    return Promise.reject(ret);
                  }

                  ret.data = ret.payload;
                  delete ret.payload;
                  return ret;
                }) //检查核销是否完全成功
                .then(function (res) {
                  var final_payments = res.data.final_payments || [];
                  var paySuccess = [];
                  var payFail = [];

                  for (var _i10 in final_payments) {
                    var _o8 = final_payments[_i10];

                    if (_o8.pay_status == "PAID") {
                      //console.log('成功的卡券', orderData._heavy.promotionObj.coupon[o.external_code]);
                      for (var _i11 in orderData.orderLine) {
                        if (orderData.orderLine[_i11].sequence_id == _o8.sequence_id) {
                          orderData.orderLine[_i11].isPay = true;
                          break;
                        }
                      }

                      orderData._heavy.promotionObj.coupon[_o8.external_code] && orderData._heavy.promotionObj.coupon[_o8.external_code]._extend && (orderData._heavy.promotionObj.coupon[_o8.external_code]._extend.isPay = true);
                      paySuccess.push(_o8);
                    } else {
                      delete orderData._heavy.promotionObj.coupon[_o8.external_code];
                      delete orderData._heavy.promotionObj.product[_o8.external_code]; //检查删除商品卡券

                      var orderLine = [];

                      for (var _i12 in orderData.orderLine) {
                        var p = orderData.orderLine[_i12];

                        if (p.sequence_id != _o8.sequence_id) {
                          orderLine.push(p);
                        }
                      }

                      orderData.orderLine = orderLine;
                      orderData.Calculator();
                      payFail.push(_o8);
                    }
                  }

                  if (payFail.length) {
                    return {
                      res: res,
                      payFail: payFail,
                      paySuccess: paySuccess
                    };
                  }

                  res.payCouponData = payCouponData;
                  return res;
                }) //如果核销卡券有异常需要处理
                .then(function (res) {
                  var payFail = res.payFail,
                      paySuccess = res.paySuccess;

                  if (payFail) {
                    //console.log('核销异常，需要处理', payFail, paySuccess, couponSuccess, coupon)
                    var _params = [];
                    var _coupon = {};
                    var errInfo = [];

                    for (var _i13 in coupon) {
                      var _o9 = coupon[_i13];
                      _coupon[_o9.external_code] = _o9;
                    } //删除失败的卡券


                    for (var _i14 in payFail) {
                      var _o10 = payFail[_i14];
                      errInfo.push(_o10.external_code + _o10.message);
                      delete _coupon[_o10.external_code];
                    } //促销参数


                    for (var _i15 in orderData._heavy.promotionObj.promotionParam.discs) {
                      var _o11 = orderData._heavy.promotionObj.promotionParam.discs[_i15];

                      if (_o11.coupon) {
                        if (_coupon[_o11.coupon] && orderData._heavy.promotionObj.coupon[_o11.coupon] && orderData._heavy.promotionObj.coupon[_o11.coupon]._extend && orderData._heavy.promotionObj.coupon[_o11.coupon]._extend.isPay) {
                          _params.push(_o11);
                        }
                      } else {
                        _params.push(_o11);
                      }
                    } //console.log('需要重新计算促销引擎》》》》》》》》》》', params, orderData._heavy.promotionObj.promotionParam);


                    service.Store.Order(clientData).ResetPayment(); //重置支付

                    return pay2promotion.Promotion.Execute({}, {
                      order: order
                    }, {
                      discs: _params
                    }, true).then(function (res) {
                      // console.log('重新促销引擎结果！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！')
                      //console.log(res);
                      return Promise.reject({
                        status_code: 1,
                        description: errInfo.join(',') + ',卡券已重新计算,商品价格已经改动',
                        code: 'ERR_PREPAY_COUPON',
                        data: order.GetOrderData(true)
                      });
                    }); //非卡券

                    /*let pobj = orderData._heavy.promotionObj;
                     for (let i in orderData.promotion.result) {
                     let o = orderData.promotion.result[i];
                     if (!o.coupon && o._extend.success) {
                     params.push(pobj.other[o.promotion_id]._param)
                     }
                     }*/
                  }

                  res.params = params;
                  return res;
                })["catch"](function (e) {
                  console.log('核销异常！！！！', e);
                  return e.status_code == 1 ? e : {
                    status_code: 1,
                    code: "API_ERR",
                    description: "核销异常",
                    data: e
                  };
                }));

              case 29:
                return _context.abrupt("return", Promise.resolve({
                  data: !!couponSuccess.length,
                  payCouponData: payCouponData
                }));

              case 30:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function pay(_x, _x2, _x3) {
        return _pay.apply(this, arguments);
      }

      return pay;
    }()
  }]);

  return _class;
}())();

var Functions = new ( /*#__PURE__*/function () {
  function _class() {
    service.classCallCheck(this, _class);
  }

  service.createClass(_class, [{
    key: "upMemberInfo",
    //更新会员信息
    value: function upMemberInfo(orderData, payments) {
      return new Promise(function (resolve) {
        var members = orderData._heavy.members;

        if (!members.length) {
          resolve();
          return;
        }

        var memberObj = {};

        for (var index in members) {
          var o = members[index];
          memberObj[o.card_no] = {
            index: index
          };
        }

        var upMember = [];

        var _loop = function _loop(i) {
          var o = payments[i];
          var member = memberObj[o.external_code];

          if (member) {
            upMember.push(GetMemberInfoByCard(o.external_code, service.SysData).then(function (res) {
              if (res.status_code === 0) {
                //console.log(member.index, '成功更新会员：', res)
                orderData._heavy.members[member.index] = res.payload;
                o.trans_score && (orderData._heavy.members[member.index].trans_score = o.trans_score);
              } else {
                console.log('更新会员访问接口异常', res);
              }

              return res;
            })["catch"](function (err) {
              console.log('更新接口异常', err);
              return err;
            }));
          }
        };

        for (var i in payments) {
          _loop(i);
        }

        Promise.all(upMember).then(function (res) {
          resolve();
        })["catch"](function (err) {
          resolve();
        });
      });
    }
  }]);

  return _class;
}())();

/**
 * Created by laomao on 2018/5/11.
 */
var RegEx = (function (data) {
  var regexConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var _data = {};
  /*regexConfig = [
   {
   action: "match",                      //action
   pattern: "([\\d]*)([^\\d])(.*)",    //正则字符串
   attributes: "",                      //修饰符
   key: "coupon_no",                    //对哪个数据的key使用正则
   type: "array",                       //正则返回值的类型
   //正则最终结果的字段处理
   values: {
   coupon_no: [1],
   track2_data: [1, 2, 3]
   },
   }
   ];*/

  for (var i in regexConfig) {
    var c = regexConfig[i];

    if (data[c.key]) {
      var re = new RegExp(c.pattern);
      var arr = data[c.key][c.action](re);

      if (arr) {
        for (var j in c.values) {
          var o = c.values[j];
          var value = "";

          if (c.type == 'array') {
            for (var k in o) {
              value += arr[o[k]];
            }
          } else {
            value = arr;
          }

          _data[j] = value;
        }
      } //console.log('结果', arr)

    }
  }

  return _data;
});

function assert(condition, error) {
  if (!condition) throw error;
}
function not(condition, error) {
  if (condition) throw error;
}

/*
 * @Author: zhiqiang Yang
 * @Date: 2020-07-21 17:28:40
 * @FilePath: /hipos-ui/core/service/modules/payment/error.js
 * @Description: 
 */
var PAY_PARAMETER_ERR = {
  status_code: 1,
  code: 'PAY_PARAMETER_ERR',
  description: '支付参数不正确',
  i18n: 'incorrectPaymentParameters'
};
var PAY_KEYBOARD_ERR = {
  status_code: 1,
  code: 'PAY_KEYBOARD_ERR',
  description: '支付键盘不存在或配置不正确',
  i18n: 'paymentKeyboardNotExistOrConfiguredIncorrectly'
};
var PAY_ERR_AMOUNT = {
  status_code: 1,
  code: "ERR_AMOUNT",
  description: "支付失败，键盘配置错误，找零和溢收冲突不可以同时存在，请修改后台配置",
  i18n: 'paymentFailedPleaseModifyBackgroundConfig'
};
var PAY_AMOUNT_NEGATIVE = {
  status_code: 1,
  code: 'PAY_AMOUNT_NEGATIVE',
  description: '支付金额不可以小于0',
  i18n: 'paymentAmountCannotBeLessThanZero'
};
var PAY_INFO_ERR = {
  status_code: 1,
  code: 'PAY_INFO_ERR',
  description: '获取支付信息失败',
  i18n: 'faildObtainPaymentInformation'
};
var ERR_PAYMENT_AMBIGUOUS = {
  status_code: 1,
  code: 'ERR_PAYMENT_QUERY',
  description: '前一次支付结果尚未明确，请先查询订单支付状态，当前支付无效',
  i18n: 'previousPaymentNotClearTheCurrentInvalidPleaseCheck'
};
var ERR_CURR_PAYMENT_AMBIGUOUS = {
  status_code: 1,
  code: 'ERR_PAYMENT_QUERY',
  description: '支付结果不明确，请查询支付',
  i18n: 'paymentResultNotClearPleaseCheck'
};
var ERR_CURR_PAYMENT_TIMEOUT = {
  status_code: 1,
  code: 'ERR_PAYMENT_QUERY',
  description: '支付超时，请重查',
  i18n: 'paymentOverTimePleaseCheck'
};
var ERR_CURR_PAYMENT_CANCELLED = {
  status_code: 1,
  code: 'ERR_PAYMENT_QUERY',
  description: '订单已取消，请查询支付',
  i18n: 'orderCancelledPleaseCheck'
};
var ERR_CURR_PAYMENT_REFUNDED = {
  status_code: 1,
  code: 'ERR_PAYMENT_QUERY',
  description: '订单已退款，请查询支付',
  i18n: 'orderRefundedPleaseCheck'
};
var ERR_CURR_PAYMENT_COUPON_FAILED = {
  status_code: 1,
  code: 'ERR_PAYMENT_QUERY',
  description: '卡券核销失败',
  i18n: 'verificationCouponFailed'
};

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$4(Object(source), true).forEach(function (key) { service.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Created by laomao on 2018/1/31.
 */
var debug$2 = require('debug')('hex:hiposNewAge:module:paymentNews'); //import { SysData } from '../../inc/Store';
var GetPayLogDb = service.DbProxy.GetPayLogDb,
    GetPaymentDb = service.DbProxy.GetPaymentDb;
//
//支付优惠计算

var payPromotion = /*#__PURE__*/function () {
  var _ref = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee(o, orderData, clientData) {
    var _o$promotion;

    var data, discount2payment, pdata, i, op;
    return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(!((_o$promotion = o.promotion) === null || _o$promotion === void 0 ? void 0 : _o$promotion.length) || !service.lodash.isArray(o.promotion))) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return");

          case 2:
            data = o.promotion || [];
            discount2payment = [];
            pdata = [];

            for (i in data) {
              op = data[i];

              if (!service.SysData[clientData.store_id].paymentDiscountTrans[op.id]) {
                pdata.push(op);
                orderData.resultNetAmount = service.decimal.sub(orderData.resultNetAmount, op.amount || 0).toDecimalPlaces(2, 4).toNumber();
                orderData.resultDiscountAmount = service.decimal.add(orderData.resultDiscountAmount, op.amount || 0).toDecimalPlaces(2, 4).toNumber();
                o.promotion[i].discount = o.promotion[i].discount || o.promotion[i].amount;
                o.promotion[i].promotion_code = o.promotion[i].code || o.promotion[i].promotion_code;
                o.promotion[i].promotion_id = o.promotion[i].id || o.promotion[i].promotion_id;
                o.promotion[i].discount_type = "discount";
                o.result_net_amount = service.decimal.sub(o.result_net_amount, op.amount || 0).toDecimalPlaces(2, 4).toNumber();
              } else {
                //orderData.discount2paymentAmount = Decimal.add(orderData.discount2paymentAmount, op.amount || 0).toDecimalPlaces(2, 4).toNumber()
                discount2payment.push(op);
              }
            }

            if (!!discount2payment.length) {
              orderData.discount2payment[o.sequence_id] = discount2payment;
            }

            orderData.promotion.pay || (orderData.promotion.pay = []);
            orderData.promotion.pay = [].concat(service.toConsumableArray(orderData.promotion.pay), pdata);

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function payPromotion(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

function transformerAmount2Yuan(amount) {
  return new service.decimal(amount).div(100).toDecimalPlaces(2, 4).toNumber();
}

var indexPayment = /*#__PURE__*/function () {
  function indexPayment() {
    var _this = this;

    service.classCallCheck(this, indexPayment);

    this.waitingData = {};
    this.restQueryData = {};
    service.NatsDriver.instance().subscribe('payment.status.*', function (json, reply) {
      try {
        var data = JSON.parse(json);
        var c = _this.waitingData[data.ticket_id];

        if (!c) {
          return;
        }

        var res = c.res,
            order = c.order,
            resolve = c.resolve,
            timeout = c.timeout;
        delete _this.waitingData[data.ticket_id];
        clearTimeout(timeout);
        var restQuery = _this.restQueryData[data.ticket_id];
        clearTimeout(restQuery);
        resolve({
          data: data,
          status_code: 0
        });
      } catch (err) {}
    });
  } //Payments返回项格式（离线用到）


  service.createClass(indexPayment, [{
    key: "_resultPaymentsItemSchema",
    value: function _resultPaymentsItemSchema(item) {
      console.log('_resultPaymentsItemSchema:', item);
      var data = item.request;
      var response = {
        id: data.id || 0,
        payment_id: data._id || 0,
        sequence_id: data.sequence_id || 0,
        amount: data.amount || 0,
        result_amount: service.decimal.sub(data.pay_amount, data.change).toDecimalPlaces(2, 4).toNumber(),
        result_net_amount: data.result_net_amount,
        receivable: data.receivable,
        //应收
        pay_status: "PAID",
        payment_name: data.payment_name || "",
        is_coupon: data.is_online || data.is_coupon || false,
        external_code: data.external_code || "",
        message: data.message || "",
        payment_category: data.payment_category || "",
        payment_channel: data.payment_channel || null,
        payment_config_code: data.payment_config_code || "",
        payment_config_type: data.payment_config_type || null,
        promotion: data.promotion || null,
        type: data.type || null,
        updated: data.updated || service.moment().format('YYYY-MM-DD HH:mm:ss')
      };

      if (typeof response.result_net_amount == 'undefined') {
        response.result_net_amount = data.amount || 0;
      }

      item.pay_status = "PAID";
      item.end_time = new Date().getTime();
      item.response = response;
      return item;
    }
    /**
     * 订单商品行
     * @param {*} orderData 
     */

  }, {
    key: "_setProducts",
    value: function _setProducts(orderData) {
      var products = []; //所有的加料

      for (var i in orderData.orderLine) {
        var o = orderData.orderLine[i];
        var item = {
          product_id: o.productId,
          amount: service.decimal(o.groessAmount).toDecimalPlaces(2, 4).toNumber(),
          quantity: o.qty,
          product_code: o.code,
          product_name: o.name
        };
        products.push(item);
        var toppingData = o.topping || [];

        for (var j in toppingData) {
          var o2 = toppingData[j];
          var item2 = {
            product_id: o2.productId,
            amount: service.decimal(o2.groessAmount).toDecimalPlaces(2, 4).toNumber(),
            quantity: o2.qty,
            product_code: o2.code,
            product_name: o2.name
          };
          products.push(item2);
        }
      }

      return products;
    }
    /**
     * 支付项
     * @param {
        //keyData                   键盘数据
        //data                      ui提交上来的支付信息
        //totalPaidAmount           已经支付完成的总金额
        //totalAmount               订单总金额（需要支付的金额）
        //sequence_id               sequence_id
       } param0 
     */

  }, {
    key: "_setPayments",
    value: function () {
      var _setPayments2 = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee2(_ref2) {
        var _payChangeMapper$keyD;

        var clientData, keyData, data, totalPaidAmount, totalAmount, rounding, finalPayments, restAmount, payChangeMapper, tailAmount, amount, change, overflow, promotionPay, total_rounding, overflowed, sequence_id;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                clientData = _ref2.clientData, keyData = _ref2.keyData, data = _ref2.data, totalPaidAmount = _ref2.totalPaidAmount, totalAmount = _ref2.totalAmount, rounding = _ref2.rounding;
                finalPayments = [];
                restAmount = new service.decimal(totalAmount).sub(new service.decimal(totalPaidAmount)).sub(new service.decimal(rounding)).toNumber();
                payChangeMapper = {
                  "JIAO": 10,
                  "FEN": 1
                };
                tailAmount = parseInt(restAmount % ((_payChangeMapper$keyD = payChangeMapper[keyData.pay_change_type]) !== null && _payChangeMapper$keyD !== void 0 ? _payChangeMapper$keyD : 1)); // 支付到角时 所需要甩尾的钱

                amount = new service.decimal(data.value).mul(new service.decimal(100)).toNumber(); //当前支付的金额

                change = 0; //找零金额

                overflow = 0; //溢收金额

                promotionPay = null; //现金甩尾折扣

                total_rounding = 0; // biz_code为"COUPONMONEY"的代金券支付金额那券的amount

                if (keyData && keyData.biz_code && keyData.biz_code == "COUPONMONEY") {
                  amount = parseInt(keyData.amount * 100);
                } //现金甩尾把分甩掉
                // 最后一笔现金支付要把尾甩掉


                if (!keyData.is_online_pay && !keyData.allow_overflow && new service.decimal(amount).add(new service.decimal(tailAmount)).toNumber() >= restAmount) {
                  total_rounding = tailAmount;
                  amount = service.decimal.add(amount, tailAmount).toNumber();
                } //支付超出总金额


                if (!(amount > restAmount)) {
                  _context2.next = 24;
                  break;
                }

                overflowed = service.decimal.sub(amount, restAmount).toNumber();
                amount = service.decimal.sub(amount, overflowed).toDecimalPlaces(2, 4).toNumber(); //检查溢收或找零

                if (!keyData.allow_change) {
                  _context2.next = 19;
                  break;
                }

                change = overflowed;
                _context2.next = 24;
                break;

              case 19:
                if (!keyData.allow_overflow) {
                  _context2.next = 23;
                  break;
                }

                overflow = overflowed;
                _context2.next = 24;
                break;

              case 23:
                return _context2.abrupt("return", Promise.reject({
                  status_code: 1,
                  code: 'PAY_AMOUNT_OVERFLOW',
                  description: "\u652F\u4ED8\u7684\u603B\u91D1\u989D\u8D85\u51FA\u8BA2\u5355\u7684\u603B\u91D1\u989D ".concat((overflowed / 100).toFixed(2), " \u5143"),
                  i18n: 'totalAmountOverFlow',
                  i18nValue: (overflowed / 100).toFixed(2)
                }));

              case 24:
                _context2.next = 26;
                return this._getSequenceId();

              case 26:
                sequence_id = _context2.sent;
                finalPayments.push({
                  sequence_id: sequence_id,
                  payment_config_code: keyData.cooperation_code || "",
                  external_code: keyData.biz_code == "SHANDE" ? keyData.biz_code : data.external_code || "",
                  //
                  is_online: keyData.is_online_pay || false,
                  payment_name: keyData.name,
                  receivable: service.decimal.sub(amount, total_rounding).toNumber(),
                  //应收金额： amount - rounding  + overflow
                  pay_amount: new service.decimal(data.value).mul(new service.decimal(100)).toNumber(),
                  amount: amount,
                  change: change,
                  //找零
                  overflow: overflow,
                  //溢收
                  rounding: new service.decimal(total_rounding).toNumber(),
                  extend: _objectSpread$4({
                    //其他各种接口自定义的json内容，比如支付方式的秘密之类
                    trans_code: keyData.code || ""
                  }, data.extend),
                  _id: keyData.id //支付id(线下给小票用)

                });
                return _context2.abrupt("return", Promise.resolve({
                  finalPayments: finalPayments,
                  sequence_id: sequence_id,
                  promotionPay: promotionPay
                }));

              case 29:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _setPayments(_x4) {
        return _setPayments2.apply(this, arguments);
      }

      return _setPayments;
    }()
  }, {
    key: "couponVerification",
    value: function couponVerification(clientData, order) {
      var _this2 = this;

      var orderData = order.GetOrderData();
      assert(orderData.ticketId && orderData.paymentsId, PAY_PARAMETER_ERR);
      var payData = this.formatPaySchemaData(orderData, service.SysData[clientData.store_id], {});
      return pay(payData).then(function (res) {
        if (res.status_code !== 0) {
          return Promise.reject(res);
        } //支付等待


        if (res.payload.status == "WAITING") {
          return new Promise(function (resolve, reject) {
            var orderData = order.GetOrderData();
            var timeout;
            var intervelTime = service.SysData[clientData.store_id].isAlive ? 5000 : 2000;

            var queryFunc = function queryFunc(ticket_id, t) {
              var timeId = setTimeout(function () {
                query({
                  ticket_id: ticket_id
                }).then(function (res) {
                  // let  inProcess = _.some(res.payload.payments,item=>item.pay_status === 'WAITING')
                  if (!res || res.status_code == 1) {
                    res.status_code = 1;
                    return Promise.reject(res);
                  }

                  res.data = res.payload;
                  delete res.payload;
                  clearTimeout(timeout);
                  delete _this2.waitingData[orderData.paymentsId]; // delete this.restQueryData[orderData.paymentsId]

                  clearTimeout(_this2.restQueryData[orderData.paymentsId]);

                  if (res.data.payments.length) {
                    res.data.final_payments = res.data.payments;
                  }

                  resolve(res);
                })["catch"](function (e) {
                  // let restQuery = this.restQueryData[orderData.paymentsId];
                  clearTimeout(_this2.restQueryData[orderData.paymentsId]);
                  queryFunc(orderData.paymentsId, intervelTime);
                });
              }, t); // 存储延时id

              _this2.restQueryData[orderData.paymentsId] = timeId;
              return timeId;
            };

            queryFunc(orderData.paymentsId, intervelTime);
            timeout = setTimeout(function () {
              delete _this2.waitingData[orderData.paymentsId];
              var restQuery = _this2.restQueryData[orderData.paymentsId];
              clearTimeout(restQuery); // delete this.restQueryData[orderData.paymentsId]

              reject({
                status_code: 1,
                code: "ERR_PAYMENT_QUERY",
                description: "支付超时，请重查",
                i18n: 'paymentOverTimePleaseCheck'
              }); //Promise.reject({ status_code: 1, code: "PAY_TIMEOUT", description: "支付超时，请重查" })
            }, 50000);
            _this2.waitingData[orderData.paymentsId] = {
              timeout: timeout,
              resolve: resolve,
              reject: reject,
              res: res,
              order: order,
              mthis: _this2
            };
          }).then(function (result) {
            return Promise.resolve(result);
          });
        }

        return Promise.resolve(res);
      })["catch"](function (err) {
        return Promise.reject({
          status_code: 1,
          err: 'err',
          description: "系统超时",
          i18n: 'sysetemTimeout'
        });
      });
    }
    /**
     * 这个方法是处理卡券预支付和 组装会员的 实际支付 @see pay2
     * @param {订单信息} order 
     * @param {支付数据} data 
     * @param {客户端数据} clientData 
     */

  }, {
    key: "pay",
    value: function () {
      var _pay = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee3(order) {
        var data,
            clientData,
            orderData,
            _args3 = arguments;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                data = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};
                clientData = _args3.length > 2 ? _args3[2] : undefined;
                orderData = order.GetOrderData();

                if (orderData.isPay) {
                  _context3.next = 5;
                  break;
                }

                return _context3.abrupt("return", this.pay2(order, data, clientData));

              case 5:
                return _context3.abrupt("return", this.pay2(order, data, clientData));

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function pay(_x5) {
        return _pay.apply(this, arguments);
      }

      return pay;
    }()
  }, {
    key: "_getSequenceId",
    value: function () {
      var _getSequenceId2 = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee4() {
        var res, json;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return fetch("http://".concat(globalThis.domain, ":").concat(globalThis.httpPort, "/uuid"), {
                  headers: {
                    'user-agent': 'Mozilla/4.0 MDN Example',
                    'content-type': 'application/json'
                  }
                });

              case 2:
                res = _context4.sent;
                _context4.next = 5;
                return res.json();

              case 5:
                json = _context4.sent;
                return _context4.abrupt("return", String(json.data.id));

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function _getSequenceId() {
        return _getSequenceId2.apply(this, arguments);
      }

      return _getSequenceId;
    }()
    /**
     * 真正处理支付接口
     * @param {*} order 
     * @param {*} data 
     */

  }, {
    key: "pay2",
    value: function () {
      var _pay2 = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee7(order) {
        var _keyData$config,
            _payData$member,
            _payData$coupons,
            _this3 = this;

        var data,
            clientData,
            orderData,
            keyObj,
            keyData,
            reData,
            payData,
            payItemsDb,
            payItems,
            totalPaidAmount,
            _yield$this$_setPayme,
            finalPayments,
            promotionPay,
            newPayments,
            submitPayments,
            _ret,
            result,
            _args8 = arguments;

        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee7$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                data = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};
                clientData = _args8.length > 2 ? _args8[2] : undefined;
                orderData = order.GetOrderData();
                assert(orderData.ticketId && orderData.paymentsId && data.paymentKeyboardId, PAY_PARAMETER_ERR);
                keyObj = service.SysData[clientData.store_id].keyboardPayment[data.paymentKeyboardId];
                assert(keyObj && keyObj.payment, PAY_KEYBOARD_ERR);
                assert(!(keyObj.payment.allow_change && keyObj.payment.allow_overflow), PAY_ERR_AMOUNT);
                keyData = keyObj.payment; //需要不需要走正则拆参数什么的

                if ((_keyData$config = keyData.config) === null || _keyData$config === void 0 ? void 0 : _keyData$config.regex) {
                  data.external_code = data.external_code.replace(/\?/ig, "");
                  data.external_code = data.external_code.replace(/;/ig, "");
                  reData = RegEx(data, keyData.config.regex);
                  data = _objectSpread$4(_objectSpread$4({}, data), reData);
                }

                data.value = service.decimal(data.value || 0).toDecimalPlaces(2, 4).toNumber();
                not(data.value <= 0 && (keyData === null || keyData === void 0 ? void 0 : keyData.is_online_pay), PAY_AMOUNT_NEGATIVE);
                order.SetStatus('WAITING');

                if (keyData.is_online_pay || orderData.members > 0) {
                  orderData.isOnline = true;
                }

                _context8.next = 15;
                return this.fetchPayParams(clientData, orderData, keyData, data, service.SysData[clientData.store_id]);

              case 15:
                payData = _context8.sent;
                orderData.isOnline = keyData.is_online_pay || orderData.isOnline || ((_payData$member = payData.member) === null || _payData$member === void 0 ? void 0 : _payData$member.length) || ((_payData$coupons = payData.coupons) === null || _payData$coupons === void 0 ? void 0 : _payData$coupons.length);
                orderData.isPay = true; // await order.Save(clientData)
                //获取所有的支付记录和

                _context8.next = 20;
                return GetPayLogDb(clientData.store_id).getPayByPaymentId(orderData.paymentsId);

              case 20:
                payItemsDb = _context8.sent;
                not(service.lodash.findLast(payItemsDb, function (o) {
                  return o.pay_status === 'init';
                }), ERR_PAYMENT_AMBIGUOUS);
                payItems = service.lodash.map(payItemsDb, function (o) {
                  return o.request;
                }); //已经支付过的金额

                totalPaidAmount = service.lodash.reduce(service.lodash.filter(payItemsDb, function (item) {
                  return item.pay_status === 'PAID';
                }), function (prev, next) {
                  return service.decimal.add(prev, next.response.amount).toDecimalPlaces(2, 4).toNumber();
                }, 0);
                _context8.next = 26;
                return this._setPayments({
                  clientData: clientData,
                  keyData: keyData,
                  data: data,
                  totalPaidAmount: totalPaidAmount,
                  totalAmount: payData.pay_amount,
                  rounding: orderData.rounding // 现金甩尾

                });

              case 26:
                _yield$this$_setPayme = _context8.sent;
                finalPayments = _yield$this$_setPayme.finalPayments;
                promotionPay = _yield$this$_setPayme.promotionPay;

                if (!orderData.isOnline) {
                  _context8.next = 32;
                  break;
                }

                _context8.next = 32;
                return order.Save(clientData);

              case 32:
                newPayments = service.lodash.map(finalPayments, function (item) {
                  return _this3.formatPaymentLog(orderData, item);
                }); //保存log

                _context8.next = 35;
                return Promise.all(service.lodash.map(newPayments, function (item) {
                  return GetPayLogDb(clientData.store_id).save(item.id, item);
                }));

              case 35:
                payItemsDb = [].concat(service.toConsumableArray(payItemsDb), service.toConsumableArray(newPayments));
                submitPayments = service.lodash.map(finalPayments, function (item) {
                  return {
                    is_online: item.is_online,
                    payment_config_code: item.payment_config_code,
                    sequence_id: item.sequence_id,
                    external_code: item.external_code,
                    amount: item.amount,
                    payment_name: item.payment_name,
                    secret_content: item.extend
                  };
                });
                payData.payments = [].concat(service.toConsumableArray(payItems), service.toConsumableArray(submitPayments)); //杉德支付

                if (!("SHANDE" == keyData.biz_code)) {
                  _context8.next = 41;
                  break;
                }

                _context8.next = 41;
                return this._execSandPayment({
                  clientData: clientData,
                  orderData: orderData,
                  payItemsDb: payItemsDb,
                  data: data
                });

              case 41:
                if (!orderData.isOnline) {
                  _context8.next = 48;
                  break;
                }

                return _context8.delegateYield( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee6() {
                  var _res$data$final_payme;

                  var res, final_payments, dbData, _loop, i, ItemsDb, paymentResults;

                  return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee6$(_context7) {
                    while (1) {
                      switch (_context7.prev = _context7.next) {
                        case 0:
                          service.HexLog.single().info("\u5F00\u59CB\u5728\u7EBF\u652F\u4ED8 ticketId:\u3010".concat(orderData.paymentsId, "\u3011\u3010").concat(orderData.ticketId, "\u3011"));
                          _context7.next = 3;
                          return _this3._execOnlinePayment({
                            clientData: clientData,
                            payData: payData,
                            finalPayments: finalPayments,
                            order: order
                          });

                        case 3:
                          res = _context7.sent;
                          service.HexLog.single().info("\u5728\u7EBF\u652F\u4ED8\u8FD4\u56DE\u7ED3\u679Cticketid:\u3010\u3010".concat(orderData.paymentsId, "\u3011\u3011\u3010").concat(orderData.ticketId, "\u3011,res\uFF1A").concat(JSON.stringify(res)));
                          assert(res.status_code === 0, res);
                          assert((_res$data$final_payme = res.data.final_payments) === null || _res$data$final_payme === void 0 ? void 0 : _res$data$final_payme.length, ERR_CURR_PAYMENT_AMBIGUOUS);
                          final_payments = res.data.final_payments; //存到db里面的支付记录

                          _context7.next = 10;
                          return Promise.all(service.lodash.map(final_payments, /*#__PURE__*/function () {
                            var _ref3 = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee5(item) {
                              return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee5$(_context5) {
                                while (1) {
                                  switch (_context5.prev = _context5.next) {
                                    case 0:
                                      return _context5.abrupt("return", GetPayLogDb(clientData.store_id).getPayById("".concat(res.data.ticket_id, "_").concat(item.sequence_id)));

                                    case 1:
                                    case "end":
                                      return _context5.stop();
                                  }
                                }
                              }, _callee5);
                            }));

                            return function (_x7) {
                              return _ref3.apply(this, arguments);
                            };
                          }()));

                        case 10:
                          dbData = _context7.sent;
                          _loop = /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _loop(i) {
                            var o, response;
                            return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _loop$(_context6) {
                              while (1) {
                                switch (_context6.prev = _context6.next) {
                                  case 0:
                                    o = dbData[i];
                                    response = service.lodash.findLast(res.data.final_payments, function (item) {
                                      return "".concat(res.data.ticket_id, "_").concat(item.sequence_id) === o.id;
                                    });

                                    if (!(response && !o.response && response.pay_status !== 'WAITING')) {
                                      _context6.next = 9;
                                      break;
                                    }

                                    response.result_net_amount = response.amount;

                                    if (response.promotion && response.promotion.length && service.lodash.isArray(response.promotion)) {
                                      payPromotion(response, orderData, clientData);
                                    }

                                    o.response = response;
                                    o.pay_status = response.pay_status;
                                    _context6.next = 9;
                                    return GetPayLogDb(clientData.store_id).save(o.id, o);

                                  case 9:
                                  case "end":
                                    return _context6.stop();
                                }
                              }
                            }, _loop);
                          });
                          _context7.t0 = service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.keys(dbData);

                        case 13:
                          if ((_context7.t1 = _context7.t0()).done) {
                            _context7.next = 18;
                            break;
                          }

                          i = _context7.t1.value;
                          return _context7.delegateYield(_loop(i), "t2", 16);

                        case 16:
                          _context7.next = 13;
                          break;

                        case 18:
                          _context7.next = 20;
                          return GetPayLogDb(clientData.store_id).getPayByPaymentId(res.data.ticket_id);

                        case 20:
                          ItemsDb = _context7.sent;
                          paymentResults = service.lodash.compact(ItemsDb);
                          not(service.lodash.some(paymentResults, function (item) {
                            return item.pay_status === 'init';
                          }), ERR_PAYMENT_AMBIGUOUS);
                          _context7.next = 25;
                          return _this3._returnPayment({
                            clientData: clientData,
                            payData: payData,
                            payItemsDb: paymentResults,
                            finalPayments: res.data.final_payments,
                            order: order,
                            promotionPay: promotionPay
                          });

                        case 25:
                          _context7.t3 = _context7.sent;
                          return _context7.abrupt("return", {
                            v: _context7.t3
                          });

                        case 27:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  }, _callee6);
                })(), "t0", 43);

              case 43:
                _ret = _context8.t0;

                if (!(service._typeof_1(_ret) === "object")) {
                  _context8.next = 46;
                  break;
                }

                return _context8.abrupt("return", _ret.v);

              case 46:
                _context8.next = 54;
                break;

              case 48:
                console.log('开始线下支付');
                _context8.next = 51;
                return this._execOfflinePayment({
                  clientData: clientData,
                  payData: payData,
                  payItemsDb: payItemsDb,
                  finalPayments: finalPayments,
                  order: order,
                  promotionPay: promotionPay
                });

              case 51:
                result = _context8.sent;
                console.log('线下支付返回结果');
                return _context8.abrupt("return", result);

              case 54:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee7, this);
      }));

      function pay2(_x6) {
        return _pay2.apply(this, arguments);
      }

      return pay2;
    }()
    /**
     * 获取支付参数
     * @param {用户端信息} clientData 
     * @param {订单信息} orderData 
     * @param {键盘数据} keyData 
     * @param {支付的数据} data 
     * @param {主档数据} sysData 
     * @param {会员数据} memberData 
     * @param {支付的卡券} payCouponData 
     */

  }, {
    key: "fetchPayParams",
    value: function () {
      var _fetchPayParams = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee8(clientData, orderData, keyData, data, sysData) {
        var result, _result;

        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee8$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                if (orderData.isPay) {
                  _context9.next = 7;
                  break;
                }

                _context9.next = 3;
                return this.persistencePayParams(clientData, orderData, sysData, data);

              case 3:
                result = _context9.sent;
                return _context9.abrupt("return", result);

              case 7:
                _context9.next = 9;
                return GetPayLogDb(clientData.store_id).getPayById("".concat(orderData.ticketId, "_").concat(orderData.paymentsId));

              case 9:
                _result = _context9.sent;
                assert(_result, PAY_INFO_ERR);
                return _context9.abrupt("return", _result.paySchemaData);

              case 12:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee8, this);
      }));

      function fetchPayParams(_x8, _x9, _x10, _x11, _x12) {
        return _fetchPayParams.apply(this, arguments);
      }

      return fetchPayParams;
    }() //保存订单支付的参数

  }, {
    key: "persistencePayParams",
    value: function () {
      var _persistencePayParams = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee9(clientData, orderData, sysData, data) {
        var paySchemaData;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee9$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                paySchemaData = this.formatPaySchemaData(orderData, sysData, data);
                _context10.next = 3;
                return GetPayLogDb(clientData.store_id).save("".concat(orderData.ticketId, "_").concat(orderData.paymentsId), {
                  paySchemaData: paySchemaData,
                  start_time: new Date().getTime()
                });

              case 3:
                return _context10.abrupt("return", paySchemaData);

              case 4:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee9, this);
      }));

      function persistencePayParams(_x13, _x14, _x15, _x16) {
        return _persistencePayParams.apply(this, arguments);
      }

      return persistencePayParams;
    }()
  }, {
    key: "formatMember",
    value: function formatMember(orderData) {
      var _orderData$_heavy;

      var memberData = (_orderData$_heavy = orderData._heavy) === null || _orderData$_heavy === void 0 ? void 0 : _orderData$_heavy.members;

      if (memberData && memberData.length > 0) {
        var _memberData$ = memberData[0],
            card_no = _memberData$.card_no,
            member_id = _memberData$.member_id,
            member_code = _memberData$.member_code,
            mobile = _memberData$.mobile;
        var res = {};
        res[member_code] = {
          card_no: card_no,
          channel: '',
          member_id: member_id,
          member_code: member_code,
          mobile: mobile,
          secret_content: {}
        };
        return res;
      } else {
        return {};
      }
    } // formatCoupon(couponData, promotion) {
    //     let transformer = id => promotion.coupon[id]._param._extend
    //     let transCoupon = _.map(couponData.coupon, transformer)
    //     let productCoupon = _.map(couponData.product, transformer)
    //     let result = transCoupon.concat(productCoupon)
    //     return result
    // }

  }, {
    key: "formatCoupons",
    value: function formatCoupons(orderData) {
      var couponData = orderData.coupons || [];

      var coupons = service.lodash.map(couponData, function (item) {
        return {
          is_online: true,
          payment_config_code: 'HEYTEAMEMBER',
          external_code: item.id,
          type: 800,
          payment_name: item.name,
          card_no: item.member_code,
          par_value: item.par_value,
          secret_content: {},
          sequence_id: item.sequence_id
        };
      });

      return coupons;
    } //格式化存储进db的数据

  }, {
    key: "formatPaySchemaData",
    value: function formatPaySchemaData(orderData, sysData, data) {
      var _sysData$posInfo, _sysData$storeInfo, _sysData$pos;

      return {
        ticket_id: orderData.paymentsId,
        sync_pay: true,
        partner_id: (_sysData$posInfo = sysData.posInfo) === null || _sysData$posInfo === void 0 ? void 0 : _sysData$posInfo.partner_id,
        store_id: sysData.store_id,
        scope_id: 0,
        store_code: (_sysData$storeInfo = sysData.storeInfo) === null || _sysData$storeInfo === void 0 ? void 0 : _sysData$storeInfo.code,
        payments: [],
        coupons: this.formatCoupons(orderData),
        currency: 'RMB',
        pay_amount: new service.decimal(orderData.netAmount).mul(new service.decimal(100)).toNumber(),
        //需要线上支付的金额
        // member: this._setMember(orderData, memberData, data.rootExtend),
        member: this.formatMember(orderData),
        order_content: {
          order_ticket_id: orderData.ticketId,
          order_no: orderData.ticketNo,
          pos_id: sysData.pos_id,
          pos_no: (_sysData$pos = sysData.pos) === null || _sysData$pos === void 0 ? void 0 : _sysData$pos.code,
          table_no: orderData.tableNo,
          sales_time: service.moment(orderData.startTime).format(),
          sales_date: service.moment(orderData.startTime).format(),
          amount: new service.decimal(orderData.netAmount).mul(100).toNumber(),
          products: this._setProducts(orderData)
        }
      };
    }
    /**
     * 格式化paylog保存的信息
     * @param {订单数据} orderData 
     * @param {setPayments返回的数组中每个元素} payment 
     */

  }, {
    key: "formatPaymentLog",
    value: function formatPaymentLog(orderData, payment) {
      return {
        id: "".concat(orderData.paymentsId, "_").concat(payment.sequence_id),
        order_id: orderData.ticketId,
        payment_id: orderData.paymentsId,
        sequence_id: payment.sequence_id,
        request: payment,
        response: null,
        type: 'pay',
        pay_status: 'init',
        start_time: new Date().getTime(),
        end_time: null,
        overflow: payment.overflow,
        rounding: payment.rounding
      };
    }
    /**
     * 杉德支付
     * 
     */

  }, {
    key: "_execSandPayment",
    value: function () {
      var _execSandPayment2 = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee11(_ref4) {
        var clientData, orderData, payItemsDb, data, delDb, pdata, res;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee11$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                clientData = _ref4.clientData, orderData = _ref4.orderData, payItemsDb = _ref4.payItemsDb, data = _ref4.data;

                delDb = /*#__PURE__*/function () {
                  var _ref5 = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee10(err) {
                    var num, i, o, id, res;

                    return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee10$(_context11) {
                      while (1) {
                        switch (_context11.prev = _context11.next) {
                          case 0:
                            num = 0;

                            for (i in payItemsDb) {
                              o = payItemsDb[i];

                              if ((o.sequence_id || 0) > num) {
                                num = o.sequence_id || 0;
                              }
                            }

                            id = payment_id + '_' + num;
                            orderData.status = "PAYING";
                            _context11.next = 6;
                            return GetPayLogDb(clientData.store_id).delById(id);

                          case 6:
                            res = _context11.sent;
                            throw err;

                          case 8:
                          case "end":
                            return _context11.stop();
                        }
                      }
                    }, _callee10);
                  }));

                  return function delDb(_x18) {
                    return _ref5.apply(this, arguments);
                  };
                }();

                pdata = {
                  amt: Number(data.value) || 0,
                  cardType: '01',
                  id: orderData.ticketId
                };
                _context12.prev = 3;
                _context12.next = 6;
                return GetPaymentDb(clientData.store_id).CardPay(pdata);

              case 6:
                res = _context12.sent;

                if (!(res && res.ResponseCode === '00')) {
                  _context12.next = 14;
                  break;
                }

                orderData.payments || (orderData.payments = {});
                orderData.payments._private || (orderData.payments._private = {});
                orderData.payments._private.shande = {
                  SysRefNo: res.SysRefNo,
                  time: service.moment(new Date()).format('MMDD')
                };
                orderData.bizCode = 'SHANDE';
                _context12.next = 15;
                break;

              case 14:
                return _context12.abrupt("return", delDb({
                  status_code: 1,
                  description: msg,
                  data: res,
                  code: 'SAND_ERROR'
                }));

              case 15:
                _context12.next = 22;
                break;

              case 17:
                _context12.prev = 17;
                _context12.t0 = _context12["catch"](3);

                if (!((_context12.t0 === null || _context12.t0 === void 0 ? void 0 : _context12.t0.status_code) == 1)) {
                  _context12.next = 21;
                  break;
                }

                return _context12.abrupt("return", Promise.reject(_context12.t0));

              case 21:
                return _context12.abrupt("return", delDb({
                  status_code: 1,
                  description: '杉德支付异常',
                  data: _context12.t0,
                  code: 'SAND_ERROR'
                }));

              case 22:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee11, null, [[3, 17]]);
      }));

      function _execSandPayment(_x17) {
        return _execSandPayment2.apply(this, arguments);
      }

      return _execSandPayment;
    }() //线下支付

  }, {
    key: "_execOfflinePayment",
    value: function () {
      var _execOfflinePayment2 = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee12(_ref6) {
        var _this4 = this;

        var clientData, payData, payItemsDb, finalPayments, order, promotionPay, result;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee12$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                clientData = _ref6.clientData, payData = _ref6.payData, payItemsDb = _ref6.payItemsDb, finalPayments = _ref6.finalPayments, order = _ref6.order, promotionPay = _ref6.promotionPay;
                result = service.lodash.map(payItemsDb, function (item) {
                  return _this4._resultPaymentsItemSchema(item);
                });
                _context13.next = 4;
                return Promise.all(service.lodash.map(result, function (item) {
                  return GetPayLogDb(clientData.store_id).save(item.id, item);
                }));

              case 4:
                return _context13.abrupt("return", this._returnPayment({
                  clientData: clientData,
                  payData: payData,
                  payItemsDb: result,
                  finalPayments: finalPayments,
                  order: order,
                  promotionPay: promotionPay
                }));

              case 5:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee12, this);
      }));

      function _execOfflinePayment(_x19) {
        return _execOfflinePayment2.apply(this, arguments);
      }

      return _execOfflinePayment;
    }()
  }, {
    key: "_returnPayment",
    value: function _returnPayment(_ref7) {
      var clientData = _ref7.clientData,
          payData = _ref7.payData,
          payItemsDb = _ref7.payItemsDb,
          finalPayments = _ref7.finalPayments,
          order = _ref7.order,
          promotionPay = _ref7.promotionPay;
      var final_payments = [];
      var payments = [];
      var _data = {};
      var amount = 0;
      var payAmount = 0;
      var changeAmount = 0;
      var overflowAmount = 0;
      var roundingAmount = 0;
      var orderData = order.GetOrderData();

      var _loop2 = function _loop2(i) {
        var _o = payItemsDb[i];
        var o = _o.response;
        var o2 = _o.request;

        if (o.pay_status === 'PAID') {
          payAmount = service.decimal.add(payAmount, transformerAmount2Yuan(o2.pay_amount)).toDecimalPlaces(2, 4).toNumber();
          amount = service.decimal.add(amount, transformerAmount2Yuan(o2.amount)).toDecimalPlaces(2, 4).toNumber();
          changeAmount = service.decimal.add(changeAmount, transformerAmount2Yuan(o2.change)).toDecimalPlaces(2, 4).toNumber();
          overflowAmount = service.decimal.add(overflowAmount, transformerAmount2Yuan(o2.overflow)).toDecimalPlaces(2, 4).toNumber();
          roundingAmount = service.decimal.add(roundingAmount, transformerAmount2Yuan(o2.rounding)).toDecimalPlaces(2, 4).toNumber();
        } //聚合支付时 要把对应的支付方式转换成真实的支付方式


        if (o.real_channel) {
          var _SysData$clientData$s;

          //将sysdata.paymentData 转换成数组
          var sysPayments = service.lodash.toArray((_SysData$clientData$s = service.SysData[clientData.store_id]) === null || _SysData$clientData$s === void 0 ? void 0 : _SysData$clientData$s.paymentMeta);

          var realPayment = service.lodash.find(sysPayments, function (item) {
            return item.cooperation_code === o.real_channel;
          });

          console.log('真实的支付方式为：', realPayment);
          o2.extend.trans_code = realPayment === null || realPayment === void 0 ? void 0 : realPayment.code;
          o.payment_id = realPayment === null || realPayment === void 0 ? void 0 : realPayment.id;
          o.payment_name = realPayment === null || realPayment === void 0 ? void 0 : realPayment.name;
        }

        o = _objectSpread$4(_objectSpread$4({}, o2), o);
        payments.push(o);
        _data[o.sequence_id] = o;
      };

      for (var i in payItemsDb) {
        _loop2(i);
      }

      for (var _i in finalPayments) {
        var o = finalPayments[_i];
        final_payments.push(_data[o.sequence_id]);
      } //找零


      if (changeAmount) {
        orderData.changeAmount = changeAmount;
      }

      var total_rounding = service.lodash.reduce(payments, function (t, c) {
        return t + new service.decimal(c.rounding).div(100).toDecimalPlaces(2, 4).toNumber();
      }, 0);

      var pay_status = "PAYING";
      order.SetStatus("PAYING");
      var payAmountIng = new service.decimal(payData.pay_amount).div(100).toDecimalPlaces(2, 4).toNumber();

      if (amount >= payAmountIng) {
        orderData.endTime = new Date().getTime();
        orderData.time = orderData.endTime;
        pay_status = "PAID";
        orderData.rounding = total_rounding;
      } else {
        orderData.rounding = 0;
      }

      var payload = {
        final_payments: this.transferAmountUnitToYuan(final_payments),
        payments: this.transferAmountUnitToYuan(payments),
        pay_status: pay_status,
        pos_id: service.SysData[clientData.store_id].pos_id,
        store_id: service.SysData[clientData.store_id].store_id,
        ticket_id: payData.ticket_id
      };
      return Promise.resolve({
        amount: amount,
        payload: payload
      }).then(function (_ref8) {
        var amount = _ref8.amount,
            payload = _ref8.payload;
        orderData.payAmount = new service.decimal(payAmount).toDecimalPlaces(2, 4).toNumber();
        orderData.payments || (orderData.payments = {
          _private: {
            result: {}
          }
        });
        orderData.payments._private.result = payload;
        orderData.Calculator();
        var pres = {
          data: {
            isOnline: orderData.isOnline,
            orderData: order.GetOrderData(),
            result: payload,
            value: -1 * service.decimal(orderData.restAmount).toDecimalPlaces(2, 4).toNumber()
          },
          status_code: 0
        };

        if (payload.pay_status != "PAID") {
          return {
            pay_status: payload.pay_status,
            pres: pres
          };
        }

        order.SetMainStatus('FINISH');
        order.SetStatus('SALE');
        return {
          pay_status: payload.pay_status,
          pres: pres
        };
      });
    }
  }, {
    key: "transferAmountUnitToYuan",
    value: function transferAmountUnitToYuan(payments) {
      return service.lodash.map(payments, function (item) {
        return _objectSpread$4(_objectSpread$4({}, item), {}, {
          pay_amount: new service.decimal(item.pay_amount).div(100).toDecimalPlaces(2, 4).toNumber(),
          amount: new service.decimal(item.amount).div(100).toDecimalPlaces(2, 4).toNumber(),
          change: new service.decimal(item.change).div(100).toDecimalPlaces(2, 4).toNumber(),
          overflow: new service.decimal(item.overflow).div(100).toDecimalPlaces(2, 4).toNumber(),
          rounding: new service.decimal(item.rounding).div(100).toDecimalPlaces(2, 4).toNumber(),
          result_net_amount: new service.decimal(item.result_net_amount || 0).div(100).toDecimalPlaces(2, 4).toNumber(),
          result_amount: new service.decimal(item.result_amount || 0).div(100).toDecimalPlaces(2, 4).toNumber(),
          receivable: new service.decimal(item.receivable || 0).div(100).toDecimalPlaces(2, 4).toNumber()
        });
      });
    } //线上支付

  }, {
    key: "_execOnlinePayment",
    value: function () {
      var _execOnlinePayment2 = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee13(_ref9) {
        var clientData, payData, finalPayments, order, orderData, _yield$call, _yield$call2, res, err, status_code, payload, result, _final_payments, _payments2, final_payments2, payments;

        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee13$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                clientData = _ref9.clientData, payData = _ref9.payData, finalPayments = _ref9.finalPayments, order = _ref9.order;
                //天猫卡券
                orderData = order.GetOrderData();
                orderData.isOnline = true;
                service.HexLog.single().info("\u8BA2\u5355\u3010".concat(orderData.paymentsId, "\u3011\u3010").concat(orderData.ticketId, "\u3011\u5F00\u59CB\u5728\u7EBF\u652F\u4ED8 - paydata: ").concat(JSON.stringify(payData), " - ").concat(JSON.stringify(finalPayments)));
                _context14.next = 6;
                return call(pay, payData);

              case 6:
                _yield$call = _context14.sent;
                _yield$call2 = service.slicedToArray(_yield$call, 2);
                res = _yield$call2[0];
                err = _yield$call2[1];

                if (err) {
                  service.HexLog.single().error("\u8BA2\u5355\u3010".concat(orderData.paymentsId, "\u3011\u3010").concat(orderData.ticketId, "\u3011\u652F\u4ED8\u5931\u8D25:").concat(JSON.stringify(err)));
                }

                assert(!err, {
                  status_code: 1,
                  code: "ERR_PAYMENT_QUERY",
                  description: "支付异常，网络连接不上或服务器异常",
                  data: err,
                  i18n: 'abnormalPaymentForNetworkOrServer'
                });
                status_code = res.status_code, payload = res.payload;

                if (!(status_code !== 0)) {
                  _context14.next = 16;
                  break;
                }

                service.HexLog.single().error("\u8BA2\u5355\u3010".concat(orderData.paymentsId, "\u3011\u3010").concat(orderData.ticketId, "\u3011\u652F\u4ED8\u5F02\u5E38:").concat(JSON.stringify(res)));
                return _context14.abrupt("return", this.exceptionHandler(clientData, order, finalPayments, payData, res));

              case 16:
                if (!(res.payload.status == "WAITING")) {
                  _context14.next = 26;
                  break;
                }

                service.HexLog.single().info("\u8BA2\u5355\u3010".concat(orderData.paymentsId, "\u3011\u3010").concat(orderData.ticketId, "\u3011\u8FDB\u5165WAITING\u72B6\u6001")); //let result = await this.listenPayMessage(orderData.paymentsId);
                // let result = await race(cancelable(this.loopPayQuery, orderData.paymentsId), cancelable(this.listenPayMessage, orderData.paymentsId))

                _context14.next = 20;
                return Promise.race([this.loopPayQuery(orderData.paymentsId), this.listenPayMessage(orderData.paymentsId)]);

              case 20:
                result = _context14.sent;
                console.log('支付结果为：', result);
                service.HexLog.single().info("\u8BA2\u5355\u3010".concat(orderData.paymentsId, "\u3011\u3010").concat(orderData.ticketId, "\u3011\u652F\u4ED8\u5B8C\u6210\uFF1A").concat(JSON.stringify(result)));
                _final_payments = result.data.final_payments.filter(function (item) {
                  return !item.is_coupon;
                });
                _payments2 = result.data.payments.filter(function (item) {
                  return !item.is_coupon;
                });
                return _context14.abrupt("return", {
                  data: _objectSpread$4(_objectSpread$4({}, result.data), {}, {
                    final_payments: _final_payments,
                    payments: _payments2
                  }),
                  status_code: result.status_code
                });

              case 26:
                res.data = res.payload;
                delete res.payload;
                final_payments2 = res.data.final_payments.filter(function (item) {
                  return !item.is_coupon;
                });
                payments = res.data.payments.filter(function (item) {
                  return !item.is_coupon;
                });
                service.HexLog.single().info("\u8BA2\u5355[".concat(orderData.paymentsId, "]\u672A\u8FDB\u5165WAITING\u72B6\u6001"));
                return _context14.abrupt("return", {
                  data: _objectSpread$4(_objectSpread$4({}, res.data), {}, {
                    final_payments: final_payments2,
                    payments: payments
                  }),
                  status_code: res.status_code
                });

              case 32:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee13, this);
      }));

      function _execOnlinePayment(_x20) {
        return _execOnlinePayment2.apply(this, arguments);
      }

      return _execOnlinePayment;
    }()
    /**
     * 支付异常处理
     */

  }, {
    key: "exceptionHandler",
    value: function () {
      var _exceptionHandler = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee14(clientData, order, finalPayments, payData, res) {
        var orderData, payment_id, description, _yield$Promise$all, _yield$Promise$all2, _res, gateway, _orderData$coupons, _orderData$payments, _orderData$payments$_, _orderData$payments$_2, _iterator, _step, p, sequence_id, _payment_id, op_id, _iterator2, _step2, _p, _sequence_id, _payment_id2, _op_id, data, payItemsDb, canDeleteLog, i, o, _orderData;

        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee14$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                orderData = order.GetOrderData();
                service.HexLog.single().error("\u8BA2\u5355\u652F\u4ED8\u5F02\u5E38".concat(JSON.stringify(res))); //支付正在处理，直接 throw

                not(res.code == 'PAYMENT_IN_PROCESS', res);
                payment_id = payData.ticket_id;
                description = res.description;
                _context15.next = 7;
                return Promise.all([query({
                  ticket_id: payment_id
                }), service.ExecAsyncWeb({
                  apiname: 'storm/isAlive',
                  method: 'POST',
                  headers: {
                    'store_id': clientData.store_id
                  }
                }, null)]);

              case 7:
                _yield$Promise$all = _context15.sent;
                _yield$Promise$all2 = service.slicedToArray(_yield$Promise$all, 2);
                _res = _yield$Promise$all2[0];
                gateway = _yield$Promise$all2[1];

                if (!(_res.status_code == 1)) {
                  _context15.next = 95;
                  break;
                }

                if (!(!(gateway === null || gateway === void 0 ? void 0 : gateway.content) || _res.code == undefined)) {
                  _context15.next = 44;
                  break;
                }

                _res.description = "网络断开，请查看网络";
                _res.code = "ERR_PAYMENT_OFFLINE";
                _res.i18n = "networkDisconnectedPleaseCheck";
                delete _res.err;
                console.log('orderData:', orderData);
                _iterator = _createForOfIteratorHelper(finalPayments);
                _context15.prev = 19;

                _iterator.s();

              case 21:
                if ((_step = _iterator.n()).done) {
                  _context15.next = 30;
                  break;
                }

                p = _step.value;
                sequence_id = p.sequence_id;
                _payment_id = orderData.paymentsId;
                op_id = _payment_id + '_' + sequence_id;
                _context15.next = 28;
                return GetPayLogDb(clientData.store_id).delById(op_id);

              case 28:
                _context15.next = 21;
                break;

              case 30:
                _context15.next = 35;
                break;

              case 32:
                _context15.prev = 32;
                _context15.t0 = _context15["catch"](19);

                _iterator.e(_context15.t0);

              case 35:
                _context15.prev = 35;

                _iterator.f();

                return _context15.finish(35);

              case 38:
                orderData.isOnline = !!orderData.members || Boolean(orderData === null || orderData === void 0 ? void 0 : (_orderData$coupons = orderData.coupons) === null || _orderData$coupons === void 0 ? void 0 : _orderData$coupons.length) || service.lodash.some(orderData === null || orderData === void 0 ? void 0 : (_orderData$payments = orderData.payments) === null || _orderData$payments === void 0 ? void 0 : (_orderData$payments$_ = _orderData$payments._private) === null || _orderData$payments$_ === void 0 ? void 0 : (_orderData$payments$_2 = _orderData$payments$_.result) === null || _orderData$payments$_2 === void 0 ? void 0 : _orderData$payments$_2.payments, function (item) {
                  return item.is_online;
                });
                orderData.status = orderData.payments ? 'PAYING' : 'CHECKOUT';

                if (!orderData.payments) {
                  orderData.isPay = false;
                  orderData.isOnline = false;
                  orderData.status = 'CHECKOUT';
                }

                _context15.next = 43;
                return order.Save(clientData);

              case 43:
                throw _res;

              case 44:
                if (!(_res.code === "INVALID_TICKET_ID")) {
                  _context15.next = 76;
                  break;
                }

                orderData.isPay = false;
                orderData.isOnline = false;
                orderData.status = 'CHECKOUT';
                _iterator2 = _createForOfIteratorHelper(finalPayments);
                _context15.prev = 49;

                _iterator2.s();

              case 51:
                if ((_step2 = _iterator2.n()).done) {
                  _context15.next = 60;
                  break;
                }

                _p = _step2.value;
                _sequence_id = _p.sequence_id;
                _payment_id2 = orderData.paymentsId;
                _op_id = _payment_id2 + '_' + _sequence_id;
                _context15.next = 58;
                return GetPayLogDb(clientData.store_id).delById(_op_id);

              case 58:
                _context15.next = 51;
                break;

              case 60:
                _context15.next = 65;
                break;

              case 62:
                _context15.prev = 62;
                _context15.t1 = _context15["catch"](49);

                _iterator2.e(_context15.t1);

              case 65:
                _context15.prev = 65;

                _iterator2.f();

                return _context15.finish(65);

              case 68:
                _context15.next = 70;
                return order.Save(clientData);

              case 70:
                _res.description = "\u652F\u4ED8\u5F02\u5E38".concat(description);
                _res.code = "ERR_PAYMENT_OFFLINE";
                delete _res.err;
                throw _res;

              case 76:
                if (!(_res.code === 'CANCELLED')) {
                  _context15.next = 82;
                  break;
                }

                _context15.next = 79;
                return this.CancelPayment(order, clientData);

              case 79:
                throw ERR_CURR_PAYMENT_CANCELLED;

              case 82:
                if (!(_res.code === 'PAYMENT_REFUNDED')) {
                  _context15.next = 86;
                  break;
                }

                throw ERR_CURR_PAYMENT_REFUNDED;

              case 86:
                if (!(_res.code === 'FAILED_TO_PAY')) {
                  _context15.next = 90;
                  break;
                }

                throw ERR_CURR_PAYMENT_COUPON_FAILED;

              case 90:
                _res.description || (_res.description = "\u8FDC\u7A0B\u670D\u52A1\u5668\u5F02\u5E38\u8FD4\u56DE\uFF0C\u5E76\u4E14\u67E5\u8BE2".concat(payment_id, "\u8BA2\u5355\u6CA1\u660E\u786E\u8FD4\u56DE\uFF0C\u8BF7\u7A0D\u540E\u91CD\u8BD5"));
                _res.code = "ERR_PAYMENT_QUERY";
                _res.i18n = "errPaymentQueryPleaseCheck";
                _res.i18nValue = payment_id;
                throw _res;

              case 95:
                data = _res.payload.final_payments;
                _context15.next = 98;
                return GetPayLogDb(clientData.store_id).getPayByPaymentId(payment_id);

              case 98:
                _context15.t2 = _context15.sent;

                if (_context15.t2) {
                  _context15.next = 101;
                  break;
                }

                _context15.t2 = [];

              case 101:
                payItemsDb = _context15.t2;
                //可以删除的log
                canDeleteLog = service.lodash.filter(payItemsDb, function (o) {
                  return o.pay_status == "init" && !service.lodash.find(data, function (d) {
                    return d.sequence_id === o.sequence_id;
                  });
                });
                _context15.t3 = service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.keys(canDeleteLog);

              case 104:
                if ((_context15.t4 = _context15.t3()).done) {
                  _context15.next = 111;
                  break;
                }

                i = _context15.t4.value;
                o = canDeleteLog[i];
                _context15.next = 109;
                return GetPayLogDb(clientData.store_id).delById(o.id);

              case 109:
                _context15.next = 104;
                break;

              case 111:
                //如果是第一笔支付失败，则将支付状态
                if (payItemsDb.length === canDeleteLog.length) {
                  _orderData = order.GetOrderData();
                  _orderData.isPay = false;
                  _orderData.isOnline = false;
                  order.SetStatus('CHECKOUT');
                } else {
                  order.SetStatus('PAYING');
                }

                _context15.next = 114;
                return order.Save(clientData);

              case 114:
                throw res;

              case 115:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee14, this, [[19, 32, 35, 38], [49, 62, 65, 68]]);
      }));

      function exceptionHandler(_x21, _x22, _x23, _x24, _x25) {
        return _exceptionHandler.apply(this, arguments);
      }

      return exceptionHandler;
    }()
    /**
     * 轮询支付查询接口
     */

  }, {
    key: "loopPayQuery",
    value: function () {
      var _loopPayQuery = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee15(ticket_id) {
        var MAX_QUERY, count, _res$payload, _res$payload2, _res$payload3, _res$payload4, res2, res, isFail, isCancel, isRefund, finish;

        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee15$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                MAX_QUERY = 20;
                count = 0;
                service.HexLog.single().info("\u5F00\u59CB\u8F6E\u8BE2\u3010".concat(ticket_id, "\u3011\u652F\u4ED8\u72B6\u6001"));

              case 3:
                if (!(count < MAX_QUERY)) {
                  _context16.next = 23;
                  break;
                }

                count++;
                _context16.next = 7;
                return call(delay, count < 2 ? 2000 : 5000);

              case 7:
                res2 = _context16.sent;
                _context16.next = 10;
                return query({
                  ticket_id: ticket_id
                });

              case 10:
                res = _context16.sent;
                isFail = (res === null || res === void 0 ? void 0 : (_res$payload = res.payload) === null || _res$payload === void 0 ? void 0 : _res$payload.status) === 'PAY_FAIL';
                isCancel = (res === null || res === void 0 ? void 0 : (_res$payload2 = res.payload) === null || _res$payload2 === void 0 ? void 0 : _res$payload2.status) === 'CANCEL';
                isRefund = (res === null || res === void 0 ? void 0 : (_res$payload3 = res.payload) === null || _res$payload3 === void 0 ? void 0 : _res$payload3.status) === 'REFUND';

                if (!isFail) {
                  _context16.next = 17;
                  break;
                }

                service.HexLog.single().error("\u8F6E\u8BE2\u5B8C\u6210 - \u3010".concat(ticket_id, "\u3011\u652F\u4ED8\u5931\u8D25\uFF0C").concat(JSON.stringify(res)));
                return _context16.abrupt("return", {
                  status_code: res.status_code,
                  data: res.payload
                });

              case 17:
                finish = service.lodash.every(res === null || res === void 0 ? void 0 : (_res$payload4 = res.payload) === null || _res$payload4 === void 0 ? void 0 : _res$payload4.payments, function (item) {
                  return item.pay_status !== 'WAITING';
                });

                if (!(finish && (res === null || res === void 0 ? void 0 : res.status_code) === 0)) {
                  _context16.next = 21;
                  break;
                }

                service.HexLog.single().info("\u8F6E\u8BE2\u5B8C\u6210 - \u3010".concat(ticket_id, "\u3011\u652F\u4ED8\u5B8C\u6210\uFF0C").concat(JSON.stringify(res)));
                return _context16.abrupt("return", {
                  status_code: res.status_code,
                  data: res.payload
                });

              case 21:
                _context16.next = 3;
                break;

              case 23:
                throw ERR_CURR_PAYMENT_TIMEOUT;

              case 24:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee15);
      }));

      function loopPayQuery(_x26) {
        return _loopPayQuery.apply(this, arguments);
      }

      return loopPayQuery;
    }()
  }, {
    key: "listenPayMessage",
    value: function () {
      var _listenPayMessage = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee16(ticket_id) {
        var chan, _res$data, res;

        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee16$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                chan = this.createChannel();
                service.HexLog.single().info("\u51C6\u5907\u76D1\u542C -\u3010".concat(ticket_id, "\u3011"));

              case 3:

                _context17.next = 6;
                return take(chan);

              case 6:
                res = _context17.sent;

                if (!(res.type === 'TIME_OUT')) {
                  _context17.next = 10;
                  break;
                }

                cancel(chan);
                throw ERR_CURR_PAYMENT_TIMEOUT;

              case 10:
                service.HexLog.single().info("\u6B63\u5728\u76D1\u542C -\u3010".concat(ticket_id, "\u3011- \u6536\u5230\u652F\u4ED8\u6D88\u606F").concat(JSON.stringify(res)));

                if (!((res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.ticket_id) === ticket_id)) {
                  _context17.next = 15;
                  break;
                }

                service.HexLog.single().info("\u76D1\u542C\u5B8C\u6210 - \u6536\u5230\u3010".concat(ticket_id, "\u3011\u652F\u4ED8\u6D88\u606F- ").concat(JSON.stringify(res)));
                cancel(chan);
                return _context17.abrupt("return", res);

              case 15:
                _context17.next = 3;
                break;

              case 17:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee16, this);
      }));

      function listenPayMessage(_x27) {
        return _listenPayMessage.apply(this, arguments);
      }

      return listenPayMessage;
    }()
  }, {
    key: "createChannel",
    value: function createChannel() {
      var chan = channel(function (emmit) {
        var timer = setTimeout(function () {
          return emmit({
            type: 'TIME_OUT'
          });
        }, 100000);
        var sid = service.NatsDriver.instance().subscribe('payment.status.*', function (json, reply) {
          try {
            var data = JSON.parse(json);
            service.HexLog.single().info("\u6536\u5230\u3010payment.status.*\u3011\u6D88\u606F\uFF1A".concat(json));

            if ((data === null || data === void 0 ? void 0 : data.status) !== 'WAITING') {
              console.log('收到nats消息：', data);
              emmit({
                status_code: 0,
                data: data
              });
            }
          } catch (e) {
            service.HexLog.single().error("\u65E0\u6CD5\u89E3\u6790json: ".concat(e));
          }
        });
        return function () {
          service.NatsDriver.instance().unsubscribe('payment.status.*', sid);
          clearTimeout(timer);
        };
      });
      return chan;
    }
    /**
     * 订单支付情况查询
     * @param {*订单} order 
     */

  }, {
    key: "orderPayQuery",
    value: function orderPayQuery(order, clientData) {
      var _this5 = this;

      if (!order || !order.GetOrderData) {
        return Promise.reject({
          status_code: 1,
          code: 'ERR_ORDER_PAY_QUERY',
          description: '订单不存在',
          i18n: 'orderNotExits'
        });
      }

      var orderData = order.GetOrderData();
      var order_id = orderData.ticketId;
      var payment_id = orderData.paymentsId;
      var op_id = order_id + '_' + payment_id;
      return GetPayLogDb(clientData.store_id).getPayByPaymentId(payment_id).then(function (res) {
        if (!res || !res.length) {
          //order.SetStatus('PAYING')
          if (orderData.status === 'WAITING' || orderData.status === 'PAYING') {
            order.SetStatus('CHECKOUT');
          }

          return order.Save(clientData).then(function (__) {
            return Promise.reject({
              status_code: 1,
              code: 'ERR_EMPTY_QUERY',
              description: '支付记录不存在',
              i18n: 'emptyPaymentQuery'
            });
          });
        }

        return res;
      }).then(function (data) {
        return data;
      }).then(function (data) {
        return GetPayLogDb(clientData.store_id).getPayById(op_id).then(function (headerData) {
          return {
            data: data,
            headerData: headerData
          };
        });
      }).then(function (_ref10) {
        var data = _ref10.data,
            headerData = _ref10.headerData;
        var p = [];

        for (var i in data) {
          var o = data[i];

          if (o.pay_status === 'init') ;

          p.push(o.request);
        }

        var payData = headerData.paySchemaData;

        var submitPayments = service.lodash.map(p, function (item) {
          return {
            is_online: item.is_online,
            payment_config_code: item.payment_config_code,
            sequence_id: item.sequence_id,
            external_code: item.external_code,
            amount: item.pay_amount,
            payment_name: item.payment_name,
            secret_content: item.extend
          };
        });

        payData.payments = submitPayments;
        return _this5._execOnlinePayment({
          clientData: clientData,
          payData: payData,
          finalPayments: [],
          order: order
        }).then(function (res) {
          if (res.status_code !== 0) {
            return res;
          }

          var final_payments = res.data.payments;
          var _fp = {};
          var _queryDb = [];

          for (var _i2 in final_payments) {
            var _o2 = final_payments[_i2];
            var sequence_id = _o2.sequence_id;
            var id = res.data.ticket_id + '_' + sequence_id;
            _fp[id] = _o2;

            _queryDb.push(GetPayLogDb(clientData.store_id).getPayById(id));
          }

          return Promise.all(_queryDb).then(function (dbData) {
            var _dbData = [];

            for (var _i3 in dbData) {
              if (dbData[_i3]) {
                _dbData.push(dbData[_i3]);
              }
            }

            dbData = _dbData;
            var saveDb = [];
            var payItemsDb = [];

            for (var _i4 in dbData) {
              var _o3 = dbData[_i4];
              payItemsDb.push(_o3);

              if (_o3) {
                var response = _fp[_o3.id];

                if (response && !_o3.response && response.pay_status !== 'WAITING') {
                  response.result_net_amount = response.amount; // console.log(o.pay_status, o.id, '存响应值', response)

                  if (response.promotion && response.promotion.length) {
                    payPromotion(response, orderData, clientData);
                  }

                  _o3.response = response;
                  _o3.pay_status = response.pay_status;
                  saveDb.push(GetPayLogDb(clientData.store_id).save(_o3.id, _o3));
                }
              }
            } //支付优惠计算


            return order.Save(clientData).then(function () {
              return Promise.all(saveDb);
            }).then(function (_r) {
              return {
                payData: payData,
                payRes: res,
                payItemsDb: payItemsDb
              };
            });
          }).then(function (_ref11) {
            var payData = _ref11.payData,
                payItemsDb = _ref11.payItemsDb,
                payRes = _ref11.payRes;
            return _this5._returnPayment({
              clientData: clientData,
              payData: payData,
              payItemsDb: payItemsDb,
              finalPayments: [],
              payRes: payRes,
              order: order
            });
          });
        });
      });
    } //预支付

  }, {
    key: "prepay",
    value: function prepay(order) {}
    /**
     * 取消支付
     * @param order
     * @params netWork //是否调用网络请求
     * @returns {*}
     * @constructor
     * //
     */

  }, {
    key: "CancelPayment",
    value: function CancelPayment(order, clientData) {
      var orderData = order.GetOrderData();

      if (!orderData.isPay) {
        return Promise.resolve({
          status_code: 1,
          code: "ERR_CANCEL_EMPTY_PAYMENT",
          description: "还没支付，不需要取消",
          i18n: 'notPaidYetNoNeedToCancel'
        });
      }

      if (orderData.mainStatus != 'PAYMENT' || orderData.status != 'PAYING') {
        return Promise.resolve({
          status_code: 1,
          code: "ERR_CANCEL_STATUS_PAYMENT",
          description: "当前状态不允许取消订单",
          i18n: 'currentStatusNotAllowCancellationOfTheOrder'
        });
      } // if(orderData.bizCode=='SHANDE'){
      //     return Promise.resolve({ status_code: 1, code: "ERR_CANCEL_SHANDE_PAYMENT", description: "使用杉德支付的订单无法取消支付" })
      // }


      var p = Promise.resolve();
      var fp = orderData.payments && orderData.payments._private && orderData.payments._private.result && orderData.payments._private.result.payments || []; //杉德支付退款

      if (orderData.bizCode == 'SHANDE' && fp.length == 1) {
        var rData = {
          cardType: '01',
          //卡类型, 01为银行卡
          amt: Number(orderData.payments._private.result.payments[0].amount),
          ref: orderData.payments._private.shande.SysRefNo,
          //参考号, 支付返回值中的SysRefNo字段
          time: orderData.payments._private.shande.time,
          //交易时间，格式为MMDD
          id: orderData.ticketId //支付id，查询时需要

        };
        p = GetPaymentDb(clientData.store_id).CardCancel(rData).then(function (res) {
          if (res.ResponseCode === '00') {
            return 1;
          }

          return Promise.reject({
            status_code: 1,
            description: res,
            code: 'SAND_ERROR'
          });
        })["catch"](function (e) {
          if (e.status_code == 1) {
            return Promise.reject(e);
          }

          return Promise.reject({
            status_code: 1,
            description: e,
            code: 'SAND_ERROR'
          });
        });
      }

      return Promise.all([p, service.GetTicketId()]).then(function (_ref12) {
        var _ref13 = service.slicedToArray(_ref12, 2),
            res1 = _ref13[0],
            paymentsId = _ref13[1];

        var _payAmount = orderData.payAmount;

        var save = function save() {
          var paymentData = orderData.payments && orderData.payments._private && orderData.payments._private.result && orderData.payments._private.result.payments || []; // orderData.payments._private.result.payments

          orderData.AddPastPayments(orderData.payments);
          orderData.SetPayments(null);
          orderData.SetPayAmount(0);
          orderData.SetStatus('CHECKOUT');
          orderData.SetPaymentsId(paymentsId);
          orderData.isOnline = false;
          orderData.isPay = false;
          var is_pop_cash_box = false;
          var payments = paymentData;

          for (var i in payments) {
            var o = payments[i] || {};
            var _payment_id3 = o.payment_id;

            if (_payment_id3) {
              var _p2 = service.SysData[clientData.store_id].paymentMeta[_payment_id3];

              if (_p2.is_pop_cash_box) {
                is_pop_cash_box = true;
                break;
              }
            }
          }

          if (is_pop_cash_box) {
            try {
              service.Printer.cashBox(clientData.store_id, {
                localIp: clientData.localIp
              });
            } catch (e) {}
          }

          return order.Save(clientData).then(function (res) {
            if (res.status_code == 1) {
              orderData.SetStatus('PAYING');

              var _payments = orderData.pastPayments.pop();

              orderData.SetPayments(_payments);
              orderData.SetPayAmount(_payAmount);
              orderData.AddPastPayments(orderData.pastPayments);
              orderData.SetPaymentsId(_payments.ticket_id);
            } //杉德支付多笔退款坑


            if (orderData.bizCode == 'SHANDE' && paymentData.length > 1) {
              res.shandeRefundPayment = service.SysData[clientData.store_id].shandeRefundPayment;
            }

            return res;
          });
        };

        if (orderData.isOnline) {
          return cancel$1({
            ticket_id: orderData.paymentsId
          }).then(function (res) {
            if (res.status_code === 0) {
              var _fp2 = orderData.payments && orderData.payments._private && orderData.payments._private.result && orderData.payments._private.result.payments || [];

              var _p3 = [];

              for (var i in _fp2) {
                var o = _fp2[i];

                if (o.external_code) {
                  _p3.push(o);
                }
              }

              if (_p3.length) {
                return new Promise(function (resolve) {
                  setTimeout(function () {
                    Functions.upMemberInfo(orderData, _p3).then(function (r) {
                      resolve(res);
                    })["catch"](function (err) {
                      resolve(res);
                    });
                  }, 2000);
                });
              }
            }

            return res;
          }).then(function (res) {
            var status;

            if (res.status_code === 1) {
              if (res.code != 'INVALID_TICKET_ID') {
                var data = res.payload;
                delete res.payload;
                res.data = data;
                return res;
              } else {
                status = true;
              }
            }

            status = status || res.payload.message == "找不到相关支付记录";

            if (status || res.payload.pay_status == 'CANCELLED') {
              return save();
            }

            return {
              status_code: 1,
              code: res.code || "NOT_ALLOW_CANCEL",
              description: res.description || "不能取消当前订单",
              i18n: 'currentOrderCannotBeCanceled',
              data: res.payload
            };
          })["catch"](function (err) {
            return {
              status_code: 1,
              description: '取消支付失败,请稍后重试！',
              i18n: 'cancellationFailedPleaseRetry'
            };
          });
        }

        return save();
      });
    } //订单被取消后需要重置order的信息

  }, {
    key: "resetPayments",
    value: function () {
      var _resetPayments = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee17(order, clientData) {
        var newPaymentsId, orderData, paymentData, is_pop_cash_box, payments, i, o, _payment_id4, p;

        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee17$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                _context18.next = 2;
                return service.GetTicketId();

              case 2:
                newPaymentsId = _context18.sent;
                orderData = order.GetOrderData();
                paymentData = orderData.payments && orderData.payments._private && orderData.payments._private.result && orderData.payments._private.result.payments || []; // orderData.payments._private.result.payments

                orderData.AddPastPayments(orderData.payments);
                orderData.SetPayments(null);
                orderData.SetPayAmount(0);
                orderData.SetStatus('CHECKOUT');
                orderData.SetPaymentsId(newPaymentsId);
                orderData.isOnline = false;
                orderData.isPay = false;
                is_pop_cash_box = false;
                payments = paymentData;
                _context18.t0 = service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.keys(payments);

              case 15:
                if ((_context18.t1 = _context18.t0()).done) {
                  _context18.next = 26;
                  break;
                }

                i = _context18.t1.value;
                o = payments[i] || {};
                _payment_id4 = o.payment_id;

                if (!_payment_id4) {
                  _context18.next = 24;
                  break;
                }

                p = service.SysData[clientData.store_id].paymentMeta[_payment_id4];

                if (!p.is_pop_cash_box) {
                  _context18.next = 24;
                  break;
                }

                is_pop_cash_box = true;
                return _context18.abrupt("break", 26);

              case 24:
                _context18.next = 15;
                break;

              case 26:
                if (is_pop_cash_box) {
                  try {
                    service.Printer.cashBox(clientData.store_id, {
                      localIp: clientData.localIp
                    });
                  } catch (e) {
                    console.log('开钱箱失败');
                  }
                }

                _context18.next = 29;
                return order.Save(clientData);

              case 29:
                return _context18.abrupt("return", true);

              case 30:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee17);
      }));

      function resetPayments(_x28, _x29) {
        return _resetPayments.apply(this, arguments);
      }

      return resetPayments;
    }()
  }]);

  return indexPayment;
}();

var payment = new indexPayment();

var HookDatas = {}; // TODO: 待删

var execHook = function execHook(data, index, parameter, pres) {
  var func = data[index];

  if (func) {
    return Promise.resolve(func(parameter, pres)).then(function (res) {
      index++;

      if (data[index]) {
        return execHook(data, index, parameter, res);
      }

      return res;
    });
  }
};

var hook = new ( /*#__PURE__*/function () {
  function _class() {
    service.classCallCheck(this, _class);
  }

  service.createClass(_class, [{
    key: "call",
    value: function call(name, args) {
      var defaultData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      if (HookDatas[name] && HookDatas[name][0]) {
        return execHook(HookDatas[name], 0, args);
      } //console.log('没找到钩子', name, HookDatas)


      return Promise.resolve(defaultData);
    }
  }, {
    key: "register",
    value: function register(name, action) {
      if (name && typeof name == 'string' && typeof action == 'function') {
        if (!HookDatas[name]) {
          HookDatas[name] = [];
        }

        HookDatas[name].push(action);
        return true;
      }

      return false;
    }
  }]);

  return _class;
}())();

function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$5(Object(source), true).forEach(function (key) { service.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
//{"sku":[{"id":"XXXXX","name":"XXXXXXXXX","price":"40.0","num":"2","totalPrice":"107.00","discount":"30.0","subSku":[{"id":"XXXXX","name":"XXXXXXX","price":"6.0","num":"3","totalPrice":"18.0"},{"id":"XXXXX","name":"XXXXXXX","price":"3.0","num":"3","totalPrice":"9.0"}]},{"id":"XXXXX","name":"XXXXXXXXX","price":"5.0","num":"2","totalPrice":"10.0","discount":"2.0","subSku":[]}],"memberId":"xxxxxxxxx"}

var Partake = /*#__PURE__*/function () {
  function Partake() {
    var orderList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var promotions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    var _ref = arguments.length > 2 ? arguments[2] : undefined,
        _ref$memberId = _ref.memberId,
        memberId = _ref$memberId === void 0 ? "" : _ref$memberId,
        _ref$orderId = _ref.orderId,
        orderId = _ref$orderId === void 0 ? "" : _ref$orderId,
        _ref$posId = _ref.posId,
        posId = _ref$posId === void 0 ? "" : _ref$posId;

    service.classCallCheck(this, Partake);

    //console.log('Partake', orderList, promotions)
    this.orderList = orderList;
    this.promotions = promotions;
    this.memberId = memberId;
    this.orderId = orderId;
    this.posId = posId;
    this.totalDiscount = 0;
    this.orderGroup = {};
    this.grouping();
    this.exec();
    return this.result();
  } //分组


  service.createClass(Partake, [{
    key: "grouping",
    value: function grouping() {
      for (var i in this.orderList) {
        var o = _objectSpread$5({}, this.orderList[i]);

        if (!this.orderGroup[o.productId]) {
          this.orderGroup[o.productId] = {
            totalPrice: 0,
            totalDiscount: 0,
            list: []
          };
        }

        var group = this.orderGroup[o.productId];
        o._amount = service.decimal.add(o.netAmount, o.toppingAmount).toNumber();
        group.totalPrice = service.decimal.add(group.totalPrice, o._amount).toNumber();
        o._index = i;
        group.list.push(o);
      }
    }
  }, {
    key: "exec",
    value: function exec() {
      for (var i in this.promotions) {
        var o = this.promotions[i];
        var discount = o.discount,
            source = o.source;

        if (!source) {
          return;
        }

        var fired = service.lodash.uniq(source.fired);

        this.compute(discount, fired);
      }
    }
  }, {
    key: "compute",
    value: function compute(discount, fired) {
      //参与总价
      var totalPrice = 0;

      for (var i in fired) {
        var id = fired[i];

        if (this.orderGroup[id]) {
          var o = this.orderGroup[id];
          totalPrice = service.decimal.add(totalPrice, o.totalPrice).toNumber();
        } else {
          console.log('找不到商品', id);
        }
      }

      this.totalDiscount = service.decimal.add(discount, this.totalDiscount).toNumber(); //百分比

      var percent = service.decimal.div(discount, totalPrice).toNumber(); //价格

      for (var _i in fired) {
        var _id = fired[_i];

        if (this.orderGroup[_id]) {
          var _o = this.orderGroup[_id];
          _o.totalDiscount = service.decimal.mul(percent, _o.totalPrice).add(_o.totalDiscount).toNumber();
        } else {
          console.log('找不到商品', _id);
        }
      }
    } //结果

  }, {
    key: "result",
    value: function result() {
      var sku = [];
      var totalDiscount = 0;

      for (var i in this.orderGroup) {
        var g = this.orderGroup[i];
        var percent = service.decimal.div(g.totalDiscount, g.totalPrice).toNumber() || 0;

        for (var j in g.list) {
          var o = g.list[j];
          var discount = service.decimal.mul(percent, o._amount).toDecimalPlaces(2, 4).toNumber() || 0; //console.log('totalDiscount', totalDiscount, 'discount', discount, 'percent', percent, 'o._amount', o._amount)

          totalDiscount = service.decimal.add(totalDiscount, discount).toDecimalPlaces(2, 4).toNumber(); //console.log('商品', o)

          var order = {
            id: o.productId,
            name: o.name,
            price: o.groess,
            num: o.qty,
            totalPrice: service.decimal(o._amount).toDecimalPlaces(2, 4).toNumber(),
            discount: discount,
            subSku: []
          };

          if (o.combo) {
            //套餐
            for (var _i2 in o.combo) {
              var sub = o.combo[_i2];
              var subOrder = {
                id: sub.productId,
                name: sub.name,
                price: sub.groess,
                num: sub.qty,
                totalPrice: sub.netAmount,
                discount: 0,
                subSku: []
              }; //套餐加料

              for (j in sub.topping) {
                var topping = sub.topping[j];
                subOrder.subSku.push({
                  id: topping.productId,
                  name: topping.name,
                  price: topping.groess,
                  num: topping.qty,
                  totalPrice: topping.netAmount,
                  discount: 0,
                  subSku: []
                });
              }

              order.subSku.push(subOrder);
            }
          } //加料


          for (j in o.topping) {
            var _topping = o.topping[j];
            order.subSku.push({
              id: _topping.productId,
              name: _topping.name,
              price: _topping.groess,
              num: _topping.qty,
              totalPrice: _topping.netAmount,
              discount: 0,
              subSku: []
            });
          }

          sku.push(order);
        }
      } //精确度损耗修正
      //console.log('对比', totalDiscount, this.totalDiscount, Decimal.sub(this.totalDiscount, totalDiscount).toNumber())


      if (totalDiscount !== this.totalDiscount) {
        var d = service.decimal.sub(this.totalDiscount, totalDiscount).toNumber(); //console.log('不相等', d)

        for (var _i3 in sku) {
          var _o2 = sku[_i3];
          var val = service.decimal.add(d, _o2.discount).toNumber(); //console.log('discount:', o.discount, d, val)

          if (val > 0) {
            sku[_i3].discount = val;
            break;
          }
        }
      }

      return {
        sku: sku,
        memberId: this.memberId,
        orderId: this.orderId,
        posId: this.posId
      };
    }
  }]);

  return Partake;
}();

var _dec$1, _class$1;

function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$6(Object(source), true).forEach(function (key) { service.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var GetOrderDb = service.DbProxy.GetOrderDb,
    GetTicketDb$1 = service.DbProxy.GetTicketDb,
    GetSysDb$1 = service.DbProxy.GetSysDb,
    GetPaymentDb$1 = service.DbProxy.GetPaymentDb,
    GetTsDb = service.DbProxy.GetTsDb;
var orderStatusType = {
  OPEN: "OPEN",
  HANGUP: "HANGUP",
  ORDER: "ORDER",
  CHECKOUT: "CHECKOUT",
  PAYING: "PAYING",
  PAYERR: "PAYERR",
  SALE: "SALE",
  REFUND: "REFUND",
  RESET: "RESET"
};
/**
 主状态：mainStatus
 初始化：INIT
 服务中：SERVING
 支付：PAYMENT
 待完成：PENDING
 结果：完成FINISH,取消订单CANCEL(没支付取消订单)

 子状态：status
 INIT：
 开单 OPEN
 挂起 HANGUP
 SERVING：
 下单 ORDER
 PAYMENT：
 结账就绪 CHECKOUT
 支付中 PAYING

 PENDING:
 支付异常PAYERR
 取消异常

 FINISH
 销售SALE
 退款REFUND
 重结RESET
 CANCEL（不正常（没支付的订单）订单结束）

 商品操作记录状态：record
 下单ORDER
 转菜TURNDISH
 转桌TURNORDER
 退菜RETREAT
 免菜FREEDISH

 订单类型：type
 销售SALE
 退款REFUND
 重结RESET
 */
//todo 临时补。。。

var temporary = new ( /*#__PURE__*/function () {
  function Temporary() {
    service.classCallCheck(this, Temporary);
  }

  service.createClass(Temporary, [{
    key: "TableOpen",
    value: function TableOpen(store_id, tid, oid, customerCount, ticketNo) {
      return GetTsDb(store_id).open(tid, oid, customerCount, ticketNo).then(function (ret) {
        return {
          status_code: 0,
          data: ret
        };
      })["catch"](function (e) {
        return e;
      });
    }
  }]);

  return Temporary;
}())(); //拆单数据存储  ticketId: OrderIndex // TODO: 多门店情况，按门店数据存储？

var cacheSplitOrderDatas = {};
var OrderService = (_dec$1 = mbus.Name('Order'), _dec$1(_class$1 = /*#__PURE__*/function () {
  function OrderService() {
    service.classCallCheck(this, OrderService);
  }

  service.createClass(OrderService, [{
    key: "Reset",
    value: function Reset(clientData) {
      return GetOrderDb(clientData.store_id).ClearOrder().then(function (res) {
        return {
          status_code: 0
        };
      });
    } // 创建子单

  }, {
    key: "CreateSplitOrder",
    value: function CreateSplitOrder(clientData, storeData) {
      var order = storeData.order;
      var orderStore = order.Order; // 创建子单

      var splitOrder = service.Store.CreateSplitOrder(clientData, orderStore);
      var splitOrderData = splitOrder.GetOrderData();
      var ticketId = splitOrderData.ticketId; // 更改原单状态

      var splitStatus = order.GetOrderData().splitStatus; // _.has(splitStatus, ticketId) 

      splitStatus[ticketId] = "INIT";
      order.ChangSplitStatus(splitStatus);
      cacheSplitOrderDatas[ticketId] = splitOrder;
      return {
        status_code: 0,
        ticketId: ticketId
      };
    } // 删除子单

  }, {
    key: "DeletSplitOrder",
    value: function DeletSplitOrder(clientData, storeData, ticketId) {
      // TODO: splitOrder的数据处理
      var order = storeData.order; // 更改原单状态

      var splitStatus = order.GetOrderData().splitStatus; // 如果有该子单，则删除对应数据

      service.lodash.has(cacheSplitOrderDatas, ticketId) && delete cacheSplitOrderDatas[ticketId];
      service.lodash.has(splitStatus, ticketId) && delete splitStatus[ticketId];
      order.ChangSplitStatus(splitStatus);
      return {
        status_code: 0
      };
    } // 子单添加商品 (商品的价格需要重新计算)

  }, {
    key: "AddSplitOrder",
    value: function AddSplitOrder(clientData, storeData, ticketId, transData, useLastQty) {
      var splitOrder = cacheSplitOrderDatas[ticketId];

      service.lodash.map(transData, function (item) {
        var qty = useLastQty ? item.lastQty : item.qty;
        splitOrder.AddSplitOrder(qty, item.id);
      });

      return {
        status_code: 0
      };
    } // 子单添加商品 （商品价格无需计算）

  }, {
    key: "AddSplitDirectGoods",
    value: function AddSplitDirectGoods(clientData, storeData, ticketId, transDatas, useLastQty) {
      var splitOrder = cacheSplitOrderDatas[ticketId];
      splitOrder.AddSplitDirectGoods(transDatas);
      return {
        status_code: 0
      };
    } // 将订单数据保存到数据库

  }, {
    key: "SaveSplitOrder",
    value: function () {
      var _SaveSplitOrder = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee(clientData, storeData, checkedId) {
        var order, sourceOrderData, splitOrderData;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                order = storeData.order; // 保存原单数据

                sourceOrderData = order.GetOrderData();
                _context.next = 4;
                return order.Save(sourceOrderData);

              case 4:
                // 保存子单数据
                splitOrderData = cacheSplitOrderDatas[checkedId].GetOrderData();
                cacheSplitOrderDatas[checkedId].Save(splitOrderData);
                return _context.abrupt("return", {
                  status_code: 0,
                  data: splitOrderData
                });

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function SaveSplitOrder(_x, _x2, _x3) {
        return _SaveSplitOrder.apply(this, arguments);
      }

      return SaveSplitOrder;
    }()
    /**
     * 创建订单
     * @param clientData
     * @param item
     * @returns {{status_code: number, data: *}}
     * @constructor
     */

  }, {
    key: "CreateOrder",
    value: function CreateOrder(clientData) {
      var item = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      item = _objectSpread$6(_objectSpread$6({}, item), {}, {
        lock: clientData.clientId,
        posName: clientData.posName
      });
      var p = Promise.resolve(true);

      if (item.tableId && !item.ticketId && !window.globalHiposConfig.multiOpenOrderOnSeat) {
        p = GetTsDb(clientData.store_id).getTableById(item.tableId).then(function (res) {
          item.tableNo = res.name;
          item.tableZoneId = res.zone_id;

          if (res) {
            return !!(res.table_status != "SERVING");
          }

          return res;
        });
      }

      var p2 = p.then(function (is) {
        if (!is) {
          return Promise.reject({
            status_code: 1,
            code: "TABLE_OCCUPY",
            description: "桌位已经被占用"
          });
        }
      });
      return Promise.all([p2, service.GetTicketId(item.ticketId), service.GetTicketId(item.paymentsId)]).then(function (_ref) {
        var _ref2 = service.slicedToArray(_ref, 3),
            res1 = _ref2[0],
            res2 = _ref2[1],
            res3 = _ref2[2];

        var _Store$Order$CreateOr = service.Store.Order(clientData).CreateOrder(_objectSpread$6(_objectSpread$6({}, item), {}, {
          ticketId: res2,
          paymentsId: res3
        })),
            order = _Store$Order$CreateOr.order,
            user = _Store$Order$CreateOr.user;

        if (item.tableId) {
          if (order.GetOrderData().ticketNo) {
            return [order, user, order.GetOrderData().ticketNo];
          }

          return Promise.all([Promise.resolve(order), Promise.resolve(user), service.GetTicketNo(clientData.store_id, clientData.container, order.GetOrderData().ticketId)]);
        }

        return [order, user];
      }).then(function (_ref3) {
        var _ref4 = service.slicedToArray(_ref3, 3),
            order = _ref4[0],
            user = _ref4[1],
            ticketNo = _ref4[2];

        var _order = order.GetOrderData();

        var ticketId = _order.ticketId;

        var newTable = function newTable() {
          if (item.tableId && !item.ticketId) {
            return temporary.TableOpen(clientData.store_id, item.tableId, ticketId, item.peopleNumber || 1, _order.ticketNo).then(function (res) {
              if (res.status_code == 0) {
                order.SetTableNo(res.data && res.data.table && res.data.table.name || "");
                order.SetTableZoneId(res.data && res.data.table && res.data.table.zone_id || "");
                return {
                  status_code: 0,
                  data: ticketId
                };
              }

              return res;
            });
          }

          return Promise.resolve({
            status_code: 0,
            data: ticketId
          });
        }; //新开一个订单（开单就需要Q保存）


        order.SetStartTime(new Date().getTime());
        order.SetOperator(user);
        return order.Save(clientData).then(function (res) {
          if (res.status_code == 0) {
            return newTable();
          }

          return res;
        });
      })["catch"](function (err) {
        return err;
      });
    }
  }, {
    key: "CustomerCreateOrder",
    value: function CustomerCreateOrder(clientData, item) {
      item = _objectSpread$6(_objectSpread$6({}, item), {}, {
        lock: clientData.clientId,
        posName: clientData.posName
      });

      var _Store$Order$CreateKi = service.Store.Order(clientData).CreateKioskOrder(item),
          order = _Store$Order$CreateKi.order,
          user = _Store$Order$CreateKi.user;

      var _order = order.GetOrderData();

      var ticketId = _order.ticketId; // if(ticketNo && clientData.tag){
      //需要获取交易号
      //新开一个订单（开单就需要Q保存）

      order.SetStartTime(new Date().getTime());
      order.SetOperator(user);
      return order.Save(clientData);
    }
    /**
     * 打开订单
     * @param clientData
     * @param ticketId
     * @constructor
     */

  }, {
    key: "OpenOrder",
    value: function () {
      var _OpenOrder = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee2(clientData) {
        var _this = this;

        var ticketId,
            obj,
            order,
            _args2 = arguments;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                ticketId = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : '';
                obj = {};

                if (!(service._typeof_1(ticketId) == 'object')) {
                  _context2.next = 11;
                  break;
                }

                if (ticketId) {
                  _context2.next = 9;
                  break;
                }

                _context2.next = 6;
                return this.CreateOrder(clientData, obj);

              case 6:
                order = _context2.sent;
                console.log('create order is:', order);
                return _context2.abrupt("return", order);

              case 9:
                obj = _objectSpread$6({}, ticketId);
                ticketId = ticketId.ticketId;

              case 11:
                if (ticketId) {
                  _context2.next = 13;
                  break;
                }

                return _context2.abrupt("return", this.CreateOrder(clientData, obj));

              case 13:
                return _context2.abrupt("return", GetOrderDb(clientData.store_id).GetOrder(ticketId).then(function (orderData) {
                  if (orderData.lock && orderData.lock != clientData.clientId && new Date().getTime() - orderData.updatedTime < window.globalHiposConfig.orderTimeout * 60 * 1000) {
                    //Todo
                    return {
                      status_code: 1,
                      code: "ORDER_LOCK",
                      description: "订单已经被锁住",
                      data: orderData.lock
                    }; //console.log(pClient)
                  }

                  if (orderData.mainStatus == 'FINISH' || orderData.mainStatus == 'CANCEL') {
                    return {
                      status_code: 1,
                      code: "ORDER_" + orderData.mainStatus,
                      description: "订单已经完成，不可以再操作",
                      data: orderData.lock
                    };
                  }

                  var originLock = orderData.lock; //保存订单锁住的信息

                  return GetOrderDb(clientData.store_id).SaveOrder(_objectSpread$6(_objectSpread$6({}, orderData), {}, {
                    lock: clientData.clientId,
                    clientId: clientData.clientId
                  })).then(function (res) {
                    if (res.ok) {
                      if (orderData.tableId) ;

                      return _this.CreateOrder(clientData, _objectSpread$6(_objectSpread$6(_objectSpread$6({}, orderData), obj), {}, {
                        lock: clientData.clientId
                      }));
                    }

                    return {
                      status_code: 1,
                      code: "FAIL_SAVE_DB",
                      description: "保存数据库异常",
                      data: res
                    };
                  }).then(function (res) {
                    if (originLock !== clientData.clientId) {
                      service.execClient("open_order.".concat(originLock, ".").concat(orderData.ticketId), {
                        'msg': res
                      })["catch"](function (e) {
                        return console.log(e);
                      });
                    }

                    return res;
                  })["catch"](function (err) {
                    return {
                      status_code: 1,
                      code: "FAIL_SAVE_DB",
                      description: "保存数据库异常",
                      data: err
                    };
                  });
                })["catch"](function (err) {
                  return {
                    status_code: 1,
                    code: "FAIL_GET_ORDER_DB",
                    description: "获取订单数据库操作异常",
                    data: err
                  };
                }));

              case 14:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function OpenOrder(_x4) {
        return _OpenOrder.apply(this, arguments);
      }

      return OpenOrder;
    }()
    /*
     opts为
     {
     start: 1516204800000, //时间开始边界(可选)
     end: 1516291199999, //时间结束边界(可选)
     page: 1, // 可选
     size: 10, // 可选
     status: ['PAYERR'], // 订单状态(可选)
     ticketId: [], // 订单id(可选)
     clientId: 'xxx', //设备id(可选)
     uploadStatus: 'xxx', //上传状态(可选)
     paymentsStatus: [], //支付状态(可选)
     ticket_no: [], //单号(可选)
     }
     */

    /**
     * 获取操作订单列表
     * @param clientData
     * @param status
     * @constructor
     */

  }, {
    key: "GetOrderList",
    value: function GetOrderList(clientData) {
      var status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return GetOrderDb(clientData.store_id).GetOrderList(status).then(function (res) {
        if (res) {
          return {
            status_code: 0,
            data: res.docs,
            count: res.count || res.docs.length,
            size: res.size || res.docs.length,
            page: res.page || 1,
            pages: res.pages || 1,
            totalAmount: res.totalAmount || 0
          };
        }

        return {
          status_code: 0,
          data: [],
          count: 0,
          size: status.size,
          page: status.page,
          totalAmount: 0
        };
      })["catch"](function (err) {
        return {
          status_code: 1,
          code: "FAIL_GET_ORDER_LIST_DB",
          description: "获取订单数据库操作异常",
          data: err
        };
      });
    }
    /**
     * 保存订单
     * @param clientData
     * @param ticketId
     * @param status
     * @returns {{status_code: number, code: string, description: string}}
     * @constructor
    */

  }, {
    key: "PlaceOrder",
    value: function PlaceOrder(clientData, storeData, status) {
      if (!status) {
        return {
          status_code: 1,
          code: "NOT_STATUS",
          description: "状态是必填项"
        };
      }

      if (!orderStatusType[status]) {
        return {
          status_code: 1,
          code: "RRR_STATUS",
          description: " \n            \u5B50\u72B6\u6001\u4E0D\u5BF9\uFF0C\u6240\u6709\u5B50\u72B6\u6001\u5982\u4E0B\uFF1A\n    OPEN: \"OPEN\",\n    HANGUP: \"HANGUP\",\n    ORDER: \"ORDER\",\n    CHECKOUT: \"CHECKOUT\",\n    PAYING: \"PAYING\",\n    PAYERR: \"PAYERR\",\n    SALE: \"SALE\",\n    REFUND:\"REFUND\",\n    RESET:\"RESET\"\n "
        };
      }

      status = orderStatusType[status]; //挂起

      if (status == "HANGUP") {
        return this.Hangup(clientData, storeData);
      } //下单


      if (status == "ORDER") {
        return this.DownOrder(clientData, storeData);
      } //结账


      if (status == 'CHECKOUT') {
        return this.Checkout(clientData, storeData);
      }

      var order = storeData.order,
          user = storeData.user;
      var orderData = order.GetOrderData(); //订单为空也可以挂起

      /*if (!orderData.orderLine.length) {
       return {status_code: 1, code: "EMPTY_ORDER", description: "不可以保存空订单"}
       }*/

      orderData.status = status;

      if (status != "4") {
        orderData.lock = "";
      } //开单时间用第一保存来做


      orderData.startTime || (orderData.startTime = new Date().getTime()); //排序号在第一次保存的时候就要给了

      order.SetStatus(orderData.status);
      order.SetStartTime(orderData.startTime);
      return GetOrderDb(clientData.store_id).SaveOrder(orderData).then(function (res) {
        if (res.ok) {
          order.SetUpdate();

          if (status != "4") {
            service.Store.Order(clientData).Clean();
          }

          return {
            status_code: 0,
            data: order.GetOrderData(true)
          };
        }

        return {
          status_code: 1,
          code: "FAIL_SAVE_DB",
          description: "保存数据库异常",
          data: res
        };
      })["catch"](function (err) {
        return {
          status_code: 1,
          code: "FAIL_SAVE_DB",
          description: "保存数据库异常",
          data: err,
          i18n: 'saveDatabaseException'
        };
      }); //return new Promise()Store.Order(clientData).CreateOrder()
    }
    /**
     * 以ticketId来获取订单
     * @param clientData
     * @param ticketId
     * @constructor
     */

  }, {
    key: "GetOrderPyId",
    value: function GetOrderPyId(clientData, ticketId) {
      return GetOrderDb(clientData.store_id).GetOrder(ticketId).then(function (order) {
        if (order) {
          return {
            status_code: 0,
            data: order
          };
        }

        return {
          status_code: 1,
          code: "ERR_NULL",
          description: "没有订单数据",
          data: order
        };
      })["catch"](function (err) {
        return {
          status_code: 1,
          code: "FAIL_GET_ORDER_DB",
          description: "获取订单数据库操作异常",
          data: err
        };
      });
    } // 保存取消单

  }, {
    key: "SaveCancelOrder",
    value: function SaveCancelOrder(clientData, order) {
      var TickeData = this.GetTicket(order);
      var postData = {};
      postData.ticket_id = TickeData.ticket_id;
      postData.extend = _objectSpread$6({}, TickeData);
      postData.bus_date = TickeData.bus_date;
      GetOrderDb(clientData.store_id).SaveCancelOrder(postData).then(function (res) {
        var id = TickeData.ticket_id;
        GetOrderDb(clientData.store_id).UploadCancelOrder(id).then(function (res) {});
      });
    } // 上传小票的商品

  }, {
    key: "_ticketProducts",
    value: function _ticketProducts(o, i) {
      return {
        id: o.productId,
        name: o.name,
        code: o.code,
        customDiscountAmount: o.customDiscountAmount,
        seq_id: parseInt(i) + 1,
        price: o.groess,
        amount: o.groessAmount,
        qty: o.qty,
        discount_amount: o.discountAmount,
        type: o.saleType,
        accessories: [],
        combo_items: [],
        operation_records: o.record,
        skuRemark: o.skuRemark
      };
    }
  }, {
    key: "GetTicket",
    value: function GetTicket(orderData) {
      var members_full = service.toConsumableArray(orderData._heavy.members);

      var members = members_full.map(function (o) {
        // delete o.coupons;
        //   delete o.couponData;
        return _objectSpread$6(_objectSpread$6({}, o), {}, {
          coupons: []
        });
      });
      var Ticket = {
        pos: service.SysData[orderData.store_id].pos,

        /*
        ticket header
        */
        ticket_id: orderData.ticketId,
        ticket_no: orderData.ticketNo || service.SysData[orderData.store_id].ticketNo,
        store_id: service.SysData[orderData.store_id].store_id + "",
        pos_id: service.SysData[orderData.store_id].pos_id + "",
        operator_id: orderData.operator.id && orderData.operator.id.toString() || "",
        operator: orderData.operator,
        //收营员， vinson 20190919
        takemealNumber: orderData.takemealNumber,
        //取餐号，vinson 20190919

        /*
        ticket time
        */
        bus_date: orderData.busDate,
        start_time: service.moment(orderData.startTime || 0).format('YYYY-MM-DD H:mm:ss'),
        end_time: service.moment(orderData.endTime || 0).format('YYYY-MM-DD H:mm:ss'),

        /*
        ticket amount
        */
        gross_amount: orderData.groessAmount,
        net_amount: orderData.resultNetAmount,
        //orderData.netAmount,
        pay_amount: orderData.resultNetAmount,
        //orderData.netAmount,//orderData.payAmount,(2018.7.2和nie打电话给joe确认，net_amount和pay_amount永远相等)
        discount_amount: orderData.resultDiscountAmount,
        //orderData.discountAmount,
        removezero_amount: orderData.removeZeroAmount,
        rounding: orderData.rounding,
        overflow_amount: 0,
        qty: orderData.qty,

        /*
        status and ref
        */
        main_status: orderData.mainStatus,
        status: orderData.status,
        ref_ticket: "",
        channels: [],
        products: [],
        //orderData.orderLine,
        payments: null,
        //promotions: [...orderData.promotion.discount, ...orderData.promotion.present, ...orderData.promotion.trade, ...orderData.promotion.pay],
        promotions: [].concat(service.toConsumableArray(orderData.promotion.result), service.toConsumableArray(orderData.promotion.pay)),
        members: members,
        table: {
          id: orderData.tableId,
          no: orderData.tableNo,
          people: orderData.peopleNumber
        },
        charge_amount: orderData.serviceFee.value,
        //待定
        coupons: [],
        extend: {},
        people: Number(orderData.peopleNumber),
        //人数
        version: "2.0",
        order_source: orderData.orderOpenType || "",
        //渠道来源，外卖，外
        // 如家小票新加数据
        room_no: "-1",
        //房间号
        remark: "",
        //备注
        batch: "#1",
        //班次
        house_ac: false,
        // 是否自用
        in_store: false,
        //是否在门店内
        order_time_type: "BFAST" //早中晚餐标志

      };

      if (!Ticket.pos) {
        Ticket.pos = {};
      }

      Ticket.pos.pos_name = orderData.posName;

      var orderLines = service.toConsumableArray(orderData.orderLine); //天猫商品 todo


      for (var i in orderData.tianmao) {
        var o = orderData.tianmao[i];
        orderLines.push(o.product);
      } //小票订单行


      for (var _i in orderLines) {
        var _o3 = orderLines[_i];

        var item = this._ticketProducts(_o3, _i);

        for (var k in _o3.topping) {
          var _o = _o3.topping[k];

          var topping = this._ticketProducts(_o, k);

          item.accessories.push(topping);
        }

        for (var _k in _o3.combo) {
          var _o4 = _o3.combo[_k];

          var combo = this._ticketProducts(_o4, _k);

          combo.price = _o4.retail;
          combo.amount = _o4.retailAmount;

          for (var k2 in _o4.topping) {
            var _o2 = _o4.topping[k2];

            var topping2 = this._ticketProducts(_o2, k2);

            combo.accessories.push(topping2);
          }

          item.combo_items.push(combo);
        }

        Ticket.products.push(item);
      }

      var payments = [];
      var pdata = orderData.payments && orderData.payments._private.result.payments || [];

      for (var _i2 in pdata) {
        var _o5 = pdata[_i2];

        if (_o5.pay_status == 'PAID') {
          //溢收 
          Ticket.overflow_amount = service.decimal.sub(Ticket.overflow_amount, _o5.overflow || 0).toDecimalPlaces(2, 4).toNumber();
          var amount = _o5.result_net_amount;

          if (typeof amount == 'undefined') {
            amount = _o5.amount || 0;
          }

          var pay_amount = service.decimal.add(amount, _o5.change || 0).toDecimalPlaces(2, 4).toNumber();
          var pObj = {
            id: _o5.payment_channel && _o5.payment_channel.id || _o5.payment_id || _o5._id,
            seq_id: _o5.sequence_id,
            pay_amount: pay_amount,
            amount: amount,
            change: _o5.change || 0,
            overflow: _o5.overflow || 0,
            pay_time: _o5._updated || _o5.updated,
            extend: _o5.extend || {}
          };
          payments.push(pObj);
        }
      }

      Ticket.payments = payments; //天猫卡券转转转

      Ticket.discount_amount = service.decimal.add(Ticket.discount_amount, orderData.tianmaoTotalDiscount || 0).add(orderData.tianmaoTotalDiscount2 || 0).toDecimalPlaces(2, 4).toNumber();
      Ticket.gross_amount = service.decimal.add(Ticket.gross_amount, orderData.tianmaoPay || 0).add(orderData.tianmaoTotalDiscount || 0).add(orderData.tianmaoTotalDiscount2 || 0).toDecimalPlaces(2, 4).toNumber();
      Ticket.pay_amount = service.decimal.add(Ticket.pay_amount, orderData.tianmaoPay || 0).toDecimalPlaces(2, 4).toNumber();
      Ticket.net_amount = service.decimal.add(Ticket.net_amount, orderData.tianmaoPay || 0).toDecimalPlaces(2, 4).toNumber();
      return Ticket;
    } //取消订单（还没下单的删除改成不删除，满记要求）

  }, {
    key: "CancelOrderById",
    value: function CancelOrderById(clientData, ticketId) {
      var _this2 = this;

      var msgData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
        code: "",
        info: ""
      };

      if (!ticketId) {
        return {
          status_code: 1,
          code: "EMPTY_TICKET_ID",
          description: "ticketId不可以为空"
        };
      }

      return GetOrderDb(clientData.store_id).GetOrder(ticketId).then(function (order) {
        if (order.lock && order.lock !== clientData.clientId && new Date().getTime() - order.updatedTime < window.globalHiposConfig.orderTimeout * 60 * 1000) {
          return {
            status_code: 1,
            code: "ERR_ORDER_LOCK",
            description: "订单被锁住，无法删除"
          };
        }

        if (order.status != 'OPEN' && order.status != 'HANGUP' || order.order_source === 'kiosk') {
          return {
            status_code: 1,
            code: "NOT_ORDER_LOCK",
            description: "订单已经被下过单，无法再删除"
          };
        }

        order.refundMsg = msgData;
        order.mainStatus = 'CANCEL';
        order.status = 'CANCEL'; //取消订单时间

        order.time = new Date().getTime();
        return GetOrderDb(clientData.store_id).SaveOrder(_objectSpread$6(_objectSpread$6({}, order), {}, {
          lock: clientData.clientId,
          clientId: clientData.clientId
        })).then(function (res) {
          _this2.SaveCancelOrder(clientData, order);

          if (order.tableId) {
            return _this2.RemoveTableOrder(clientData, ticketId);
          }

          return {
            status_code: 0
          };
        }).then(function (res) {
          if (order.lock !== clientData.clientId) {
            service.execClient("open_order.".concat(order.lock, ".").concat(order.ticketId), {
              'msg': res
            })["catch"](function (e) {});
          }

          return res;
        });
      })["catch"](function (err) {
        return {
          status_code: 1,
          code: "FAIL_GET_ORDER_DB",
          description: "获取订单数据库操作异常",
          data: err
        };
      });
    } //删除订单

  }, {
    key: "DeleteOrderById",
    value: function DeleteOrderById(clientData, ticketId) {
      var _this3 = this;

      if (!ticketId) {
        return {
          status_code: 1,
          code: "EMPTY_TICKET_ID",
          description: "ticketId不可以为空"
        };
      }

      return GetOrderDb(clientData.store_id).GetOrder(ticketId).then(function (order) {
        if (order.lock && order.lock !== clientData.clientId && new Date().getTime() - orderData.updatedTime < window.globalHiposConfig.orderTimeout * 60 * 1000) {
          return {
            status_code: 1,
            code: "ERR_ORDER_LOCK",
            description: "订单被锁住，无法删除"
          };
        }

        if (order.status != 'OPEN' && order.status != 'HANGUP') {
          return {
            status_code: 1,
            code: "NOT_ORDER_LOCK",
            description: "订单已经被下过单，无法再删除"
          };
        } //删除定单


        return GetOrderDb(clientData.store_id).DeleteOrderById(ticketId).then(function (res) {
          if (order.tableId) {
            return _this3.RemoveTableOrder(clientData, ticketId);
          }

          return {
            status_code: 0
          };
        }).then(function (res) {
          if (order.lock !== clientData.clientId) {
            service.execClient("open_order.".concat(order.lock, ".").concat(order.ticketId), {
              'msg': '订单被其他机器打开'
            })["catch"](function (e) {});
          }

          return res;
        })["catch"](function (err) {
          return {
            status_code: 1,
            code: "FAIL_DEL_ORDER_DB",
            description: "数据库删除异常",
            data: err
          };
        });
      })["catch"](function (err) {
        return {
          status_code: 1,
          code: "FAIL_GET_ORDER_DB",
          description: "获取订单数据库操作异常",
          data: err
        };
      });
    }
    /**
     * 点餐
     * @param clientData
     * @param ticketId
     * @param id
     * @param toppingId
     * @constructor
     */
    // TODO: 需要优化

  }, {
    key: "AddOrder",
    value: function () {
      var _AddOrder = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee3(clientData, storeData, id) {
        var toppingId,
            skuRemark,
            order,
            _args3 = arguments;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                toppingId = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : "";
                skuRemark = _args3.length > 4 && _args3[4] !== undefined ? _args3[4] : null;
                order = storeData.order;
                return _context3.abrupt("return", this.HandleTicketNo(clientData, order).then(function (res) {
                  if (order.AddOrder(id, toppingId, "auto", null, null, null, skuRemark)) {
                    order.SetTicketNo(res);
                    order.SetOperator(storeData === null || storeData === void 0 ? void 0 : storeData.user);
                    return order.Save(clientData).then(function (res) {
                      return {
                        status_code: 0,
                        data: order.GetOrderData(true)
                      };
                    })["catch"](function (e) {
                      return {
                        status_code: 0,
                        data: order.GetOrderData(true)
                      };
                    });
                  } else {
                    return {
                      status_code: 1,
                      code: "ERR_ADD_ORDER",
                      description: "获取 [" + id + "] 订单失败",
                      i18n: 'getTheOrderThatFailed',
                      i18nValue: id
                    };
                  }
                }));

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function AddOrder(_x5, _x6, _x7) {
        return _AddOrder.apply(this, arguments);
      }

      return AddOrder;
    }()
  }, {
    key: "HandleTicketNo",
    value: function HandleTicketNo(clientData, order) {
      var orderData = order.GetOrderData(true);

      if (orderData.ticketNo) {
        return Promise.resolve(orderData.ticketNo);
      }

      return service.GetTicketNo(clientData.store_id, clientData.container, orderData.ticketId).then(function (res) {
        return res;
      }).then(function (res) {
        return res;
      });
    }
  }, {
    key: "CleanLocalOrder",
    value: function CleanLocalOrder(clientData, storeData) {
      service.Store.Order(clientData).Clean();
    }
  }, {
    key: "AddLineOrder",
    value: function () {
      var _AddLineOrder = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee4(clientData, storeData, id) {
        var toppingId,
            order,
            _args4 = arguments;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                toppingId = _args4.length > 3 && _args4[3] !== undefined ? _args4[3] : "";
                order = storeData.order;

                if (!order.AddOrder(id, toppingId, "keyboardData", {
                  sequence_id: "",
                  isPay: false,
                  external_code: ""
                }, true)) {
                  _context4.next = 8;
                  break;
                }

                _context4.next = 5;
                return order.Save(clientData);

              case 5:
                return _context4.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 8:
                return _context4.abrupt("return", {
                  status_code: 1,
                  code: "ERR_ADD_ORDER",
                  description: "获取 [" + id + "] 订单失败"
                });

              case 9:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function AddLineOrder(_x8, _x9, _x10) {
        return _AddLineOrder.apply(this, arguments);
      }

      return AddLineOrder;
    }()
    /**
     * 点SKU商品
     * @param storeData
     * @param id
     * @param skuObj
     * @constructor
     */

  }, {
    key: "AddSkuProduct",
    value: function () {
      var _AddSkuProduct = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee5(clientData, storeData, id, skuObj) {
        var order, ticketNo;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                order = storeData.order;
                _context5.next = 3;
                return this.HandleTicketNo(clientData, order);

              case 3:
                ticketNo = _context5.sent;

                if (!order.AddSkuProduct(id, skuObj)) {
                  _context5.next = 12;
                  break;
                }

                order.SetTicketNo(ticketNo);
                order.SetOperator(storeData === null || storeData === void 0 ? void 0 : storeData.user);
                _context5.next = 9;
                return order.Save(clientData);

              case 9:
                return _context5.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 12:
                return _context5.abrupt("return", {
                  status_code: 1,
                  code: "ERR_ADD_ORDER",
                  description: "获取 [" + id + "] 订单失败",
                  i18n: 'getTheOrderThatFailed',
                  i18nValue: id
                });

              case 13:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function AddSkuProduct(_x11, _x12, _x13, _x14) {
        return _AddSkuProduct.apply(this, arguments);
      }

      return AddSkuProduct;
    }()
    /**
     * 以商品id来做点餐
     * @param clientData
     * @param storeData
     * @param productid
     * @param toppingId
     * @returns {*}
     * @constructor
     */

  }, {
    key: "AddProduct",
    value: function () {
      var _AddProduct = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee6(clientData, storeData, productid) {
        var toppingId,
            skuRemark,
            order,
            ticketNo,
            _args6 = arguments;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                toppingId = _args6.length > 3 && _args6[3] !== undefined ? _args6[3] : "";
                skuRemark = _args6.length > 4 && _args6[4] !== undefined ? _args6[4] : null;
                order = storeData.order;

                if (!order.AddOrder(productid, toppingId, "product", null, null, null, skuRemark)) {
                  _context6.next = 14;
                  break;
                }

                _context6.next = 6;
                return this.HandleTicketNo(clientData, order);

              case 6:
                ticketNo = _context6.sent;
                order.SetTicketNo(ticketNo);
                order.SetOperator(storeData === null || storeData === void 0 ? void 0 : storeData.user);
                _context6.next = 11;
                return order.Save(clientData);

              case 11:
                return _context6.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 14:
                return _context6.abrupt("return", {
                  status_code: 1,
                  code: "ERR_ADD_PRODUCT",
                  description: "找不到 [" + productid + "] 商品",
                  i18n: "addProductFailed"
                });

              case 15:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function AddProduct(_x15, _x16, _x17) {
        return _AddProduct.apply(this, arguments);
      }

      return AddProduct;
    }()
    /**
     * 添加套餐商品细项
     * @param clientData
     * @param storeData
     * @param id
     * @param toppingId
     * @returns {*}
     * @constructor
     */

  }, {
    key: "AddCombo",
    value: function () {
      var _AddCombo = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee7(clientData, storeData, index) {
        var data,
            order,
            _args7 = arguments;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                data = _args7.length > 3 && _args7[3] !== undefined ? _args7[3] : [];
                order = storeData.order;

                if (!order.AddCombo(index, data)) {
                  _context7.next = 8;
                  break;
                }

                _context7.next = 5;
                return order.Save(clientData);

              case 5:
                return _context7.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 8:
                return _context7.abrupt("return", {
                  status_code: 1,
                  code: "ERR_ADD_ORDER",
                  description: "添加套餐细项失败"
                });

              case 9:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function AddCombo(_x18, _x19, _x20) {
        return _AddCombo.apply(this, arguments);
      }

      return AddCombo;
    }() // 重选sku商品

  }, {
    key: "ReselectSkuOrder",
    value: function ReselectSkuOrder(clientData, storeData, skuRemark, index) {
      var order = storeData.order;

      if (order.ReselectSkuOrder(skuRemark, index)) {
        return order.Save(clientData).then(function (res) {
          return {
            status_code: 0,
            data: order.GetOrderData(true)
          };
        });
      } else {
        return {
          status_code: 1,
          code: "ERR_ADD_ORDER",
          description: "更新商品细项失败"
        };
      }
    }
    /**
     * 商品加量
     * @param clientData
     * @param ticketId
     * @param index
     * @param number
     * @constructor
     */

  }, {
    key: "IncreaseOrder",
    value: function () {
      var _IncreaseOrder = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee8(clientData, storeData, index) {
        var number,
            order,
            _args8 = arguments;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                number = _args8.length > 3 && _args8[3] !== undefined ? _args8[3] : 1;
                order = storeData.order;

                if (!order.IncreaseOrder(index, number)) {
                  _context8.next = 8;
                  break;
                }

                _context8.next = 5;
                return order.Save(clientData);

              case 5:
                return _context8.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 8:
                return _context8.abrupt("return", {
                  status_code: 1,
                  code: "ERR_INCREASE_ORDER",
                  description: "商品加量失败"
                });

              case 9:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      function IncreaseOrder(_x21, _x22, _x23) {
        return _IncreaseOrder.apply(this, arguments);
      }

      return IncreaseOrder;
    }()
    /**
     * 商品减量
     * @param clientData
     * @param ticketId
     * @param index
     * @param number
     * @constructor
     */

  }, {
    key: "MinusOrder",
    value: function () {
      var _MinusOrder = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee9(clientData, storeData, index) {
        var number,
            order,
            _args9 = arguments;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                number = _args9.length > 3 && _args9[3] !== undefined ? _args9[3] : -1;
                order = storeData.order;

                if (!order.MinusOrder(index, number)) {
                  _context9.next = 8;
                  break;
                }

                _context9.next = 5;
                return order.Save(clientData);

              case 5:
                return _context9.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 8:
                return _context9.abrupt("return", {
                  status_code: 1,
                  code: "ERR_MINUS_ORDER",
                  description: "商品减量失败"
                });

              case 9:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      function MinusOrder(_x24, _x25, _x26) {
        return _MinusOrder.apply(this, arguments);
      }

      return MinusOrder;
    }()
    /**
     * 更新商品数量
     * @param clientData
     * @param storeData
     * @param index
     * @param value
     * @returns {*}
     * @constructor
     */

  }, {
    key: "UpdateQty",
    value: function () {
      var _UpdateQty = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee10(clientData, storeData, index, value) {
        var order;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                order = storeData.order;

                if (!order.UpdateQty(index, value)) {
                  _context10.next = 5;
                  break;
                }

                _context10.next = 4;
                return order.Save(clientData);

              case 4:
                return _context10.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 5:
                return _context10.abrupt("return", {
                  status_code: 1,
                  code: "ERR_UPDATE_QTY",
                  description: "商品更新数量失败",
                  i18n: "theNumberOfProductUpdatesFailed"
                });

              case 6:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }));

      function UpdateQty(_x27, _x28, _x29, _x30) {
        return _UpdateQty.apply(this, arguments);
      }

      return UpdateQty;
    }()
    /**
     *
     * 更改商品名称
     * @param {*} clientData 
     * @param {*} storeData
     * @param {*} index
     * @param {*} name
     * @param {*} groess
     * @returns
     * @memberof OrderService
     */

  }, {
    key: "UpdateName",
    value: function () {
      var _UpdateName = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee11(clientData, storeData, index, name, groess) {
        var order;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                order = storeData.order;

                if (!order.UpdateName(index, name, groess)) {
                  _context11.next = 5;
                  break;
                }

                _context11.next = 4;
                return order.Save(clientData);

              case 4:
                return _context11.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 5:
                return _context11.abrupt("return", {
                  status_code: 1,
                  code: "ERR_UPDATE_NAME",
                  description: "商品更改名称失败"
                });

              case 6:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }));

      function UpdateName(_x31, _x32, _x33, _x34, _x35) {
        return _UpdateName.apply(this, arguments);
      }

      return UpdateName;
    }() //更新座位号 

  }, {
    key: "UpdateSeatNum",
    value: function () {
      var _UpdateSeatNum = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee12(clientData, storeData, indexArr, seatNum) {
        var order;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                order = storeData.order;

                if (!order.UpdateSeatNum(indexArr, seatNum)) {
                  _context12.next = 5;
                  break;
                }

                _context12.next = 4;
                return order.Save(clientData);

              case 4:
                return _context12.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 5:
                return _context12.abrupt("return", {
                  status_code: 1,
                  code: "ERR_UPDATE_NAME",
                  description: "商品更新座位失败"
                });

              case 6:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12);
      }));

      function UpdateSeatNum(_x36, _x37, _x38, _x39) {
        return _UpdateSeatNum.apply(this, arguments);
      }

      return UpdateSeatNum;
    }() //更新餐盘号

  }, {
    key: "UpdatePlateNo",
    value: function () {
      var _UpdatePlateNo = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee13(clientData, storeData, plateNo) {
        var order;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                order = storeData.order;

                if (!order.SetPlate(plateNo)) {
                  _context13.next = 5;
                  break;
                }

                _context13.next = 4;
                return order.Save(clientData);

              case 4:
                return _context13.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 5:
                return _context13.abrupt("return", {
                  status_code: 1,
                  code: "ERR_UPDATE_NAME",
                  description: "更新餐盘号失败"
                });

              case 6:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13);
      }));

      function UpdatePlateNo(_x40, _x41, _x42) {
        return _UpdatePlateNo.apply(this, arguments);
      }

      return UpdatePlateNo;
    }() //更新插单原因

  }, {
    key: "UpdatePrior",
    value: function () {
      var _UpdatePrior = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee14(clientData, storeData, prior) {
        var order;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                order = storeData.order;

                if (!order.SetPrior(prior)) {
                  _context14.next = 5;
                  break;
                }

                _context14.next = 4;
                return order.Save(clientData);

              case 4:
                return _context14.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 5:
                return _context14.abrupt("return", {
                  status_code: 1,
                  code: "ERR_UPDATE_NAME",
                  description: "更新插单原因失败"
                });

              case 6:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14);
      }));

      function UpdatePrior(_x43, _x44, _x45) {
        return _UpdatePrior.apply(this, arguments);
      }

      return UpdatePrior;
    }() //更新厨房信息tag

  }, {
    key: "UpdateKitchenInfo",
    value: function () {
      var _UpdateKitchenInfo = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee15(clientData, storeData, indexArr, kitchenInfoName) {
        var order;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                order = storeData.order;

                if (!order.UpdateKitchenInfo(indexArr, kitchenInfoName)) {
                  _context15.next = 3;
                  break;
                }

                return _context15.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 3:
                order.SetRecord({
                  msg: '通知' + kitchenInfoName
                });
                _context15.next = 6;
                return order.Save(clientData);

              case 6:
                return _context15.abrupt("return", {
                  status_code: 1,
                  code: "ERR_UPDATE_NAME",
                  description: "商品更改厨房信息失败"
                });

              case 7:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15);
      }));

      function UpdateKitchenInfo(_x46, _x47, _x48, _x49) {
        return _UpdateKitchenInfo.apply(this, arguments);
      }

      return UpdateKitchenInfo;
    }()
    /**
     * 添加加料
     * @param clientData
     * @param ticketId
     * @param index
     * @param toppingId
     * @constructor
     */

  }, {
    key: "AddTopping",
    value: function () {
      var _AddTopping = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee16(clientData, storeData, index, toppingId) {
        var order;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                order = storeData.order;

                if (!order.AddTopping(index, toppingId)) {
                  _context16.next = 7;
                  break;
                }

                _context16.next = 4;
                return order.Save(clientData);

              case 4:
                return _context16.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 7:
                return _context16.abrupt("return", {
                  status_code: 1,
                  code: "ERR_ADD_TOPING",
                  description: "添加加料失败",
                  i18n: 'addToppingFailed'
                });

              case 8:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16);
      }));

      function AddTopping(_x50, _x51, _x52, _x53) {
        return _AddTopping.apply(this, arguments);
      }

      return AddTopping;
    }()
    /**
     * 套餐细项加料
     * @param clientData
     * @param storeData
     * @param index
     * @param comboIndex
     * @param toppingId
     * @returns {*}
     * @constructor
     */

  }, {
    key: "AddComboTopping",
    value: function () {
      var _AddComboTopping = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee17(clientData, storeData, index, comboIndex, toppingId) {
        var order;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                order = storeData.order;

                if (!order.AddComboTopping(index, comboIndex, toppingId)) {
                  _context17.next = 7;
                  break;
                }

                _context17.next = 4;
                return order.Save(clientData);

              case 4:
                return _context17.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 7:
                return _context17.abrupt("return", {
                  status_code: 1,
                  code: "ERR_ADD_COMBO_TOPING",
                  description: "套餐细项加料失败"
                });

              case 8:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17);
      }));

      function AddComboTopping(_x54, _x55, _x56, _x57, _x58) {
        return _AddComboTopping.apply(this, arguments);
      }

      return AddComboTopping;
    }()
    /**
     * 加料加量
     * @param clientData
     * @param ticketId
     * @param orderIndex
     * @param toppingIndex
     * @param number
     * @constructor
     */

  }, {
    key: "IncreaseTopping",
    value: function () {
      var _IncreaseTopping = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee18(clientData, storeData, orderIndex, toppingIndex) {
        var number,
            order,
            _args18 = arguments;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                number = _args18.length > 4 && _args18[4] !== undefined ? _args18[4] : 1;
                order = storeData.order;

                if (!order.IncreaseTopping(orderIndex, toppingIndex, number)) {
                  _context18.next = 8;
                  break;
                }

                _context18.next = 5;
                return order.Save(clientData);

              case 5:
                return _context18.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 8:
                return _context18.abrupt("return", {
                  status_code: 1,
                  code: "ERR_INCREASE_TOPING",
                  description: "加料加量失败"
                });

              case 9:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18);
      }));

      function IncreaseTopping(_x59, _x60, _x61, _x62) {
        return _IncreaseTopping.apply(this, arguments);
      }

      return IncreaseTopping;
    }()
    /**
     * 套餐细项加料加量
     * @param clientData
     * @param storeData
     * @param orderIndex
     * @param comboIndex
     * @param toppingIndex
     * @param number
     * @returns {*}
     * @constructor
     */

  }, {
    key: "IncreaseComboTopping",
    value: function () {
      var _IncreaseComboTopping = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee19(clientData, storeData, orderIndex, comboIndex, toppingIndex) {
        var number,
            order,
            _args19 = arguments;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                number = _args19.length > 5 && _args19[5] !== undefined ? _args19[5] : 1;
                order = storeData.order;

                if (!order.IncreaseComboTopping(orderIndex, comboIndex, toppingIndex, number)) {
                  _context19.next = 8;
                  break;
                }

                _context19.next = 5;
                return order.Save(clientData);

              case 5:
                return _context19.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 8:
                return _context19.abrupt("return", {
                  status_code: 1,
                  code: "ERR_INCREASE_COMBO_TOPING",
                  description: "套餐细项加料加量失败"
                });

              case 9:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19);
      }));

      function IncreaseComboTopping(_x63, _x64, _x65, _x66, _x67) {
        return _IncreaseComboTopping.apply(this, arguments);
      }

      return IncreaseComboTopping;
    }()
    /**
     * 加料减量
     * @param clientData
     * @param ticketId
     * @param orderIndex
     * @param toppingIndex
     * @param number
     * @constructor
     */

  }, {
    key: "MinusTopping",
    value: function () {
      var _MinusTopping = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee20(clientData, storeData, orderIndex, toppingIndex) {
        var number,
            order,
            _args20 = arguments;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                number = _args20.length > 4 && _args20[4] !== undefined ? _args20[4] : -1;
                order = storeData.order;

                if (!order.MinusTopping(orderIndex, toppingIndex, number)) {
                  _context20.next = 8;
                  break;
                }

                _context20.next = 5;
                return order.Save(clientData);

              case 5:
                return _context20.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 8:
                return _context20.abrupt("return", {
                  status_code: 1,
                  code: "ERR_MINUS_TOPING",
                  description: "加料减量失败"
                });

              case 9:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20);
      }));

      function MinusTopping(_x68, _x69, _x70, _x71) {
        return _MinusTopping.apply(this, arguments);
      }

      return MinusTopping;
    }()
    /**
     * 套餐细项加料减量
     * @param clientData
     * @param storeData
     * @param orderIndex
     * @param comboIndex
     * @param toppingIndex
     * @param number
     * @returns {*}
     * @constructor
     */

  }, {
    key: "MinusComboTopping",
    value: function () {
      var _MinusComboTopping = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee21(clientData, storeData, orderIndex, comboIndex, toppingIndex) {
        var number,
            order,
            _args21 = arguments;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                number = _args21.length > 5 && _args21[5] !== undefined ? _args21[5] : -1;
                order = storeData.order;

                if (!order.MinusComboTopping(orderIndex, comboIndex, toppingIndex, number)) {
                  _context21.next = 8;
                  break;
                }

                _context21.next = 5;
                return order.Save(clientData);

              case 5:
                return _context21.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 8:
                return _context21.abrupt("return", {
                  status_code: 1,
                  code: "ERR_MINUS_COMBO_TOPING",
                  description: "套餐细项加料减量失败"
                });

              case 9:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21);
      }));

      function MinusComboTopping(_x72, _x73, _x74, _x75, _x76) {
        return _MinusComboTopping.apply(this, arguments);
      }

      return MinusComboTopping;
    }()
    /**
     * 更新加料数量
     * @param clientData
     * @param storeData
     * @param index
     * @param toppingIndex
     * @param value
     * @returns {*}
     * @constructor
     */

  }, {
    key: "UpdateToppingQty",
    value: function () {
      var _UpdateToppingQty = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee22(clientData, storeData, index, toppingIndex, value) {
        var order;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                order = storeData.order;

                if (!order.UpdateToppingQty(index, toppingIndex, value)) {
                  _context22.next = 5;
                  break;
                }

                _context22.next = 4;
                return order.Save(clientData);

              case 4:
                return _context22.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 5:
                return _context22.abrupt("return", {
                  status_code: 1,
                  code: "ERR_UPDATE_TOPPING_QTY",
                  description: "加料商品更新数量失败"
                });

              case 6:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22);
      }));

      function UpdateToppingQty(_x77, _x78, _x79, _x80, _x81) {
        return _UpdateToppingQty.apply(this, arguments);
      }

      return UpdateToppingQty;
    }()
    /**
     * 套餐细项加料数量更改
     * @param {*} clientData 
     * @param {*} storeData 
     * @param {*} index 
     * @param {*} comboIndex 
     * @param {*} value 
     */

  }, {
    key: "UpdateComboQty",
    value: function () {
      var _UpdateComboQty = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee23(clientData, storeData, index, comboIndex, toppingIndex, value) {
        var order;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                order = storeData.order;

                if (!order.UpdateComboQty(index, comboIndex, toppingIndex, value)) {
                  _context23.next = 5;
                  break;
                }

                _context23.next = 4;
                return order.Save(clientData);

              case 4:
                return _context23.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 5:
                return _context23.abrupt("return", {
                  status_code: 1,
                  code: "ERR_UPDATE_COMBO_QTY",
                  description: "套餐细项商品更新数量失败"
                });

              case 6:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23);
      }));

      function UpdateComboQty(_x82, _x83, _x84, _x85, _x86, _x87) {
        return _UpdateComboQty.apply(this, arguments);
      }

      return UpdateComboQty;
    }()
    /**
     * 获取订单对象
     * @param clientData
     * @param ticketId
     * @constructor
     */

  }, {
    key: "GetOrderObj",
    value: function GetOrderObj(clientData, storeData) {
      var order = storeData.order;
      return {
        status_code: 0,
        data: order.GetOrderObj()
      };
    }
    /**
     * 获取订单行
     * @param clientData
     * @param ticketId
     * @constructor
     */

  }, {
    key: "GetOrderLine",
    value: function GetOrderLine(clientData, storeData) {
      var order = storeData.order;
      return {
        status_code: 0,
        data: order.GetOrderLine()
      };
    }
    /**
     * 获取订单总价格和总数量
     * @param clientData
     * @param ticketId
     * @constructor
     */

  }, {
    key: "GetOrderTotal",
    value: function GetOrderTotal(clientData, storeData) {
      var order = storeData.order;
      return {
        status_code: 0,
        data: order.GetOrderTotal()
      };
    }
    /**
     * 获取订单信息
     * @param clientData
     * @param ticketId
     */

  }, {
    key: "GetOrderData",
    value: function GetOrderData(clientData, storeData) {
      var order = storeData.order;
      return {
        status_code: 0,
        data: order.GetOrderData(true)
      };
    }
    /**
     * 获取订单行（每个商品拆成一行的）;
     * @param clientData
     * @param storeData
     * @returns {{status_code: number, data: ({status_code, data}|*)}}
     * @constructor
     */

  }, {
    key: "GetOrderPartLine",
    value: function GetOrderPartLine(clientData, storeData) {
      var order = storeData.order;
      return {
        status_code: 0,
        data: order.GetOrderPartLine()
      };
    }
    /**
     * 清空
     * @param clientData
     * @param ticketId
     * @constructor
     */

  }, {
    key: "OnEmpty",
    value: function () {
      var _OnEmpty = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee24(clientData, storeData) {
        var order;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                order = storeData.order;

                if (!order.OnEmpty()) {
                  _context24.next = 7;
                  break;
                }

                _context24.next = 4;
                return order.Save(clientData);

              case 4:
                return _context24.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 7:
                return _context24.abrupt("return", {
                  status_code: 1,
                  code: "ERR_EMPTY",
                  description: "清空失败",
                  i18n: "emptyTheToppingFailed"
                });

              case 8:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24);
      }));

      function OnEmpty(_x88, _x89) {
        return _OnEmpty.apply(this, arguments);
      }

      return OnEmpty;
    }()
    /**
     * 清空当前选中商品的加料
     * @param clientData
     * @param ticketId
     * @param orderIndex
     * @constructor
     */

  }, {
    key: "EmptyTopping",
    value: function () {
      var _EmptyTopping = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee25(clientData, storeData, orderIndex) {
        var order;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                order = storeData.order;

                if (!order.EmptyTopping(orderIndex)) {
                  _context25.next = 5;
                  break;
                }

                _context25.next = 4;
                return order.Save(clientData);

              case 4:
                return _context25.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 5:
                return _context25.abrupt("return", {
                  status_code: 1,
                  code: "ERR_EMPTY",
                  description: "清空失败",
                  i18n: 'emptyTheToppingFailed'
                });

              case 6:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25);
      }));

      function EmptyTopping(_x90, _x91, _x92) {
        return _EmptyTopping.apply(this, arguments);
      }

      return EmptyTopping;
    }()
    /**
     * 清空套餐细项当前选中商品的加料
     * @param clientData
     * @param storeData
     * @param orderIndex
     * @param comboIndex
     * @returns {*}
     * @constructor
     */

  }, {
    key: "EmptyComboTopping",
    value: function () {
      var _EmptyComboTopping = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee26(clientData, storeData, orderIndex, comboIndex) {
        var order;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                order = storeData.order;

                if (!order.EmptyComboTopping(orderIndex, comboIndex)) {
                  _context26.next = 5;
                  break;
                }

                _context26.next = 4;
                return order.Save(clientData);

              case 4:
                return _context26.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 5:
                return _context26.abrupt("return", {
                  status_code: 1,
                  code: "ERR_EMPTY",
                  description: "清空失败"
                });

              case 6:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26);
      }));

      function EmptyComboTopping(_x93, _x94, _x95, _x96) {
        return _EmptyComboTopping.apply(this, arguments);
      }

      return EmptyComboTopping;
    }()
    /**
     * 删除商品
     * @param clientData
     * @param ticketId
     * @param orderIndex
     * @constructor
     */

  }, {
    key: "DelOrder",
    value: function () {
      var _DelOrder = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee27(clientData, storeData, orderIndex) {
        var order, orderData, data, params, _data, o;

        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                order = storeData.order;
                orderData = order.GetOrderData();
                data = orderData.orderLine[orderIndex];

                if (!(data && data.sequence_id)) {
                  _context27.next = 13;
                  break;
                }

                if (!data.isPay) {
                  _context27.next = 10;
                  break;
                }

                params = {
                  ticket_id: orderData.paymentsId,
                  coupons: [{
                    sequence_id: data.sequence_id,
                    external_code: data.external_code
                  }]
                };
                service.set(clientData);
                return _context27.abrupt("return", CancelPayProCoupon(params).then(function (res) {
                  if (res.status_code == 1 || res.payload.status != 'SUCCESS') {
                    res.status_code = 1;
                    res.description = res.description || "反核销失败";
                    return Promise.reject(res);
                  }

                  var final_payments = res.payload.final_payments || [];

                  for (var i in final_payments) {
                    var _o6 = final_payments[i];
                    delete orderData._heavy.promotionObj.product[_o6.external_code];
                    var nn = 0;

                    for (var j in orderData.coupon) {
                      if (_o6.sequence_id == orderData.coupon[j].sequence_id) {
                        orderData.coupon.splice(j - nn, 1);
                        nn++;
                      }
                    }
                  }

                  FuncCoupon.restoreMemberCoupon(clientData.store_id, orderData, data.external_code);

                  var _data = order.DelOrder(orderIndex);

                  return order.Save(clientData).then(function (r) {
                    return {
                      status_code: 0,
                      data: _data
                    };
                  }); //return {status_code: 0, data: order.DelOrder(orderIndex)};
                })["catch"](function (e) {
                  return e.status_code == 1 ? e : {
                    status_code: 1,
                    code: "ERR_CODE",
                    description: "代码异常，未知错误",
                    data: e
                  };
                }));

              case 10:
                FuncCoupon.restoreMemberCoupon(clientData.store_id, orderData, data.external_code);
                _data = order.DelOrder(orderIndex);
                return _context27.abrupt("return", order.Save(clientData).then(function (r) {
                  return {
                    status_code: 0,
                    data: _data
                  };
                }));

              case 13:
                o = order.DelOrder(orderIndex);
                _context27.next = 16;
                return order.Save(clientData);

              case 16:
                return _context27.abrupt("return", {
                  status_code: 0,
                  data: o
                });

              case 17:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27);
      }));

      function DelOrder(_x97, _x98, _x99) {
        return _DelOrder.apply(this, arguments);
      }

      return DelOrder;
    }()
    /**
     * 删除加料
     * @param clientData
     * @param ticketId
     * @param orderIndex
     * @param toppingIndex
     * @constructor
     */

  }, {
    key: "DelTopping",
    value: function () {
      var _DelTopping = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee28(clientData, storeData, orderIndex, toppingIndex) {
        var order;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                order = storeData.order;
                order.DelTopping(orderIndex, toppingIndex);
                _context28.next = 4;
                return order.Save(clientData);

              case 4:
                return _context28.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData()
                });

              case 5:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28);
      }));

      function DelTopping(_x100, _x101, _x102, _x103) {
        return _DelTopping.apply(this, arguments);
      }

      return DelTopping;
    }()
    /**
     * 删除套餐细项加料
     * @param clientData
     * @param storeData
     * @param orderIndex
     * @param comboIndex
     * @param toppingIndex
     * @returns {{status_code: number, data: ({status_code, data}|*)}}
     * @constructor
     */

  }, {
    key: "DelComboTopping",
    value: function () {
      var _DelComboTopping = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee29(clientData, storeData, orderIndex, comboIndex, toppingIndex) {
        var order;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                order = storeData.order;
                order.DelComboTopping(orderIndex, comboIndex, toppingIndex);
                _context29.next = 4;
                return order.Save(clientData);

              case 4:
                return _context29.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData()
                });

              case 5:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29);
      }));

      function DelComboTopping(_x104, _x105, _x106, _x107, _x108) {
        return _DelComboTopping.apply(this, arguments);
      }

      return DelComboTopping;
    }()
    /**
     * 设置人数
     * @param clientData
     * @param ticketId
     * @param number
     * @constructor
     */

  }, {
    key: "SetPeopleNumber",
    value: function () {
      var _SetPeopleNumber = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee30(clientData, storeData, number) {
        var order;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee30$(_context30) {
          while (1) {
            switch (_context30.prev = _context30.next) {
              case 0:
                order = storeData.order;
                order.SetPeopleNumber(number);
                _context30.next = 4;
                return order.Save(clientData);

              case 4:
                return _context30.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData()
                });

              case 5:
              case "end":
                return _context30.stop();
            }
          }
        }, _callee30);
      }));

      function SetPeopleNumber(_x109, _x110, _x111) {
        return _SetPeopleNumber.apply(this, arguments);
      }

      return SetPeopleNumber;
    }()
    /**
     * 保存小票
     * @param clientData
     * @param ticketId
     * @constructor
     */

  }, {
    key: "SaveTicket",
    value: function () {
      var _SaveTicket = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee31(clientData, storeData) {
        var order, payment, user, TickeData, orderData, store_id, localIp, postData;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee31$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                order = storeData.order, payment = storeData.payment, user = storeData.user;
                TickeData = order.GetTicket();
                TickeData.end_time = service.moment().format('YYYY-MM-DD HH:mm:ss');
                order.SetTicketNo(TickeData.ticket_no);
                order.SetOperator(storeData === null || storeData === void 0 ? void 0 : storeData.user);
                orderData = order.GetOrderData();
                store_id = clientData.store_id, localIp = clientData.localIp;
                postData = {
                  orderType: 'pos',
                  orderId: TickeData.ticket_id,
                  localIp: localIp,
                  printDiff: true
                };

                if (window.globalHiposConfig.PaidUnPrint) {
                  _context31.next = 20;
                  break;
                }

                _context31.prev = 9;
                service.HexLog.single().info("\u6253\u5370\u5C0F\u7968:".concat(orderData.ticketId));
                _context31.next = 13;
                return service.Printer.ticket(store_id, _objectSpread$6({}, postData));

              case 13:
                service.HexLog.single().info("\u6253\u5370\u5C0F\u7968\u5B8C\u6210:".concat(orderData.ticketId));
                _context31.next = 20;
                break;

              case 16:
                _context31.prev = 16;
                _context31.t0 = _context31["catch"](9);
                console.log('打印小票失败');
                service.HexLog.single().info("\u6253\u5370\u5C0F\u7968\u5931\u8D25:".concat(orderData.ticketId));

              case 20:
                // if(!window.globalHiposConfig.PaidUnPrint) {
                //     Print.ticket(order.GetOrderData(), clientData);
                // }
                service.Store.Order(clientData).Clean();
                return _context31.abrupt("return", Promise.all([GetTicketDb$1(clientData.store_id).SaveTicket(TickeData)]).then(function (_ref5) {
                  var _ref6 = service.slicedToArray(_ref5, 1),
                      Ticket = _ref6[0];

                  //Store.Order(clientData).Clean();
                  return {
                    status_code: 0
                  };
                }, function (err) {
                  //Todo
                  return {
                    status_code: 1,
                    code: "ERR_TICKET",
                    description: "保存小票异常",
                    data: err
                  };
                }));

              case 22:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee31, null, [[9, 16]]);
      }));

      function SaveTicket(_x112, _x113) {
        return _SaveTicket.apply(this, arguments);
      }

      return SaveTicket;
    }()
    /**
     * 获取历史订单
     * @param clientData
     * @param start_date
     * @param end_date
     * @constructor
     */

  }, {
    key: "GetHistoryList",
    value: function GetHistoryList(clientData, start_date, end_date) {
      var start = start_date || +service.moment().startOf('d');
      var end = end_date || +service.moment().endOf('d');
      return GetTicketDb$1(clientData.store_id).GetTicketList({
        start_time: service.moment(start).format('YYYY-MM-DD HH:mm:sss'),
        end_time: service.moment(end).format('YYYY-MM-DD HH:mm:ss')
      }).then(function (res) {
        return {
          status_code: 0,
          data: res.docs
        };
      })["catch"](function (err) {
        return {
          status_code: 1,
          code: "FAIL_GET_HISTORY_LIST_DB",
          description: "获取历史记录数据库操作异常",
          data: err
        };
      });
    } // 卡券核销

  }, {
    key: "CouponVerification",
    value: function CouponVerification(clientData, storeData) {
      var order = storeData.order;
      service.set(clientData);
      return payment.couponVerification(clientData, order).then(function (res) {
        if ((res === null || res === void 0 ? void 0 : res.status_code) === 0) {
          var _res$payload, _res$data;

          var _payments = (res === null || res === void 0 ? void 0 : (_res$payload = res.payload) === null || _res$payload === void 0 ? void 0 : _res$payload.payments) || (res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.payments) || [];

          var isErr = service.lodash.find(_payments, function (payment) {
            return payment.is_coupon && payment.pay_status !== 'PAID';
          });

          if (isErr) {
            return {
              status_code: 1
            };
          } else {
            return {
              status_code: 0
            };
          }
        } else {
          return {
            status_code: 1
          };
        }
      })["catch"](function (err) {
        console.log('err', err);
        return {
          status_code: 1
        };
      });
    }
    /**
     * 订单支付
     * @param clientData
     * @param ticketId
     * @param paymentId
     * @param data
     * @constructor
     */

  }, {
    key: "Payment",
    value: function () {
      var _Payment = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee32(clientData, storeData, data) {
        var order, payment$1, orderData, payData, _yield$paymentNew$pay, pay_status, pres, result, cancelResult;

        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee32$(_context32) {
          while (1) {
            switch (_context32.prev = _context32.next) {
              case 0:
                if (!Array.isArray(data)) {
                  _context32.next = 2;
                  break;
                }

                return _context32.abrupt("return", {
                  status_code: 1,
                  code: "ERR_PAY_PARAM",
                  description: "支付参数出错"
                });

              case 2:
                order = storeData.order, payment$1 = storeData.payment;
                orderData = order.GetOrderData();
                payData = service.SysData[clientData.store_id].keyboardPayment[data.paymentKeyboardId];
                service.set(clientData);
                _context32.prev = 6;
                service.HexLog.single().info("\u5F00\u59CB\u8C03\u7528\u652F\u4ED8\u670D\u52A1\uFF1A".concat(orderData.ticketId));
                _context32.next = 10;
                return payment.pay(order, data, clientData);

              case 10:
                _yield$paymentNew$pay = _context32.sent;
                pay_status = _yield$paymentNew$pay.pay_status;
                pres = _yield$paymentNew$pay.pres;
                service.HexLog.single().info("\u652F\u4ED8\u670D\u52A1\u8C03\u7528\u5B8C\u6210\uFF0C\u5F00\u59CB\u5904\u7406\u652F\u4ED8\u7ED3\u679C\uFF1A".concat(orderData.ticketId));
                _context32.next = 16;
                return this._payment(clientData, storeData, {
                  pay_status: pay_status,
                  pres: pres
                }, payData);

              case 16:
                result = _context32.sent;
                service.HexLog.single().info("\u652F\u4ED8\u7ED3\u679C\u5904\u7406\u5B8C\u6210\uFF1A".concat(orderData.ticketId));
                return _context32.abrupt("return", result);

              case 21:
                _context32.prev = 21;
                _context32.t0 = _context32["catch"](6);
                service.HexLog.single().error("\u652F\u4ED8\u670D\u52A1\u8C03\u7528\u5931\u8D25\uFF1A".concat(orderData.ticketId, ",err:").concat(JSON.stringify(_context32.t0)));
                console.log('支付失败：', JSON.stringify(_context32.t0));

                if (!((_context32.t0 === null || _context32.t0 === void 0 ? void 0 : _context32.t0.code) === 'PAYMENT_CANCELLED')) {
                  _context32.next = 29;
                  break;
                }

                _context32.next = 28;
                return payment.resetPayments(order, clientData);

              case 28:
                cancelResult = _context32.sent;

              case 29:
                _context32.next = 31;
                return order.Save(clientData);

              case 31:
                if (!(_context32.t0.status_code == 1)) {
                  _context32.next = 35;
                  break;
                }

                if (_context32.t0.code == 'EXEC_API_TIMEOUT') {
                  _context32.t0.code = 'ERR_PAYMENT_QUERY';
                }

                delete _context32.t0.err;
                return _context32.abrupt("return", _context32.t0);

              case 35:
                return _context32.abrupt("return", {
                  status_code: 1,
                  code: "PAYMENT_ERR",
                  description: "支付异常",
                  data: _context32.t0
                });

              case 36:
              case "end":
                return _context32.stop();
            }
          }
        }, _callee32, this, [[6, 21]]);
      }));

      function Payment(_x114, _x115, _x116) {
        return _Payment.apply(this, arguments);
      }

      return Payment;
    }()
  }, {
    key: "_payment",
    value: function _payment(clientData, storeData, _ref7, payData) {
      var _this4 = this;

      var pay_status = _ref7.pay_status,
          pres = _ref7.pres;
      var order = storeData.order;
      var orderData = order.GetOrderData();
      return Promise.resolve({
        pay_status: pay_status,
        pres2: pres
      }).then(function (_ref8) {
        var pay_status = _ref8.pay_status,
            pres2 = _ref8.pres2;

        var pres = _objectSpread$6({}, pres2);

        pres || (pres = {});
        pres.data || (pres.data = {});
        pres.data.result || (pres.data.result = {});
        pres.data.result.final_payments || (pres.data.result.final_payments = []);
        var paymentInfo = payData && payData.payment || {};
        var fp = [];
        var isOk = false;

        for (var i in pres.data.result.final_payments) {
          var o = pres.data.result.final_payments[i];

          if (o._id == paymentInfo.id) {
            isOk = o.pay_status == 'PAID';
            fp.push(o);
            break;
          }
        }

        pres.data.result.final_payments = fp;
        var store_id = clientData.store_id,
            localIp = clientData.localIp;

        if (isOk) {
          var is_pop_cash_box = paymentInfo.is_pop_cash_box;

          if (is_pop_cash_box) {
            try {
              service.Printer.cashBox(store_id, {
                localIp: localIp
              });
            } catch (e) {
              console.log('开钱箱失败');
            }
          } //支付成功一次也需要打印


          var printPaying = window.globalHiposConfig && window.globalHiposConfig.printPaying || false;
          var TickeData = order.GetTicket();

          if (pay_status != "PAID" && printPaying) {
            var postData = {
              orderType: 'pos',
              orderId: TickeData.ticket_id,
              localIp: localIp,
              printDiff: true
            };

            try {
              service.Printer.ticket(store_id, postData);
            } catch (e) {
              console.log('开钱箱失败');
            }
          }
        }

        if (pay_status === 'CANCELLED' || pay_status === 'PAYMENT_CANCELLED') {
          return _this4.CancelPayment(clientData, storeData); // return {
          //     status_code:1,
          //     description: '订单已取消，请重新支付'
          // }
        }

        if (pay_status != "PAID") {
          return order.Save(clientData).then(function (res) {
            return pres;
          });
        }

        var netAmount = service.lodash.reduce(service.lodash.filter(pres.data.result.payments, function (item) {
          return item.pay_status === 'PAID';
        }), function (t, c) {
          return service.decimal.add(t, c.receivable).toDecimalPlaces(2, 4).toNumber();
        }, 0);

        orderData.netAmount = netAmount;
        orderData.resultNetAmount = netAmount;

        for (var _i3 in orderData.discount2payment) {
          var data = orderData.discount2payment[_i3];
          var payments = orderData.payments._private.result.payments;
          var newPayments = [];

          for (var j in payments) {
            var _o7 = payments[j];
            newPayments.push(_o7);

            if (_o7.sequence_id == _i3) {
              // o.promotion = p
              for (var v in data) {
                var p = data[v];

                var newP = _objectSpread$6({}, _o7);

                _o7.result_net_amount = service.decimal.sub(_o7.result_net_amount, p.amount || 0).toDecimalPlaces(2, 4).toNumber();
                newP.payment_name = p.name;
                newP.result_net_amount = p.amount || 0;
                newP.receivable = p.amount;
                newP.rounding = 0;
                newP.overflow = 0;
                orderData._heavy.coupon.sequenceId++;
                newP.sequence_id = orderData._heavy.coupon.sequenceId;
                var id = service.SysData[clientData.store_id].paymentDiscountTrans[p.id] && service.SysData[clientData.store_id].paymentDiscountTrans[p.id].payment_channel_id;

                if (id) {
                  newP.payment_id = id;
                  newP._id = id;
                } // newP.pay_amount = newP.result_net_amount
                // newP.amount = newP.result_net_amount
                // newP.result_amount = newP.result_net_amount


                newPayments.push(newP);
              }
            }
          }

          orderData.payments._private.result.payments = newPayments;
        } //检查卡券是否可以反核销


        for (var cp in orderData.promotion.result) {
          var _obj = orderData.promotion.result[cp];

          if (_obj._extend && _obj._extend.coupon) {
            var coupon = _obj._extend.coupon;

            for (var _i4 in coupon) {
              var _id = coupon[_i4];
              var _o8 = orderData._heavy.promotionObj.coupon[_id];
              var payment_config_code = _o8._param && _o8._param._extend && _o8._param._extend.payment_config_code || '';

              if (!payment_config_code || !service.SysData[clientData.store_id].couponRefundable[payment_config_code]) {
                orderData.refundable = false;
                break;
              }
            }
          }
        } //所有折扣转支付


        for (var _i5 in orderData.promotion) {
          //if (i != 'pay' && i != 'summary') {
          if (_i5 == 'result') {
            var _data2 = orderData.promotion[_i5];

            if (Array.isArray(_data2) && !!_data2.length) {
              var promotion = [];

              for (var _j in _data2) {
                var _o9 = _data2[_j];
                var pdata = service.SysData[clientData.store_id].paymentDiscountTrans[_o9.promotion_id];

                if (pdata) {
                  var dAmount = _o9.discount || 0;
                  orderData.promotion.summary.discount = service.decimal.sub(orderData.promotion.summary.discount, dAmount).toDecimalPlaces(2, 4).toNumber();
                  orderData.promotion.summary.grantTotal = service.decimal.add(orderData.promotion.summary.grantTotal, dAmount).toDecimalPlaces(2, 4).toNumber();
                  orderData.resultNetAmount = service.decimal.add(orderData.resultNetAmount, dAmount).toDecimalPlaces(2, 4).toNumber();
                  orderData.resultDiscountAmount = service.decimal.sub(orderData.resultDiscountAmount, dAmount).toDecimalPlaces(2, 4).toNumber();
                  orderData._heavy.coupon.sequenceId++;
                  var sequence_id = orderData._heavy.coupon.sequenceId;
                  var _payData = {
                    id: pdata.payment_channel_id,
                    payment_id: pdata.payment_channel_id,
                    sequence_id: sequence_id,
                    amount: dAmount,
                    result_amount: dAmount,
                    result_net_amount: dAmount,
                    pay_status: "PAID",
                    payment_name: pdata.payment_channel_name,
                    is_coupon: false,
                    external_code: "",
                    message: null,
                    payment_category: "",
                    payment_channel: null,
                    payment_config_code: pdata.payment_channel_code,
                    payment_config_type: null,
                    promotion: pdata.promotion_id,
                    type: null,
                    updated: service.moment().format('YYYY-MM-DD HH:mm:ss'),
                    extend: {
                      trans_code: "1"
                    }
                  };

                  orderData.payments._private.result.payments.push(_payData);
                } else {
                  promotion.push(_o9);
                }
              }

              orderData.promotion[_i5] = promotion;
            }
          }
        } //天猫卡券转折扣转支付  


        if (orderData.tianmao && !!orderData.tianmao.length) {
          var payObj = {};
          var discountObj = {};
          var discountObj2 = {}; // 合并转换

          for (var _i6 in orderData.tianmao) {
            var _o10 = orderData.tianmao[_i6]; //合并支付

            if (_o10.pay_amount) {
              var _po = payObj[_o10.payment_channel];

              if (_po) {
                _po.pay_amount = service.decimal.add(_po.pay_amount, _o10.pay_amount).toDecimalPlaces(2, 4).toNumber();
              } else {
                payObj[_o10.payment_channel] = _objectSpread$6({}, _o10);
              }
            } //合并折扣


            if (_o10.total_discount) {
              var _d = discountObj[_o10.promotion_rule];

              if (_d) {
                _d.total_discount = service.decimal.add(_d.total_discount, _o10.total_discount).toDecimalPlaces(2, 4).toNumber();
              } else {
                discountObj[_o10.promotion_rule] = _objectSpread$6({}, _o10);
              }
            } //合并(红包)折扣


            if (_o10.total_discount2) {
              var _d2 = discountObj2[_o10.tmall_discount_channle_code];

              if (_d2) {
                _d2.total_discount2 = service.decimal.add(_d2.total_discount2, _o10.total_discount2).toDecimalPlaces(2, 4).toNumber();
              } else {
                discountObj2[_o10.tmall_discount_channle_code] = _objectSpread$6({}, _o10);
              }
            }
          } // 转支付


          for (var _i7 in payObj) {
            var _o11 = payObj[_i7]; // 转支付

            orderData._heavy.coupon.sequenceId++;
            var _sequence_id = orderData._heavy.coupon.sequenceId;
            var _payData2 = {
              id: _o11.payment_channel,
              payment_id: _o11.payment_channel,
              sequence_id: _sequence_id,
              amount: _o11.pay_amount,
              result_amount: _o11.pay_amount,
              result_net_amount: _o11.pay_amount,
              pay_status: "PAID",
              payment_name: _o11.payment_channel_name,
              is_coupon: false,
              external_code: "",
              message: null,
              payment_category: "",
              payment_channel: null,
              payment_config_code: '',
              payment_config_type: null,
              promotion: [],
              type: null,
              updated: service.moment().format('YYYY-MM-DD HH:mm:ss'),
              extend: {
                /*trans_code: "1"*/
              }
            };

            orderData.payments._private.result.payments.push(_payData2);
          } //转折扣


          for (var _i8 in discountObj) {
            var _o12 = discountObj[_i8]; //转折扣

            var _p = {
              allow_overlap: true,
              discount: _o12.total_discount,
              discount_type: "discount",
              name: _o12.promotion_rule_name,
              promotion_code: "NORMAL",
              promotion_id: _o12.promotion_rule,
              promotion_type: "COUPON",
              saleType: "COUPON_MONEY",
              ticket_display: _o12.promotion_rule_name,
              trigger_times_custom: true,
              type: _o12.promotion_rule_name,
              _extend: {
                success: true
              }
            };
            orderData.promotion.result.push(_p);
          } //转红包折扣


          for (var _i9 in discountObj2) {
            var _o13 = discountObj2[_i9]; //转折扣

            var _p2 = {
              allow_overlap: true,
              discount: _o13.total_discount2,
              discount_type: "discount",
              name: _o13.tmall_discount_channle_name,
              promotion_code: "NORMAL",
              promotion_id: _o13.tmall_discount_channle_code,
              promotion_type: "COUPON",
              saleType: "COUPON_MONEY",
              ticket_display: _o13.tmall_discount_channle_name,
              trigger_times_custom: true,
              type: _o13.tmall_discount_channle_name,
              _extend: {
                success: true
              }
            };
            orderData.promotion.result.push(_p2);
          }
        }


        if (!!orderData.promotion.result.length) {
          var rData = orderData.promotion.result;
          var cData = [];

          for (var _i10 in rData) {
            var _o14 = rData[_i10];

            if (_o14._extend.success) {
              cData.push(_o14);
            }
          }

          orderData.promotion.result = cData;
        }

        service.HexLog.single().info("\u652F\u4ED8\u5904\u7406\u7ED3\u679C\u5B8C\u6210,\u5F00\u59CB\u4FDD\u5B58\u6570\u636E\uFF1A".concat(orderData.ticketId));
        hook.call('order.DownOrder', {
          tag: "PaymentFinish",
          func: _this4.DownOrder,
          args: [clientData, storeData, false, false]
        });
        return order.Save(clientData).then(function (res) {
          console.log('保存订单：', res);

          if (res.status_code == 0) {
            service.HexLog.single().info("\u5F00\u59CB\u5F02\u6B65\u4FDD\u5B58ticket\uFF1A".concat(orderData.ticketId));

            _this4.SaveTicket(clientData, storeData).then(function (ticketRes) {
              if (orderData.tableId) {
                return GetTsDb(clientData.store_id).close(orderData.ticketId).then(function (tres) {
                  // 关桌发送监听
                  // execClient('updateTable', { type: 'close' });
                  return pres;
                })["catch"](function (err) {
                  if (err.status_code == 1) {
                    if (err.code == 'ORDER_NOT_EXIST') {
                      return pres;
                    }

                    return err;
                  }

                  return {
                    status_code: 1,
                    code: "ERR_CODE",
                    description: "代码异常，未知错误",
                    data: err
                  };
                });
              }

              if (ticketRes.status_code !== 0) ;

              return pres;
            });

            var _store_id = clientData.store_id,
                _localIp = clientData.localIp;
            var _postData = {
              orderType: 'pos',
              orderId: orderData.ticketId,
              localIp: _localIp,
              printDiff: true
            };

            if (window.globalHiposConfig.payKitchenPrint) {
              try {
                service.Printer.cookStickers(_store_id, _postData);
              } catch (e) {
                console.log('打印失败');
              } // 新打印 支付后厨打，和保存订单同步，防止小票打印失败导致不厨打

            } // if (window.globalHiposConfig.payKitchenPrint ){
            //     Print.Kitchen(orderData, clientData);
            // }


            return pres;
          }

          return res;
        })["catch"](function (err) {});
      });
    }
    /**
     * 支付异常重试支付（支付不知道什么情况的，需要客户尝试查询的，code统一为ERR_PAYMENT_QUERY）
     * @param clientData
     * @param storeData
     * @returns {{status_code: number, code: string, description: string}}
     * @constructor
     */

  }, {
    key: "RetryPayment",
    value: function () {
      var _RetryPayment = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee33(clientData, storeData) {
        var order, _yield$paymentNew$ord, pay_status, _yield$paymentNew$ord2, pres, _final_payments, payments, payData, p, pd, result, cancelResult;

        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee33$(_context33) {
          while (1) {
            switch (_context33.prev = _context33.next) {
              case 0:
                order = storeData.order;
                service.set(clientData);
                _context33.prev = 2;
                _context33.next = 5;
                return payment.orderPayQuery(order, clientData);

              case 5:
                _yield$paymentNew$ord = _context33.sent;
                pay_status = _yield$paymentNew$ord.pay_status;
                _yield$paymentNew$ord2 = _yield$paymentNew$ord.pres;
                pres = _yield$paymentNew$ord2 === void 0 ? {
                  data: {
                    result: {}
                  }
                } : _yield$paymentNew$ord2;
                _final_payments = pres.data.result.final_payments || [];
                payments = pres.data.result.payments || [];
                payData = null; //重查支付信息拼

                if (!!payments.length) {
                  p = _final_payments[0] || payments[payments.length - 1] || {};

                  if (p.payment_id) {
                    pd = service.SysData[clientData.store_id].paymentMeta[p.payment_id];

                    if (pd) {
                      payData = {
                        payment: pd
                      };
                    }
                  }

                  pres.data.result.final_payments = [p];
                }

                _context33.next = 15;
                return this._payment(clientData, storeData, {
                  pay_status: pay_status,
                  pres: pres
                }, payData);

              case 15:
                result = _context33.sent;
                return _context33.abrupt("return", result);

              case 19:
                _context33.prev = 19;
                _context33.t0 = _context33["catch"](2);

                if (!((_context33.t0 === null || _context33.t0 === void 0 ? void 0 : _context33.t0.code) === 'PAYMENT_CANCELLED')) {
                  _context33.next = 26;
                  break;
                }

                _context33.next = 24;
                return payment.resetPayments(order, clientData);

              case 24:
                cancelResult = _context33.sent;
                console.log('取消订单结果：', cancelResult);

              case 26:
                if (!(_context33.t0.status_code == 1)) {
                  _context33.next = 32;
                  break;
                }

                if (_context33.t0.code == 'EXEC_API_TIMEOUT') {
                  _context33.t0.code = 'ERR_PAYMENT_QUERY';
                }

                delete _context33.t0.err;
                return _context33.abrupt("return", _context33.t0);

              case 32:
                _context33.t0.code = 'ERR_PAYMENT_QUERY';

              case 33:
                return _context33.abrupt("return", _context33.t0);

              case 34:
              case "end":
                return _context33.stop();
            }
          }
        }, _callee33, this, [[2, 19]]);
      }));

      function RetryPayment(_x117, _x118) {
        return _RetryPayment.apply(this, arguments);
      }

      return RetryPayment;
    }()
  }, {
    key: "QueryPayment",
    value: function QueryPayment(clientData, orderData) {
      return this.RetryPayment(clientData, {
        order: new service.OrderIndex(orderData)
      });
    }
    /**
     * 关闭订单（新开的单，直接删除，其他状态单解锁）
     * @param clientData
     * @param storeData
     * @constructor
     */

  }, {
    key: "CloseOrder",
    value: function CloseOrder(clientData, storeData) {
      var _this5 = this;

      var order = storeData.order;
      var orderData = order.GetOrderData();
      var ticketId = orderData.ticketId;
      return GetOrderDb(clientData.store_id).GetOrder(ticketId).then(function (res) {
        var data = res; //新开的没落地的单，删除

        if (res.status == 'OPEN') {
          return GetOrderDb(clientData.store_id).DeleteOrderById(ticketId).then(function (res) {
            service.Store.Order(clientData).Clean();

            if (data.tableId) {
              return _this5.RemoveTableOrder(clientData, ticketId);
            }

            return {
              status_code: 0
            };
          })["catch"](function (err) {
            return {
              status_code: 1,
              code: "FAIL_DEL_ORDER_DB",
              description: "数据库删除异常",
              data: err
            };
          });
        }

        data.lock = "";
        return GetOrderDb(clientData.store_id).SaveOrder(data).then(function (res) {
          if (res.ok) {
            service.Store.Order(clientData).Clean();
            /*if (data.tableId) {
             return this.RemoveTableOrder(clientData, ticketId);
             }*/

            return {
              status_code: 0
            };
          }

          return {
            status_code: 1,
            code: "FAIL_SAVE_DB",
            description: "保存数据库异常",
            data: res
          };
        })["catch"](function (err) {
          return {
            status_code: 1,
            code: "FAIL_SAVE_DB",
            description: "保存数据库异常",
            data: err
          };
        });
      });
    }
    /**
     * 移除桌位里面的订单
     * @param clientData
     * @param ticketId
     * @constructor
     */

  }, {
    key: "RemoveTableOrder",
    value: function RemoveTableOrder(clientData, ticketId) {
      return GetTsDb(clientData.store_id).close(ticketId).then(function (res) {
        if (res.status == 'COMPLETE') {
          // 关桌发送监听
          // execClient('updateTable', { type: 'close' });
          return {
            status_code: 0
          };
        }

        return {
          status_code: 1,
          code: "ERR_CLOSE_TALBE",
          description: "关闭桌位失败",
          data: res
        };
      })["catch"](function (err) {
        if (err.status_code == 1) {
          if (err.code == 'ORDER_NOT_EXIST') {
            return {
              status_code: 0
            };
          }

          return err;
        }

        return {
          status_code: 1,
          code: "ERR_CODE",
          description: "代码异常，未知错误",
          data: err
        };
      });
    }
    /**
     * 取消订单（退掉没完成的订单）
     * @param clientData
     * @param ticketId
     * @constructor
     */

  }, {
    key: "Cancel",
    value: function Cancel(clientData, ticketId) {
      var _this6 = this;

      var msgData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
        code: "",
        info: ""
      };
      return service.Store.GetOrderById(ticketId, clientData, msgData).then(function (res) {
        var data = res.GetOrderData();

        if (data.status != 'ORDER' && data.order_source !== 'kiosk') {
          return {
            status_code: 1,
            code: "ERR_STATUS",
            description: "当前状态不可以取消",
            data: data
          };
        }

        res.SetMainStatus('CANCEL');
        res.SetStatus('CANCEL'); // 存取消订单原因

        data.refundMsg = msgData || null;
        var orderLine = data.orderLine;

        for (var i in orderLine) {
          var o = orderLine[i];

          if (o.status && o.status != 'INIT') {
            o.SetRecord({
              status: "CANCEL",
              ticketFrom: data.ticketId,
              tableFrom: data.tableId,
              msg: '取消订单'
            });
          }
        }

        if (!window.globalHiposConfig.payKitchenPrint) {
          // 新厨打
          var store_id = clientData.store_id,
              localIp = clientData.localIp;
          var postData = {
            orderType: 'pos',
            orderId: data.ticketId,
            localIp: localIp,
            printDiff: true
          };

          try {
            service.Printer.cookStickers(store_id, postData);
          } catch (e) {
            console.log('打印失败');
          }
        } // !window.globalHiposConfig.payKitchenPrint && Print.Kitchen(data, clientData);


        return res.Save(clientData, isClean).then(function (r) {
          if (r.status_code == 0) {
            if (!ticketId) {
              if (isClean) {
                service.Store.Order(clientData).Clean();
              }
            }

            if (data.tableId) {
              _this6.RemoveTableOrder(clientData, data.ticketId);
            }
          }

          return r;
        });
      })["catch"](function (e) {
        return e;
      });
    }
    /**
     * 下订单
     * @param clientData
     * @param storeData
     * @returns {*}
     * @constructor
     */

  }, {
    key: "DownOrder",
    value: function DownOrder(clientData, storeData) {
      var isClean = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var isUpdateStatus = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var order = storeData.order,
          user = storeData.user;
      var orderData = order.GetOrderData();
      return this.downOrderAction(clientData, storeData, isClean, isUpdateStatus).then(function (res) {
        return res;
      });
    }
  }, {
    key: "downOrderAction",
    value: function () {
      var _downOrderAction = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee34(clientData, storeData) {
        var isClean,
            isUpdateStatus,
            order,
            user,
            orderData,
            _orderLine,
            store_id,
            localIp,
            postData,
            _args34 = arguments;

        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee34$(_context34) {
          while (1) {
            switch (_context34.prev = _context34.next) {
              case 0:
                isClean = _args34.length > 2 && _args34[2] !== undefined ? _args34[2] : true;
                isUpdateStatus = _args34.length > 3 && _args34[3] !== undefined ? _args34[3] : true;
                order = storeData.order, user = storeData.user;
                orderData = order.GetOrderData(); //下单检查估清

                orderData.orderLine.map(function (o) {
                  if (o.status != 'INIT') {
                    return o;
                  }

                  o.SetRecord({
                    status: "ORDER",
                    ticketFrom: orderData.ticketId,
                    tableFrom: orderData.tableId,
                    msg: '下单'
                  });
                  return o;
                }); //赋值下单人

                if (!orderData.operator.id) {
                  order.SetOperator(user);
                }

                if (isUpdateStatus) {
                  order.SetMainStatus('SERVING');
                  order.SetStatus('ORDER');
                }

                _orderLine = service.lodash.orderBy(orderData.orderLine, ['server_order_index'], ['asc']);
                orderData.orderLine = _orderLine;

                if (!window.globalHiposConfig.payKitchenPrint) {
                  // 新厨打
                  store_id = clientData.store_id, localIp = clientData.localIp;
                  postData = {
                    orderType: 'pos',
                    orderId: orderData.ticketId,
                    localIp: localIp,
                    printDiff: true
                  };

                  try {
                    service.Printer.cookStickers(store_id, postData);
                  } catch (e) {
                    console.log('打印失败');
                  }
                } // !window.globalHiposConfig.payKitchenPrint && Print.Kitchen(orderData, clientData);


                return _context34.abrupt("return", order.Save(clientData, isClean));

              case 11:
              case "end":
                return _context34.stop();
            }
          }
        }, _callee34);
      }));

      function downOrderAction(_x119, _x120) {
        return _downOrderAction.apply(this, arguments);
      }

      return downOrderAction;
    }()
    /**
     * 挂起
     * @param clientData
     * @param storeData
     * @returns {*}
     * @constructor
     */

  }, {
    key: "Hangup",
    value: function Hangup(clientData, storeData) {
      var order = storeData.order;
      var orderData = order.GetOrderData();

      if (!orderData.orderLine.length && !orderData.tianmao.length && !orderData.ticketNo) {
        return {
          status_code: 1,
          code: "ERR_EMPTY_ORDER",
          description: "空订单不可以挂起",
          data: orderData
        };
      }

      var status = orderData.status;

      if (status != 'OPEN' && status != 'HANGUP' && status != 'ORDER') {
        return {
          status_code: 1,
          code: "ERR_STATUS",
          description: "当前状态不可以挂起",
          data: orderData
        };
      }

      if (status != 'ORDER') {
        order.SetStatus('HANGUP');
      }

      return order.Save(clientData, true);
    }
    /**
     * 结账接口
     * @param clientData
     * @param storeData
     * @returns {*}
     * @constructor
     */

  }, {
    key: "Checkout",
    value: function Checkout(clientData, storeData) {
      var order = storeData.order;
      var orderData = order.GetOrderData();
      var status = orderData.status;
      var partake = new Partake(orderData.orderLine, orderData.promotion.result, {
        memberId: "",
        orderId: orderData.ticketId,
        posId: service.SysData[clientData.store_id].pos_id
      }); //  GetOrderDb(clientData.store_id).SaveOrderSku(partake)

      var lineData = orderData.orderLine || [];
      var isP = !!lineData.length || orderData.tianmao && !!orderData.tianmao.length;

      if (!isP) {
        return {
          status_code: 1,
          code: "ERR_EMPTY_ORDER",
          description: "空订单不可以结账",
          data: orderData,
          i18n: 'emptyOrdersCannotBePayment'
        };
      } // todo 暂时去掉结账检查是否已经下单
      // if (!SysData[clientData.store_id].sysConfig.showSeat.value) {
      //     return this.DownOrder(clientData, storeData, false).then(res => {
      //         if (res.status_code == 0) {
      //             order.SetMainStatus('PAYMENT');
      //             order.SetStatus('CHECKOUT');
      //             return order.Save(clientData);
      //         }
      //         return res;
      //     })
      // }
      // if (status != 'ORDER') {
      //     return { status_code: 1, code: "ERR_STATUS", description: "当前状态不可以结账", data: orderData };
      // }
      // //检查有没有商品没下单的
      // for (let i in lineData) {
      //     let o = lineData[i];
      //     if (!o.status) {
      //         return { status_code: 1, code: "ERR_EMPTY_STATUS", description: "商品状态不可以为空，请先下单", data: orderData };
      //     }
      // }


      return hook.call('order.DownOrder', {
        tag: "Checkout",
        func: this.DownOrder,
        args: [clientData, storeData, false]
      }).then(function (res) {
        // order.SetMainStatus('PAYMENT');
        // order.SetStatus('CHECKOUT');
        if (orderData.mainStatus != 'PAYMENT') {
          order.SetMainStatus('PAYMENT');
          order.SetStatus('CHECKOUT');
        }

        return order.Save(clientData).then(function (res) {
          return {
            status_code: 0,
            data: {}
          };
        });
      });
    }
    /*
     退菜（价格变0，订单行保留，厨打，可多个，状态,原因）
     转菜（厨打，可多个，状态，原因）
     免菜（价格0，订单行保留，状态，多个，原因）
     改价
     */
    //转菜

  }, {
    key: "Turndish",
    value: function Turndish(clientData) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      data = _objectSpread$6({
        from: "",
        to: "",
        index: 0,
        qty: 1,
        code: "",
        info: ""
      }, data);
      var ticketId = data.from;

      if (ticketId) {
        return GetOrderDb(clientData.store_id).GetOrder(ticketId).then(function (order) {
          if (order) {
            return new service.OrderIndex(order).Turndish(clientData, data);
          }

          return {
            status_code: 1,
            code: "ERR_NOT_ORDER",
            description: "订单不存在，转菜失败"
          };
        });
      }

      return {
        status_code: 1,
        code: "ERR_NOT_TICKET_ID",
        description: "参数错误，转菜失败"
      };
    }
    /*    //转桌  (转桌不是订单，已经在代理完成)
     Turnorder(clientData, storeData, data = {}) {
      }*/
    //退菜

  }, {
    key: "Retreat",
    value: function Retreat(clientData, storeData) {
      var obj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this._operationOrder(clientData, storeData, _objectSpread$6(_objectSpread$6({}, obj), {}, {
        status: "RETREAT"
      }));
    } //免菜

  }, {
    key: "Freedish",
    value: function Freedish(clientData, storeData) {
      var obj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this._operationOrder(clientData, storeData, _objectSpread$6(_objectSpread$6({}, obj), {}, {
        status: "FREEDISH"
      }));
    }
  }, {
    key: "_operationOrder",
    value: function _operationOrder(clientData, storeData) {
      var obj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var isErr = false,
          isNotOrder = false;
      obj = _objectSpread$6({
        /*index: 0,*/
        qty: 1,
        code: "",
        info: ""
      }, obj);
      obj.qty = parseInt(obj.qty) || 1;
      var order = storeData.order;
      var orderData = order.GetOrderData();
      var indexArr = obj.index;

      service.lodash.forOwn(indexArr, function (value, key) {
        if (value) {
          var goods = orderData.orderLine[key];

          if (goods) {
            if (goods.status && goods.status != 'INIT') {
              if (goods.qty > obj.qty) {
                goods.AddQty(-1 * obj.qty);

                var _o = JSON.parse(JSON.stringify(goods));

                _o.qty = obj.qty;
                orderData.AddOrderObj(_o);
                goods = orderData.orderLine[orderData.orderLine.length - 1];
              }

              goods.SetRecord(_objectSpread$6({
                ticketFrom: orderData.ticketId,
                tableFrom: orderData.tableId
              }, obj));
              goods.SetGroess(0, true);
              goods.customDiscountAmount = 0; // goods.topping = goods.topping.map(o=>{
              //     o.SetGroess(0, true);
              //     //o.qty = 0
              //     o.customDiscountAmount = 0
              //     return o
              // })

              orderData.isPrint = false;
              orderData.Calculator();

              if (obj.status == "RETREAT") {
                var store_id = clientData.store_id,
                    localIp = clientData.localIp;
                var postData = {
                  orderType: 'pos',
                  orderId: orderData.ticketId,
                  localIp: localIp,
                  printDiff: true
                };

                if (!window.globalHiposConfig.payKitchenPrint) {
                  try {
                    service.Printer.cookStickers(store_id, postData);
                  } catch (e) {
                    console.log('打印失败');
                  }
                } // !window.globalHiposConfig.payKitchenPrint && Print.Kitchen(orderData, clientData);

              }
            } else {
              isNotOrder = true;
            }
          } else {
            isErr = true;
          }
        }
      });

      if (isErr) {
        return {
          status_code: 1,
          code: "EMPTY_ORDER",
          description: "订单不存在"
        };
      } else {
        if (isNotOrder) {
          return {
            status_code: 1,
            code: "EMPTY_STATUS_ORDER",
            description: "还没下单的菜不用退"
          };
        } else {
          return order.Save(clientData, false);
        }
      }
    }
    /**
     * 修改售价
     * @param clientData
     * @param storeData
     * @param index
     * @param value
     * @returns {*}
     * @constructor
     */

  }, {
    key: "SetGroess",
    value: function () {
      var _SetGroess = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee35(clientData, storeData, index, value) {
        var order;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee35$(_context35) {
          while (1) {
            switch (_context35.prev = _context35.next) {
              case 0:
                order = storeData.order;

                if (!order.SetGroess(index, value)) {
                  _context35.next = 7;
                  break;
                }

                _context35.next = 4;
                return order.Save(clientData);

              case 4:
                return _context35.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 7:
                return _context35.abrupt("return", {
                  status_code: 1,
                  code: "ERR_SET_GROESS",
                  description: "该商品无改价权限"
                });

              case 8:
              case "end":
                return _context35.stop();
            }
          }
        }, _callee35);
      }));

      function SetGroess(_x121, _x122, _x123, _x124) {
        return _SetGroess.apply(this, arguments);
      }

      return SetGroess;
    }()
    /**
     * 服务费
     * @param clientData
     * @param storeData
     * @param value
     * @returns {{}}
     * @constructor
     */

  }, {
    key: "SetServiceFee",
    value: function () {
      var _SetServiceFee = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee36(clientData, storeData) {
        var data,
            order,
            _args36 = arguments;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee36$(_context36) {
          while (1) {
            switch (_context36.prev = _context36.next) {
              case 0:
                data = _args36.length > 2 && _args36[2] !== undefined ? _args36[2] : {};
                order = storeData.order;
                data = _objectSpread$6({
                  id: 0,
                  value: 0,
                  name: ""
                }, data);

                if (!order.SetServiceFee(data)) {
                  _context36.next = 7;
                  break;
                }

                _context36.next = 6;
                return order.Save(clientData);

              case 6:
                return _context36.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 7:
                return _context36.abrupt("return", {
                  status_code: 1,
                  code: "ERR_SET_SERVICE_FEE",
                  description: "服务费操作失败"
                });

              case 8:
              case "end":
                return _context36.stop();
            }
          }
        }, _callee36);
      }));

      function SetServiceFee(_x125, _x126) {
        return _SetServiceFee.apply(this, arguments);
      }

      return SetServiceFee;
    }()
    /**
     * 更新促销参数
     * @param clientData
     * @param storeData
     * @param data
     * @returns {*}
     * @constructor
     */

  }, {
    key: "SetPromotionParam",
    value: function SetPromotionParam(clientData, storeData, data) {
      var order = storeData.order;
      var orderData = order.GetOrderData();
      orderData.SetPromotionParam(data); // 判断是否有插队券

      var highPriority = false;
      var promotions = orderData.promotion.result;

      if (promotions && promotions.length > 0) {
        var res = service.lodash.findIndex(promotions, function (item) {
          return item.promotion_code === "100002";
        });

        highPriority = res > -1 ? true : false;
      }

      if (orderData === null || orderData === void 0 ? void 0 : orderData.coupons) {
        var couponRes = service.lodash.findIndex(orderData.coupons, function (item) {
          return item.code === '4';
        });

        highPriority = highPriority || couponRes > -1 ? true : false;
      }

      orderData.SetHighPriority(highPriority);
      return order.Save(clientData, false);
    } //计算税

  }, {
    key: "TaxCalculate",
    value: function TaxCalculate(clientData, storeData) {
      var order = storeData.order;

      if (order.TaxCalculate()) {
        var _orderData = order.GetOrderData();

        return order.Save(_orderData).then(function () {
          return {
            status_code: 0,
            data: _orderData
          };
        });
      } else {
        return {
          status_code: 1,
          code: "ERR_TAX_CALCULATE",
          description: "税务计算失败"
        };
      }
    }
    /**
     * 从支付就绪回点餐状态
     * @param clientData
     * @param storeData
     * @param isClean
     * @returns {{status_code: number, code: string, description: string}}
     * @constructor
     */

  }, {
    key: "PaymentToOrder",
    value: function () {
      var _PaymentToOrder = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee37(clientData, storeData) {
        var isClean,
            order,
            orderData,
            isOrder,
            i,
            o,
            newPaymentId,
            _args37 = arguments;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee37$(_context37) {
          while (1) {
            switch (_context37.prev = _context37.next) {
              case 0:
                isClean = _args37.length > 2 && _args37[2] !== undefined ? _args37[2] : false;
                order = storeData.order; // // 修改isprint
                // this.GoToPrint(clientData, storeData, false)
                //     .then(res => {
                //         order = res.data
                //     })
                //     .catch(err => {
                //     })

                orderData = order.GetOrderData();

                if (!(orderData.mainStatus != 'PAYMENT' || orderData.type != 'SALE')) {
                  _context37.next = 5;
                  break;
                }

                return _context37.abrupt("return", {
                  status_code: 1,
                  code: "ERR_ORDER_NOT_PAYMENT",
                  description: "订单不在支付状态",
                  i18n: "orderIsNotInThePaymentStatus"
                });

              case 5:
                if (!(orderData.status != 'CHECKOUT')) {
                  _context37.next = 7;
                  break;
                }

                return _context37.abrupt("return", {
                  status_code: 1,
                  code: "ERR_ORDER_NOT_CHECKOUT",
                  description: "订单已经支付，不可以再继续点餐",
                  i18n: "orderHasBeenPaidAndCannotBeOrdered"
                });

              case 7:
                isOrder = false;
                _context37.t0 = service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.keys(orderData.orderLine);

              case 9:
                if ((_context37.t1 = _context37.t0()).done) {
                  _context37.next = 17;
                  break;
                }

                i = _context37.t1.value;
                o = orderData.orderLine[i];

                if (!(o.status == 'ORDER')) {
                  _context37.next = 15;
                  break;
                }

                isOrder = true;
                return _context37.abrupt("break", 17);

              case 15:
                _context37.next = 9;
                break;

              case 17:
                if (isOrder) {
                  order.SetStatus('ORDER');
                } else {
                  order.SetStatus("OPEN");
                }

                order.SetRounding(0);
                order.SetMainStatus('SERVING');
                _context37.next = 22;
                return this._getSequenceId();

              case 22:
                newPaymentId = _context37.sent;
                order.SetPaymentsId(newPaymentId);
                _context37.next = 26;
                return order.SetCoupons([]);

              case 26:
                if (!_context37.sent) {
                  _context37.next = 28;
                  break;
                }

                return _context37.abrupt("return", order.Save(clientData, isClean));

              case 28:
              case "end":
                return _context37.stop();
            }
          }
        }, _callee37, this);
      }));

      function PaymentToOrder(_x127, _x128) {
        return _PaymentToOrder.apply(this, arguments);
      }

      return PaymentToOrder;
    }()
  }, {
    key: "_getSequenceId",
    value: function () {
      var _getSequenceId2 = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee38() {
        var res, json;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee38$(_context38) {
          while (1) {
            switch (_context38.prev = _context38.next) {
              case 0:
                _context38.next = 2;
                return fetch("http://".concat(globalThis.domain, ":").concat(globalThis.httpPort, "/uuid"), {
                  headers: {
                    'user-agent': 'Mozilla/4.0 MDN Example',
                    'content-type': 'application/json'
                  }
                });

              case 2:
                res = _context38.sent;
                _context38.next = 5;
                return res.json();

              case 5:
                json = _context38.sent;
                return _context38.abrupt("return", String(json.data.id));

              case 7:
              case "end":
                return _context38.stop();
            }
          }
        }, _callee38);
      }));

      function _getSequenceId() {
        return _getSequenceId2.apply(this, arguments);
      }

      return _getSequenceId;
    }()
    /**
     * 强制结束订单
     * @param clientData
     * @param storeData
     * @param isClean
     * @returns {*}
     * @constructor
     */

  }, {
    key: "ForceEndOrder",
    value: function ForceEndOrder(clientData, storeData) {
      var isClean = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var order = storeData.order;
      var orderData = order.GetOrderData();

      if (orderData.mainStatus != 'PAYMENT' && orderData.mainStatus != 'PENDING' || orderData.status == 'CHECKOUT') {
        return {
          status_code: 1,
          code: "ERR_FORCE_END_ORDER",
          description: "当前状态不支付强制关闭订单"
        };
      }

      order.SetMainStatus('PENDING');
      order.SetStatus('FINISH'); //order.SetStatus('PAYERR');

      return order.Save(clientData, isClean).then(function (res) {
        if (res.status_code == 0) {
          if (orderData.tableId) {
            GetTsDb(clientData.store_id).close(orderData.ticketId).then(function (tres) {
              // 关桌发送监听
              // execClient('updateTable', { type: 'close' });
              return res;
            })["catch"](function (err) {
              if (err.status_code == 1) {
                if (err.code == 'ORDER_NOT_EXIST') {
                  return res;
                }

                return err;
              }

              return {
                status_code: 1,
                code: "ERR_CODE",
                description: "代码异常，未知错误",
                data: err
              };
            });
          }
        }

        return res;
      });
    }
    /**
     * 开发票
     * @param clientData
     * @param ticketId
     * @constructor
     */

  }, {
    key: "Invoice",
    value: function Invoice(clientData, ticketId) {
      return GetOrderDb(clientData.store_id).GetOrder(ticketId).then(function (res) {
        if (res) {
          if (res.mainStatus !== 'FINISH') {
            return {
              status_code: 1,
              code: "NOT_FINISH",
              description: "当前订单不是完成的订单，不允许开发票"
            };
          }

          res.isInvoice = true;
          return GetOrderDb(clientData.store_id).SaveOrder(res).then(function (res) {
            if (res.ok) {
              return {
                status_code: 0
              };
            }

            return {
              status_code: 1,
              code: "ERR_SEVE_ORDER",
              description: "保存订单失败"
            };
          });
        }

        return {
          status_code: 1,
          code: "ERR_OPEN_ORDER",
          description: "打开订单失败"
        };
      });
    }
    /**
     * 取消订单
     * @param clientData
     * @param storeData
     * @constructor
     */

  }, {
    key: "CancelPayment",
    value: function CancelPayment(clientData, storeData) {
      var msgData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
        code: "",
        info: ""
      };
      var payment$1 = storeData.payment,
          order = storeData.order;
      service.set(clientData);
      return payment.CancelPayment(order, clientData, msgData).then(function (res) {
        if (res.status_code == 0) {
          service.Store.Order(clientData).ResetPayment();

          var _orderData2 = order.GetOrderData(); // 删除现金甩尾促销
          // _.map(orderData.promotion.pay, (item, index) => {
          //     if(item && item.promotion_type && item.promotion_type == "ROUNDING") {
          //         orderData.promotion.pay.splice(index,1);
          //     }
          // })


          _orderData2.resultDiscountAmount = _orderData2.discountAmount;
          _orderData2.resultNetAmount = _orderData2.netAmount;
          _orderData2.bizCode = ""; // 存取消支付原因

          res.data.refundMsg = msgData || null; //orderData.bizCode == "SHANDE" && (orderData.bizCode = "");
          // 如果是下单厨打则触发退厨打 取消支付后的订单厨打

          var store_id = clientData.store_id,
              localIp = clientData.localIp;
          var postData = {
            orderType: 'pos',
            orderId: _orderData2.ticketId,
            localIp: localIp,
            printDiff: true
          };

          if (!window.globalHiposConfig.payKitchenPrint) {
            try {
              service.Printer.cookStickers(store_id, postData);
            } catch (e) {
              console.log('打印失败');
            }
          } // !window.globalHiposConfig.payKitchenPrint && Print.Kitchen(orderData, clientData);


          return order.Save(clientData).then(function () {
            return res;
          });
        }

        return res;
      })["catch"](function (err) {
        if (err.status_code == 1) {
          return err;
        }

        return {
          status_code: 1,
          code: 'HTTP_ERR',
          description: "网络或服务器错误，访问远程接口异常,请稍后重试"
        };
      });
    } //支付部分的取消订单

  }, {
    key: "CancelOrder",
    value: function CancelOrder(clientData, storeData) {
      var order = storeData.order;
      service.set(clientData);
      return payment.CancelPayment(order, clientData).then(function (res) {
        if (res.status_code == 0) {
          var _orderData3 = order.GetOrderData();

          _orderData3.mainStatus = 'CANCEL';
          _orderData3.status = 'CANCEL';
          return GetOrderDb(clientData.store_id).SaveOrder(_orderData3).then(function () {
            return {
              status_code: 0
            };
          });
        }

        return res;
      }) //
      ["catch"](function (err) {
        if (err.status_code == 1) {
          return err;
        }

        return {
          status_code: 1,
          code: 'HTTP_ERR',
          description: "请求接口异常,请检查网络是否连接"
        };
      });
    }
    /**
     * 会员赋值
     * @param value
     * @constructor
     */

  }, {
    key: "SetMembers",
    value: function SetMembers(clientData, storeData) {
      var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var order = storeData.order;

      if (order.SetMembers(value)) {
        return order.Save(clientData);
      }

      return {
        status_code: 1,
        code: "ERR_SET_MEMBERS",
        description: "会员赋值失败"
      };
    }
    /**
     * 卡券赋值
     * @param value
     * @constructor
     */

  }, {
    key: "SetCoupons",
    value: function () {
      var _SetCoupons = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee39(clientData, storeData) {
        var value,
            order,
            _args39 = arguments;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee39$(_context39) {
          while (1) {
            switch (_context39.prev = _context39.next) {
              case 0:
                value = _args39.length > 2 && _args39[2] !== undefined ? _args39[2] : [];
                order = storeData.order;
                _context39.next = 4;
                return order.SetCoupons(value);

              case 4:
                if (!_context39.sent) {
                  _context39.next = 6;
                  break;
                }

                return _context39.abrupt("return", order.Save(clientData));

              case 6:
                return _context39.abrupt("return", {
                  status_code: 1,
                  code: "ERR_SET_MEMBERS",
                  description: "会员赋值失败"
                });

              case 7:
              case "end":
                return _context39.stop();
            }
          }
        }, _callee39);
      }));

      function SetCoupons(_x129, _x130) {
        return _SetCoupons.apply(this, arguments);
      }

      return SetCoupons;
    }()
    /**
     * 追加会员
     * @constructor
     */

  }, {
    key: "PushMembers",
    value: function PushMembers(clientData, storeData) {
      var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var order = storeData.order;

      if (order.PushMembers(value)) {
        return order.Save(clientData);
      }

      return {
        status_code: 1,
        code: "ERR_PUSH_MEMBERS",
        description: "会员追加赋值失败"
      };
    }
    /**
     * 删除会员
     * @param index
     * @constructor
     */

  }, {
    key: "RemoveMembers",
    value: function RemoveMembers(clientData, storeData, index) {
      var order = storeData.order;

      if (order.RemoveMembers(index)) {
        return order.Save(clientData);
      }

      return {
        status_code: 1,
        code: "ERR_REMOVE_MEMBERS",
        description: "删除会员失败",
        i18n: "deleteMemberFailed"
      };
    }
    /**
     * 获取会员
     * @param index
     * @returns {*}
     * @constructor
     */

  }, {
    key: "GetMembers",
    value: function GetMembers(clientData, storeData, index) {
      var order = storeData.order;
      var data = order.GetMembers(index) || [];

      if (data.length) {
        return {
          status_code: 0,
          data: data
        };
      }

      return {
        status_code: 1,
        code: "ERR_GET_MEMBERS",
        description: "暂无会员信息",
        i18n: 'noMemberInformation'
      };
    }
    /**
     * 抹金额处理赋值
     * @param clientData
     * @param storeData
     * @param data
     * @returns {*}
     * @constructor
     */

  }, {
    key: "RemoveZero",
    value: function RemoveZero(clientData, storeData) {
      var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
        type: 'wipe',
        unit: 'fen'
      };
      var order = storeData.order;
      var orderData = order.GetOrderData();

      if (orderData.isPay) {
        return {
          status_code: 1,
          code: "ERR_SET_OVERFLOW_PAYMENT",
          description: "已经支付过的订单不可以再操作溢出金额"
        };
      }

      if (order.SetRemoveZeroAmount(data)) {
        return order.Save(clientData);
      }

      return {
        status_code: 1,
        code: "ERR_SET_OVERFLOW_PARAM",
        description: "参数出错，抹零金额赋值失败"
      };
    }
  }, {
    key: "ExportOrders",
    value: function ExportOrders(client, opts) {
      return GetOrderDb(client.store_id).ExportOrders(opts).then(function (data) {
        if (!data) {
          return {
            status_code: 1,
            code: 'EXPORT_ERROR',
            description: '没有订单，不能导出！'
          };
        }

        return {
          status_code: 0,
          data: data
        };
      })["catch"](function (e) {
        return {
          status_code: 1,
          code: 'EXPORT_ERROR',
          description: e
        };
      });
    }
  }, {
    key: "PrintSecondScreen",
    value: function PrintSecondScreen(client, storeData, data) {
      var order = storeData.order;
      var p = Promise.resolve(data);

      if (!data) {
        p = Promise.resolve(order.GetOrderData(true));
      }

      return p.then(function (data) {
        var ip = client && client.ip || "";
        var xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n            <output>\n                <display>\n                    <line>\n                        <text length=\"10\" align=\"left\">Total:</text><text length=\"10\" align=\"right\">".concat(data.netAmount, "</text>\n                    </line>\n                    <line>\n                        <text length=\"10\" align=\"left\">Change:</text><text length=\"10\" align=\"right\">").concat(data.qty, "</text>\n                    </line>\n                </display>\n            </output>");
        return service.Print.Exec(xml, '', client, 'second');
      });
    }
    /**
     * 订单解锁
     */

  }, {
    key: "Unlock",
    value: function Unlock(clientData, ticketId) {
      return GetOrderDb(clientData.store_id).GetOrder(ticketId).then(function (orderData) {
        if (!orderData) {
          return {
            status_code: 1,
            code: "ORDER_NON_EXISTENT",
            description: "订单不存在"
          };
        }

        if (orderData.lock != '') {
          if (orderData.lock == clientData.clientId && new Date().getTime() - orderData.updatedTime < window.globalHiposConfig.orderTimeout * 60 * 1000) {
            return {
              status_code: 1,
              code: "ORDER_SELF_LOCK",
              description: "您正在操作这个订单，不允许解锁",
              data: orderData.lock
            };
          }

          return fetch('http://localhost:10092/connz', {
            method: 'get',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            }
          }).then(function (res) {
            return res.json();
          }).then(function (res) {
            if (res.status_code == 1) {
              return res;
            }

            var cid = orderData.lock;
            var connections = res.data && res.data.connections;

            if (!connections) {
              return Promise.reject(res);
            }

            for (var i in connections) {
              var o = connections[i];

              if (o.name) {
                var _client = JSON.parse(o.name);

                if (cid == _client.clientId) {
                  return {
                    status_code: 1,
                    code: "UNLOCK_FAIL",
                    description: "订单被其他设备使用，解锁失败"
                  };
                }
              }
            }

            var local = service.Store.GetLocal(cid);

            if (local && local.order) {
              var order = local.order;

              var _data = order.GetOrderData();

              _data.lock = "";
              return order.Save(clientData).then(function (data) {
                service.Store.RemoveLocal(cid);
                return {
                  status_code: 0
                };
              });
            }

            orderData.lock = '';
            return GetOrderDb(clientData.store_id).SaveOrder(orderData).then(function (r) {
              return {
                status_code: 0
              };
            });
          })["catch"](function (err) {
            return {
              status_code: 1,
              code: "CONNZ_ERR",
              description: "解锁失败，检查在线用户异常",
              data: err
            };
          });
        }

        return {
          status_code: 0
        };
      });
    } //更新主档数据

  }, {
    key: "UpdateData",
    value: function UpdateData() {
      return fetch('http://localhost:10092/connz', {
        method: 'get',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      }).then(function (res) {
        return res.json();
      }).then(function (res) {
        if (res.status_code == 1) {
          return res;
        }

        var connections = res.data && res.data.connections;

        if (!connections) {
          return Promise.reject(res);
        }

        for (var i in connections) {
          var o = connections[i];

          if (o.name) {
            var _client2 = JSON.parse(o.name);

            var local = service.Store.GetLocal(_client2.clientId);

            if (local && local.order) {
              return {
                status_code: 1,
                code: "UPDATE_DATA_WATING",
                description: "有设备在操作订单中，无法更新主档"
              };
            }
          }
        }

        service.execClient('getNewAge', 'service'); //更新主档数据

        GetSysDb$1(client.store_id).loadMetaData().then(function () {
          sessionStorage.setItem('autoUpdate', 1);
          location.reload(true);
        })["catch"](function (e) {
          console.log(e);
          return {
            code: "LOAD_META_DATA_ERR",
            description: "摘取主档异常",
            status_code: 1,
            data: e
          };
        });
        return {
          status_code: 0
        };
      })["catch"](function (err) {
        return {
          status_code: 1,
          code: "UPDATE_DATA_ERR",
          description: "更新主档，检查在线用户异常",
          data: err
        };
      });
    } //添加天猫卡券

  }, {
    key: "AddTianmao",
    value: function () {
      var _AddTianmao = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee40(clientData, storeData, obj) {
        var order;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee40$(_context40) {
          while (1) {
            switch (_context40.prev = _context40.next) {
              case 0:
                order = storeData.order;
                order.AddTianmao(clientData.store_id, obj);
                _context40.next = 4;
                return order.Save(clientData);

              case 4:
                return _context40.abrupt("return", order.GetOrderData());

              case 5:
              case "end":
                return _context40.stop();
            }
          }
        }, _callee40);
      }));

      function AddTianmao(_x131, _x132, _x133) {
        return _AddTianmao.apply(this, arguments);
      }

      return AddTianmao;
    }() //删除天猫卡券

  }, {
    key: "DelTianmao",
    value: function () {
      var _DelTianmao = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee41(clientData, storeData, index) {
        var order;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee41$(_context41) {
          while (1) {
            switch (_context41.prev = _context41.next) {
              case 0:
                order = storeData.order;
                order.DelTianmao(index);
                _context41.next = 4;
                return order.Save(clientData);

              case 4:
                return _context41.abrupt("return", order.GetOrderData());

              case 5:
              case "end":
                return _context41.stop();
            }
          }
        }, _callee41);
      }));

      function DelTianmao(_x134, _x135, _x136) {
        return _DelTianmao.apply(this, arguments);
      }

      return DelTianmao;
    }()
  }, {
    key: "CustomDiscount",
    value: function () {
      var _CustomDiscount = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee42(clientData, storeData, index, value) {
        var type,
            order,
            _args42 = arguments;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee42$(_context42) {
          while (1) {
            switch (_context42.prev = _context42.next) {
              case 0:
                type = _args42.length > 4 && _args42[4] !== undefined ? _args42[4] : 'radio';
                order = storeData.order;

                if (!order.CustomDiscount(index, value, type)) {
                  _context42.next = 6;
                  break;
                }

                _context42.next = 5;
                return order.Save(clientData);

              case 5:
                return _context42.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 6:
                return _context42.abrupt("return", {
                  status_code: 1,
                  description: '商品不存在',
                  code: 'GOOD_NOT_FOUND'
                });

              case 7:
              case "end":
                return _context42.stop();
            }
          }
        }, _callee42);
      }));

      function CustomDiscount(_x137, _x138, _x139, _x140) {
        return _CustomDiscount.apply(this, arguments);
      }

      return CustomDiscount;
    }() //修改用餐人数

  }, {
    key: "ChangePeopleNumber",
    value: function () {
      var _ChangePeopleNumber = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee43(clientData, storeData, peopleNumber) {
        var order;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee43$(_context43) {
          while (1) {
            switch (_context43.prev = _context43.next) {
              case 0:
                order = storeData.order;
                order.ChangePeopleNumber(peopleNumber);
                return _context43.abrupt("return", order.Save(clientData));

              case 3:
              case "end":
                return _context43.stop();
            }
          }
        }, _callee43);
      }));

      function ChangePeopleNumber(_x141, _x142, _x143) {
        return _ChangePeopleNumber.apply(this, arguments);
      }

      return ChangePeopleNumber;
    }() //修改isPrint

  }, {
    key: "GoToPrint",
    value: function () {
      var _GoToPrint = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee44(clientData, storeData, isPrint) {
        var order;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee44$(_context44) {
          while (1) {
            switch (_context44.prev = _context44.next) {
              case 0:
                order = storeData.order;
                order.GoToPrint(isPrint);
                _context44.next = 4;
                return order.Save(clientData);

              case 4:
                return _context44.abrupt("return", order.GetOrderData());

              case 5:
              case "end":
                return _context44.stop();
            }
          }
        }, _callee44);
      }));

      function GoToPrint(_x144, _x145, _x146) {
        return _GoToPrint.apply(this, arguments);
      }

      return GoToPrint;
    }() //添加备注

  }, {
    key: "SetMessage",
    value: function () {
      var _SetMessage = service.asyncToGenerator( /*#__PURE__*/service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.mark(function _callee45(clientData, storeData, index, message) {
        var order;
        return service.C__Users____Documents_hipos_service_node_modules__babel_runtime_regenerator.wrap(function _callee45$(_context45) {
          while (1) {
            switch (_context45.prev = _context45.next) {
              case 0:
                order = storeData.order;

                if (!order.SetMessage(index, message)) {
                  _context45.next = 5;
                  break;
                }

                _context45.next = 4;
                return order.Save(clientData);

              case 4:
                return _context45.abrupt("return", {
                  status_code: 0,
                  data: order.GetOrderData(true)
                });

              case 5:
                return _context45.abrupt("return", {
                  status_code: 1,
                  code: "ERR_SET_MESSAGE",
                  description: "商品添加备注失败"
                });

              case 6:
              case "end":
                return _context45.stop();
            }
          }
        }, _callee45);
      }));

      function SetMessage(_x147, _x148, _x149, _x150) {
        return _SetMessage.apply(this, arguments);
      }

      return SetMessage;
    }() //扫码搜商品

  }, {
    key: "GetProductByBarCode",
    value: function GetProductByBarCode(client, value) {
      return GetOrderDb(client.store_id).GetProductByBarCode(value).then(function (data) {
        if (!data) {
          return {
            status_code: 1,
            code: 'GET_BAR_CODE',
            description: '找不到该商品'
          };
        }

        return {
          status_code: 0,
          data: data
        };
      })["catch"](function (e) {
        return {
          status_code: 1,
          code: 'GET_BAR_CODE',
          description: e
        };
      });
    } //现金支付甩尾

  }, {
    key: "SetRounding",
    value: function SetRounding(clientData, storeData) {
      var order = storeData.order;
      var orderData = order.GetOrderData();
      var payTailConfig = service.SysData[clientData.store_id].payTailConfig; // 剩余支付金额

      var restAmount = orderData.restAmount; // 判断第二位小数

      var pointCount = service.lodash.split(restAmount, '.');

      pointCount = pointCount[1];

      if (pointCount) {
        restAmount = String(restAmount);
        var end,
            divCount = 100,
            roundCount,
            count = 1; // mode: "MF"抹分，"MJ"抹角

        if (payTailConfig.mode == "MF") {
          end = pointCount.substr(1, 1) || 0;
          roundCount = pointCount.substr(1, 1) || 0; // divCount = 100
        } else if (payTailConfig.mode == "MJ") {
          end = pointCount.substr(0, 1) || 0;

          if (pointCount.length == 1) {
            roundCount = pointCount * 10 || 0;
          } else {
            roundCount = pointCount || 0;
          }

          count = 10; // divCount = 100
        }

        var rounding;

        switch (payTailConfig.mode_detail) {
          // 三段式
          case "THREEPART":
            // 尾数为0-2，舍去；尾数为3-7，取5；尾数为8-9
            if (end < 3) {
              rounding = service.decimal.div(service.decimal.sub(roundCount, 0 * count), divCount).toDecimalPlaces(2, 4).toNumber();
            } else if (end > 2 && end < 8) {
              rounding = service.decimal.div(service.decimal.sub(roundCount, 5 * count), divCount).toDecimalPlaces(2, 4).toNumber();
            } else if (end > 7 && end < 10) {
              rounding = service.decimal.div(service.decimal.sub(roundCount, 10 * count), divCount).toDecimalPlaces(2, 4).toNumber();
            }

            break;
          // 四舍五入

          case "ROUNDING":
            if (end < 5) {
              rounding = service.decimal.div(roundCount, divCount).toDecimalPlaces(2, 4).toNumber();
            } else {
              rounding = service.decimal.div(service.decimal.sub(roundCount, 10 * count), divCount).toDecimalPlaces(2, 4).toNumber();
            }

            break;
          // 全进

          case "UP":
            rounding = service.decimal.div(service.decimal.sub(roundCount, 10 * count), divCount).toDecimalPlaces(2, 4).toNumber();
            break;
          // 全舍

          case "DOWN":
            rounding = service.decimal.div(roundCount, divCount).toDecimalPlaces(2, 4).toNumber();
            break;
        }

        if (order.SetRounding(rounding)) {
          return order.Save(clientData);
        }
      } else {
        return {
          status_code: 0,
          data: orderData
        };
      }
    } //清楚rounding

  }, {
    key: "MoveRounding",
    value: function MoveRounding(clientData, storeData) {
      var order = storeData.order;
      var orderData = order.GetOrderData();

      if (order.SetRounding(0)) {
        return order.Save(clientData);
      } else {
        return {
          status_code: 0,
          data: orderData
        };
      }
    }
  }]);

  return OrderService;
}()) || _class$1);

var DBError = {
  FindError: {
    code: 'FIND_ERROR',
    description: '查询错误',
    status_code: 1
  },
  UpdateError: {
    code: 'UPDATE_ERROR',
    description: '更新错误',
    status_code: 1
  },
  UserError: {
    code: 'USER_ERROR',
    description: '用户名或密码错误',
    status_code: 1
  }
};
var SysError = {
  InteraceError: {
    code: 'INTERFACE_ERROR',
    description: '网络连接不上或服务器异常,请稍后重试',
    status_code: 1
  },
  RefundError: {
    code: 'REFUND_ERROR',
    description: '退款失败',
    status_code: 1
  },
  RpcError: {
    code: 'RPC_ERROR',
    description: 'rpc接口错误',
    status_code: 1
  }
};

var Func = new ( /*#__PURE__*/function () {
  function _class() {
    service.classCallCheck(this, _class);
  }

  service.createClass(_class, [{
    key: "takeout2Order",
    value: function takeout2Order(data) {

      for (var i in data.lines) {
        var g = data.lines[i]; //console.log('菜', g, ">>>>>>>", new Goods(g.key_id, "", "product"))
      }

      var order = new service.order({
        ticketId: data.ticket_id
      }); //console.log('转换之后', order);

      return order;
    }
  }]);

  return _class;
}())();

function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$7(Object(source), true).forEach(function (key) { service.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var getwayOnData = [];

var On = function On(name, func) {
  if (typeof name == 'function') {
    getwayOnData.push({
      name: "",
      func: name
    });
  } else if (service._typeof_1(name) == 'object') {
    for (var i in name) {
      getwayOnData.push({
        name: name[i],
        func: func
      });
    }
  } else {
    getwayOnData.push({
      name: name,
      func: func
    });
  }
}; //给gateway发消息


var Push = function Push(p, e, d) {
  var obj = {
    command: '',
    //'takeaway.order.getallorder',
    contents: d || [],
    type: e ? e : 'order_takeaway'
  };

  var newData = _objectSpread$7(_objectSpread$7({}, obj), p);

  if (!newData.command) {
    // console.log('command不允许为空！！！！')
    return service.bluebird.reject({
      status_code: 1,
      description: 'command不允许为空',
      code: "COMMAND_EMPTY"
    });
  }

  return new service.bluebird(function (resolve) {
    // console.log(`gateway.send.${newData.store_id}`)
    service.NatsDriver.instance().requestOne("gateway.send.".concat(newData.store_id), JSON.stringify(newData), null, 6000, resolve);
  }).then(function (res) {
    //console.log('向gateway发送消息返回结果', res);
    return res;
  })["catch"](function (err) {
    console.log('向gateway发送消息返回结果异常', err);
  });
};

var PushNew = function PushNew() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    command: '',
    contents: [],
    event: '',
    type: ''
  };
  data.contents = data.contents || [];
  return new service.bluebird(function (resolve) {
    service.NatsDriver.instance().requestOne('gatewayService', JSON.stringify(data), null, 6000, resolve);
  }).then(function (res) {
    //console.log('向gateway发送消息返回结果', res);
    return res;
  });
}; //推消息到客户端

service.NatsDriver.instance().subscribe('gateway', function (data, reply) {
  try {
    data = JSON.parse(data); //console.log('接收到gateway消息：', data);

    for (var i in getwayOnData) {
      var o = getwayOnData[i];

      if (!o.name || o.name == data.command) {
        o.func(data);
      }
    }
  } catch (err) {
    console.log('js服务订阅gateway消息异常' + JSON.stringify(err));
  }
});
var mockData = {
  "action": "",
  "busDate": "2018-03-13",
  "couponinfolist": "",
  "discTotal": 6,
  "discs": "",
  "endTime": "",
  "extOrder": "",
  "extType": "",
  "fired": [{
    "discount": 0.06,
    "name": "在线支付立减优惠",
    "promotion_code": "",
    "promotion_id": "",
    "source": {},
    "type": ""
  }],
  "grantTotal": 67,
  "isVoid": 0,
  "lines": [{
    "accAmt": "",
    "accies": [],
    "amt": 31,
    "barcode": "02020100060",
    "code": "02020100060",
    "delete": "",
    "disc": 0,
    "discs": [],
    "key_id": "4008173822317490177",
    "name": "芒+白+黑",
    "optaccAmt": "",
    "opts": [],
    "orig": "",
    "price": 31,
    "qty": 1,
    "sale_type": "PRODUCT",
    "seq_id": 1,
    "status": "",
    "tax": ""
  }, {
    "accAmt": "",
    "accies": [],
    "amt": 36,
    "barcode": "",
    "code": "02020600190",
    "delete": "",
    "disc": 0,
    "discs": [],
    "key_id": "4008174225507545089",
    "name": "雪山杨枝甘露(香草)",
    "optaccAmt": "",
    "opts": [],
    "orig": "",
    "price": 36,
    "qty": 1,
    "sale_type": "PRODUCT",
    "seq_id": 2,
    "status": "",
    "tax": ""
  }],
  "member": "",
  "model": 2,
  "netTotal": 57.6,
  "o_ticket_id": "",
  "pay": "",
  "payLines": [],
  "payTotal": 66,
  "peoples": "",
  "points": "",
  "qas": "",
  "qty": 2,
  "saleid": 1703369497,
  "seat": "",
  "startTime": "2018-03-13 15:51:54",
  "storeInfo": {
    "address": "上海来福士广场",
    "close_date": "9999-12-31 00:00:00",
    "code": " MJSH093",
    "context": {
      "allow_diary_time": "",
      "auto_diary_time": "04:00:00",
      "crm_login": "admin",
      "crm_pwd": "admin",
      "device_no": "",
      "main_card_no": "213100000018",
      "main_card_pwd": "888888",
      "mer_no": "2131",
      "terminal_no": "21319999"
    },
    "created": "2017-09-20 21:33:46",
    "created_by": "4817149127632928799",
    "currency": "CNY",
    "extend_code": {
      "ex_code": "MJSH093",
      "ex_id": "AF1234",
      "takeaway_honeymoon_id": "2130000221",
      "us_id": "564738"
    },
    "id": "4008214586045034497",
    "name": "上海来福士广场二店",
    "open_date": "2017-10-12 00:00:00",
    "request_id": null,
    "status": "OPENED",
    "store_type": "DRS",
    "table_required": false,
    "updated": "2018-03-13 17:48:34",
    "updated_by": "4010225805275607041"
  },
  "subTotal": 72,
  "sub_channel": {
    "code": "elm",
    "name": "饿了么外卖"
  },
  "takeaway_info": {
    "cancel_time": "",
    "complete_time": "",
    "confirm_time": "",
    "consignee": "刘依君(女士)",
    "day_seq": "5",
    "delivery_poi_address": "淮海中华大厦人民路885号905室",
    "delivery_time": "",
    "delivery_type": 1,
    "description": "",
    "invoice_title": "",
    "last_command": "",
    "logs": [{
      "msg_type": "order_new",
      "time": "2018-03-14 17:21:01"
    }],
    "order_status": 8,
    "order_time": "2018-03-13 15:51:54",
    "package_fee": 0,
    "phone_list": ["13651635327"],
    "pos_status": "unprocessed",
    "refund_message": "",
    "refund_status": "",
    "refund_time": "",
    "send_fee": 5,
    "source": "eleme",
    "source_order_id": "3020506074133053453",
    "state": "",
    "sub_state": "",
    "tableware_num": 0,
    "tp": "honeymoon",
    "tp_order_id": 1703369497,
    "waiting_time": 0
  },
  "taxTotal": 3,
  "ticketNo": "",
  "ticket_id": "1f274a4589d24043836a613843a5c549",
  "type": "",
  "use_promotion": "",
  "user": {},
  "voidTicket": ""
};

window.mockTakeaway = function () {
  console.log(Func.takeout2Order(mockData));
};

var GateWay = {
  Push: Push,
  On: On,
  PushNew: PushNew
};

var _dec$2, _class$2, _temp;

function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$8(Object(source), true).forEach(function (key) { service.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var GetSysDb$2 = service.DbProxy.GetSysDb,
    GetUserDb = service.DbProxy.GetUserDb,
    GetTicketDb$2 = service.DbProxy.GetTicketDb,
    GetKeyboardMainDb = service.DbProxy.GetKeyboardMainDb,
    GetKeyboardPaymentDb = service.DbProxy.GetKeyboardPaymentDb,
    GetKeyboardFuncDb = service.DbProxy.GetKeyboardFuncDb,
    GetKeyboardMealDb = service.DbProxy.GetKeyboardMealDb,
    GetKeyboardHomeDb = service.DbProxy.GetKeyboardHomeDb,
    GetPrinterTemplatesDb = service.DbProxy.GetPrinterTemplatesDb;
var SysService = (_dec$2 = mbus.Name('Sys'), _dec$2(_class$2 = (_temp = /*#__PURE__*/function () {
  function SysService() {
    var _this = this;

    service.classCallCheck(this, SysService);

    this.GetHeaderKeyboard = function () {
      return _this.API.post(_this.api_root, {
        body: {
          type: 'getKeyBoardFunc'
        }
      }).them(function (res) {
        return {
          status_code: 0,
          data: res
        };
      })["catch"](function (e) {
        return service.bluebird.resolve({
          status_code: 1,
          e: e
        });
      });
    };
  }

  service.createClass(SysService, [{
    key: "init",

    /**
     * 启动初始化
     * @param clientData
     * @returns {Promise}
     */
    value: function init(clientData) {
      var local = _objectSpread$8({}, service.Store.Local(clientData));

      if (clientData.sessionId != local.sessionId) {
        delete local.user;
      }

      if (!!service.SysData[clientData.store_id].err.length) {
        return {
          status_code: 1,
          code: "SYS_INIT_ERR",
          description: "主档数据缺失，不可以正常使用,请尝试重启程序",
          data: service.SysData[clientData.store_id].err
        };
      }

      if (service.SysData[clientData.store_id].pos_id) {
        //GateWay.Push();
        return {
          status_code: 0,
          data: {
            type: 'login',
            local: local
          }
        };
      }

      return {
        status_code: 1,
        code: "NOT_REGISTER",
        description: "还没激活",
        data: {
          type: 'register'
        }
      };
    } //激活注册

  }, {
    key: "register",
    value: function register(client, data) {
      return new service.bluebird(function (resolve, reject) {
        GetSysDb$2(client.store_id).GetMac().then(function (macs) {
          var mac = macs[0];
          Register({
            code: data.code,
            mac: mac,
            password: data.pass,
            client_id: '4043932734467928065',
            client_secret: 'f4971f04d87f4f018f35a3bab578095c'
          }).then(function (res) {
            if (res.status_code === 0) {
              service.bluebird.all([GetSysDb$2(client.store_id).SetRegister(res.payload), GetSysDb$2(client.store_id).SetStoreId(res.payload.store_id), GetSysDb$2(client.store_id).SetPosId(res.payload.id), GetSysDb$2(client.store_id).SetSaleTime(service.moment().format('YYYY-MM-DD'))]).then(function () {
                return GetSysDb$2(client.store_id).loadMetaData().then(function () {
                  return SysInit();
                })["catch"](function (e) {
                  console.log(e);
                  return {
                    code: "ERR_SYS_INIT",
                    description: "系统初始化异常",
                    status_code: 1,
                    data: e
                  };
                });
              }).then(function () {
                localStorage.ticketNo = "";
                resolve({
                  code: "SUCCESS",
                  status_code: 0
                });
              }, function (err) {
                resolve({
                  code: "PUT_DB_ANOMALY",
                  description: "写入数据库失败",
                  status_code: 1,
                  data: err
                });
              });
            } else {
              resolve(res);
            }
          }, function (err) {
            resolve({
              code: "NET_API_ANOMALY",
              description: "网络或服务器错误，访问远程接口异常,请稍后重试",
              status_code: 1
            });
          });
        })["catch"](function (e) {
          resolve({
            status_code: 1,
            code: 'DBError',
            description: e
          });
        });
      });
    }
    /**
     * 赋值客户当前打开的地址
     * @param clientData
     * @param url
     * @returns {*}
     * @constructor
     */

  }, {
    key: "SetUrl",
    value: function SetUrl(clientData, url) {
      return {
        status_code: 0,
        data: service.Store.SetUrl(clientData, url)
      };
    }
    /**
     * 获取门店信息
     * @constructor
     */

  }, {
    key: "GetStoreInfo",
    value: function GetStoreInfo(client) {
      return GetSysDb$2(client.store_id).GetStoreInfo().then(function (res) {
        if (res) {
          delete res.relation;
          delete res._dev;
          delete res._id;
        }

        return {
          status_code: 0,
          data: res
        };
      }, function (err) {
        console.log('门店错误', err);
        return {
          status_code: 1,
          code: "FAIL_READ_DB",
          description: "读数据库失败",
          data: {}
        };
      });
    }
    /**
     * 配置信息
     * @constructor
     */

  }, {
    key: "GetPosConfig",
    value: function GetPosConfig(client) {
      return GetSysDb$2(client.store_id).GetPosConfig().then(function (res) {
        if (res) {
          delete res.relation;
          delete res._dev;
          delete res._id; //固定键盘兼容

          if (res.keyboard_main && res.keyboard_main.dock && res.keyboard_main.dock.items) {
            res.keyboard_main.dock.items = res.keyboard_main.dock.items.map(function (o) {
              //if (typeof o.name == 'undefined') {
              return service.SysData[client.store_id].keyboardData[o.id]; // }
              //return o || {};
            });
          }
        }

        return {
          status_code: 0,
          data: res
        };
      }, function (err) {
        //console.log('配置错误', err)
        return {
          status_code: 1,
          code: "FAIL_READ_DB",
          description: "读数据库失败",
          data: {}
        };
      });
    }
    /**
    * 获取首页键盘
    * @constructor
    */

  }, {
    key: "GetHomeKeyboard",
    value: function GetHomeKeyboard(client) {
      return GetKeyboardHomeDb(client.store_id).GetKeyboard().then(function (res) {
        return {
          status_cdoe: 0,
          data: res || []
        };
      })["catch"](function (err) {
        return {
          status_code: 1,
          code: "FAIL_READ_DB",
          description: "首页键盘读数据库失败",
          data: err
        };
      });
    }
    /**
     * 获取主商品键盘
     * @constructor
     */

  }, {
    key: "GetMainKeyboard",
    value: function GetMainKeyboard(client, obj) {
      obj || (obj = {});

      var _root$isPage$pageSize = _objectSpread$8({
        root: false,
        isPage: true,
        pageSize: 10
      }, obj),
          root = _root$isPage$pageSize.root,
          isPage = _root$isPage$pageSize.isPage,
          pageSize = _root$isPage$pageSize.pageSize;

      return GetKeyboardMainDb(client.store_id).GetKeyboard(root).then(function (res) {
        //把所有的商品全部放到根
        if (root) {
          (res.docs || []).map(function (o) {
            delete o.children;
            return o;
          });
          console.log('全部放到根', res.docs);
        } //处理过的分页


        if (isPage) {
          //组装商品键盘
          var PagesObj = {
            item: {},
            topping: {},
            mealCustom: {},
            maxPageSize: 0
          };

          var SetPages = function SetPages(data, obj) {
            for (var i in data) {
              var o = data[i];

              if (o.sale_type == 'SPU') {
                //console.log(o,'SPU!!!')
                for (var _i in o.sku || []) {
                  var sku = o.sku[_i];

                  if (sku.link_product_id && sku.topping && !PagesObj.topping[sku.link_product_id]) {
                    //id不是键盘又不是商品，转存商品id！！！！！！！！！！！！！！！！！！！！！！！！！！
                    for (var j in sku.topping || []) {
                      sku.topping[j].id = sku.topping[j].product_id;
                    }

                    PagesObj.topping[sku.link_product_id] = service.toConsumableArray(sku.topping || []);
                  }

                  delete sku.topping;
                }
              } // console.log(o.sale_type)


              if (o.sale_type == 'MEAL_CUSTOM') {
                PagesObj.mealCustom[o.id] = o; //console.log('可选套餐：',o.object_id);
              }

              if (o.topping) {
                //    console.log(o,'!!!!!!!!!!!!!!!!!')
                PagesObj.topping[o.object_id] = service.toConsumableArray(o.topping);
                delete o.topping;
              }

              if (o.topping) {
                o.has_topping = true;
              }

              o.section_order || (o.section_order = 1); //自动分页 //Todo

              if (!obj.item[o.section_order]) {
                obj.item[o.section_order] = {
                  data: []
                };
                obj.maxPageSize++;
              }

              obj.item[o.section_order].data.push(o);
              var children = o.children;
              delete o.children;

              if (children && children.length) {
                o.isChild = true;
                if (!obj.item[o.section_order].children) obj.item[o.section_order].children = {};
                obj.item[o.section_order].children[o.id] = {
                  item: {},
                  maxPageSize: 0
                };
                SetPages(children, obj.item[o.section_order].children[o.id]);
              } else {
                o.isChild = false;
              }
            }
          };

          SetPages(res.docs, PagesObj);
          console.log('组装后的数据', PagesObj);
          return {
            status_code: 0,
            data: PagesObj
          };
        } //hws原来的格式


        return {
          status_code: 0,
          data: res.docs
        };
      })["catch"](function (err) {
        console.log('错误', err);
        return {
          status_code: 1,
          code: "FAIL_READ_DB",
          description: "读数据库失败",
          data: err
        };
      });
    }
    /**
     * 获取功能键盘
     * @constructor
     */

  }, {
    key: "GetFuncKeyboard",
    value: function GetFuncKeyboard(client) {
      return GetKeyboardFuncDb(client.store_id).GetKeyboard().then(function (res) {
        return {
          status_code: 0,
          data: res.docs
        };
      }, function (err) {
        console.log('错误', err);
        return {
          status_code: 1,
          code: "FAIL_READ_DB",
          description: "读数据库失败",
          data: {}
        };
      });
    } // 获取点餐页面header上的功能键盘

  }, {
    key: "GetMealKeyboard",

    /**
     * 获取餐段键盘
     * @constructor
     */
    value: function GetMealKeyboard(client) {
      return GetKeyboardMealDb(client.store_id).GetKeyBoardMeal().then(function (res) {
        // console.log('获取餐段键盘306', res)
        var MealTimes = res && res.docs;

        var newData = MealTimes && _objectSpread$8({}, MealTimes[0]);

        if (newData) {
          newData.name = "全部餐段";
          newData.start_time = MealTimes && MealTimes[0] && MealTimes[0].start_time;
          newData.end_time = MealTimes && !!MealTimes.length && MealTimes[MealTimes.length - 1].end_time;
          newData.id = service.v4().replace(/-/g, "");
          MealTimes.unshift(newData);
        }

        return {
          status_code: 0,
          data: MealTimes
        };
      }, function (err) {
        console.log('错误', err);
        return {
          status_code: 1,
          code: "FAIL_READ_DB",
          description: "读数据库失败",
          data: {}
        };
      });
    }
    /**
     * 获取支付键盘
     * @constructor
     */

  }, {
    key: "GetPaymentKeyboard",
    value: function GetPaymentKeyboard(client, obj) {
      var _this2 = this;

      obj || (obj = {});

      var _root$isPage$obj = _objectSpread$8({
        root: false,
        isPage: true
      }, obj),
          root = _root$isPage$obj.root,
          isPage = _root$isPage$obj.isPage;

      return service.bluebird.all([GetSysDb$2(client.store_id).GetPosConfig(), GetKeyboardPaymentDb(client.store_id).GetKeyboard(root)]).then(function (_ref) {
        var _ref2 = service.slicedToArray(_ref, 2),
            posConfig = _ref2[0],
            res = _ref2[1];

        /**
         * https://gitlab.hexcloud.cn/hicloud/hipos-ui/issues/2990
         * 目前后台无法正常配置分页参数，前端每屏最多展示12个item，在此写死。
         */
        // let col = posConfig.keyboard_payment ? posConfig.keyboard_payment.col : 0
        // let row = posConfig.keyboard_payment ? posConfig.keyboard_payment.row : 0
        // let pageSize = Decimal.mul( col, row).toNumber();
        return _this2._paymentKeyboard({
          root: root,
          isPage: isPage,
          pageSize: 12,
          keyboardData: res && res.docs || []
        });
      }, function (err) {
        console.log('错误', err);
        return {
          status_code: 1,
          code: "FAIL_READ_DB",
          description: "读数据库失败",
          data: {}
        };
      });
    }
    /**
     * 充值键盘
     * @param {*} client 
     * @param {*} obj 
     */

  }, {
    key: "GetKeyboardCharge",
    value: function GetKeyboardCharge(client, obj) {
      var _this3 = this;

      obj || (obj = {});

      var _root$isPage$obj2 = _objectSpread$8({
        root: false,
        isPage: true
      }, obj),
          root = _root$isPage$obj2.root,
          isPage = _root$isPage$obj2.isPage;

      return service.bluebird.all([GetSysDb$2(client.store_id).GetPosConfig(), GetKeyboardPaymentDb(client.store_id).GetKeyboard(root)]).then(function (_ref3) {
        var _ref4 = service.slicedToArray(_ref3, 2),
            posConfig = _ref4[0],
            res = _ref4[1];

        //console.log("支付键盘", res)
        var col = posConfig.keyboard_payment ? posConfig.keyboard_payment.col : 0;
        var row = posConfig.keyboard_payment ? posConfig.keyboard_payment.row : 0;
        var pageSize = service.decimal.mul(col, row).toNumber();
        return _this3._paymentKeyboard({
          root: root,
          isPage: isPage,
          pageSize: pageSize,
          keyboardData: res || []
        });
      }, function (err) {
        console.log('错误', err);
        return {
          status_code: 1,
          code: "FAIL_READ_DB",
          description: "读数据库失败",
          data: {}
        };
      });
    }
  }, {
    key: "_paymentKeyboard",
    value: function _paymentKeyboard(_ref5) {
      var root = _ref5.root,
          isPage = _ref5.isPage,
          pageSize = _ref5.pageSize,
          keyboardData = _ref5.keyboardData;
      console.log('键盘！！！', keyboardData); //把所有的商品全部放到根

      if (root) {
        (keyboardData || []).map(function (o) {
          delete o.children;
          return o;
        }); //console.log('全部放到根', keyboardData);
      } //处理过的分页


      if (isPage) {
        //组装商品键盘
        var PagesObj = {
          item: {},
          maxPageSize: 0
        };

        var SetPages = function SetPages(data, obj) {
          for (var i in data) {
            var o = data[i];
            o.section_order || (o.section_order = 1); //自动分页 //Todo

            {
              o.section_order = Math.ceil((parseInt(i) + 1) / pageSize); //console.log(i, '!!!!!!!!!!!!!页数：', o.section_order)
            }

            if (!obj.item[o.section_order]) {
              obj.item[o.section_order] = {
                data: []
              };
              obj.maxPageSize++;
            }

            obj.item[o.section_order].data.push(o);
            var children = o.children;
            delete o.children;

            if (children && children.length) {
              o.isChild = true;
              if (!obj.item[o.section_order].children) obj.item[o.section_order].children = {};
              obj.item[o.section_order].children[o.id] = {
                item: {},
                maxPageSize: 0
              };
              SetPages(children, obj.item[o.section_order].children[o.id]);
            } else {
              o.isChild = false;
            }
          }
        };

        SetPages(keyboardData, PagesObj);
        return {
          status_code: 0,
          data: PagesObj
        };
      }

      return {
        status_code: 0,
        data: keyboardData
      };
    }
  }, {
    key: "GetPrinterTemplate",
    value: function GetPrinterTemplate(client, key) {
      var p = service.bluebird.resolve(null);

      if (client.tag) {
        console.log('检查到有tag:', client);
        p = GetPrinterTemplatesDb(client.store_id).GetTemplates(key + '.' + client.tag, client.source);
      }

      return p.then(function (r) {
        if (r === null) {
          return GetPrinterTemplatesDb(client.store_id).GetTemplates(key, client.source);
        }

        return r;
      }).then(function (res) {
        if (res === null) {
          //console.log('模板不存在', typeof res)
          return {
            status_code: 1,
            code: "NOT_TEMPLATE",
            description: "模板不存在"
          };
        } else {
          //console.log('打印模板', res)
          return {
            status_code: 0,
            data: res
          };
        }
      }, function (err) {
        console.log('获取模板错误', err);
        return {
          status_code: 1,
          code: "FAIL_READ_DB",
          description: "读数据库失败",
          data: {}
        };
      });
    }
  }, {
    key: "PosCheck",
    value: function PosCheck(client, code) {
      return service.bluebird.all([GetUserDb(client.store_id).findUserByCode(code), GetSysDb$2(client.store_id).GetPosId()]).spread(function (user, posId) {
        //console.log('签到用户信息', user, posId);
        if (!user) {
          return DBError.UserError;
        }

        service.set(client);
        return posCheck(user.id, posId).then(function (res) {
          res.data = res.payload;
          delete res.payload;
          return res;
        });
      })["catch"](function (e) {
        console.log(e);
        return SysError.InteraceError;
      });
    }
    /**
     * 服务费
     * @returns {Array}
     * @constructor
     */

  }, {
    key: "GetServiceFee",
    value: function GetServiceFee() {
      return [{
        id: 100,
        name: "免费服务费",
        value: 0
      }, {
        id: 1,
        name: "服务费10%",
        value: 0.1
      }, {
        id: 2,
        name: "服务费12%",
        value: 0.12
      }
      /*{
       id: 3,
       name: "服务费15%",
       value: 0.15
       },
       {
       id: 4,
       name: "服务费17%",
       value: 0.17
       },
       {
       id: 5,
       name: "服务费20%",
       value: 0.2
       }*/
      ];
    }
    /**
     * 搜索助词码
     * @param value
     * @constructor
     */

  }, {
    key: "SearchZjm",
    value: function SearchZjm(client, value) {
      return GetKeyboardMainDb(client.store_id).GetKeyBoardMainByZjm(value).then(function (res) {
        console.log('搜索结果：', res);
        return {
          status_code: 0,
          data: res.docs
        };
      })["catch"](function (err) {
        return {
          status_code: 1,
          code: "ERR_DB",
          description: "查询数据库异常",
          data: err
        };
      });
    }
  }, {
    key: "formatProduct",
    value: function formatProduct(p) {} // 更新营业时间

  }, {
    key: "UpdateSaleTime",
    value: function UpdateSaleTime(client) {
      return GetSysDb$2(client.store_id).GetSaleTime().then(function (res) {
        if (res) {
          console.log('更新营业日期');
          service.SysData[client.store_id].busDate = res;
          console.log('更新营业日期 res', res);
          service.execClient('updateSaleTime', {
            busDate: res
          }).then(function (res) {
            console.log('ress', res);
            return {
              status_code: 0
            };
          });
        }

        return {
          status_code: 1,
          code: "EMPTY_DATA",
          description: "营业日期为空",
          data: res
        };
      })["catch"](function (err) {
        return {
          status_code: 1,
          code: "ERR_DB",
          description: "查询数据库异常",
          data: err
        };
      });
    }
    /**
     * 获取营业时间
     * @constructor
     */

  }, {
    key: "GetSaleTime",
    value: function GetSaleTime(client) {
      return GetSysDb$2(client.store_id).GetSaleTime().then(function (res) {
        if (res) {
          console.log('更新营业日期');
          service.SysData[client.store_id].busDate = res;
          return {
            status_code: 0,
            data: res
          };
        }

        return {
          status_code: 1,
          code: "EMPTY_DATA",
          description: "营业日期为空",
          data: res
        };
      })["catch"](function (err) {
        return {
          status_code: 1,
          code: "ERR_DB",
          description: "查询数据库异常",
          data: err
        };
      });
    }
    /**
     * 获取操作原因状态
     * @constructor
     */

  }, {
    key: "GetReasonInfo",
    value: function GetReasonInfo(client, type) {
      return GetSysDb$2(client.store_id).GetReasonInfo(type).then(function (res) {
        if (res) {
          if (!type) {
            return {
              status_code: 0,
              data: res
            };
          }

          if (!res[type]) {
            return {
              status_code: 1,
              code: "ERR_REASON",
              description: "无此类型原因数据"
            };
          }

          if (type && res[type]) {
            return {
              status_code: 0,
              data: res[type]
            };
          }
        }

        return {
          status_code: 1,
          code: "ERR_DB",
          description: "查询数据库为空"
        };
      })["catch"](function (err) {
        return {
          status_code: 1,
          code: "ERR_DB",
          description: "查询数据库异常",
          data: err
        };
      });
    }
    /**
     * 获取配置信息
     * @constructor
     */

  }, {
    key: "GetConfig",
    value: function GetConfig() {
      return {
        status_code: 0,
        data: posConfig.PosConfig
      };
    }
  }, {
    key: "IsAlive",
    value: function IsAlive(client) {
      return GetSysDb$2(client.store_id).IsAlive().then(function (data) {
        return {
          status_code: 0,
          data: data
        };
      })["catch"](function (e) {
        return {
          status_code: 1,
          code: 'DB_ERROR',
          description: e
        };
      });
    }
  }, {
    key: "SetTrain",
    value: function SetTrain(client, data) {
      var local = service.Store.Local(client);
      return GetSysDb$2(client.store_id).SetTrain(data).then(function () {
        localStorage.ticketTrainingNo = "";
        service.setIsTraining(data);
        return {
          status_code: 0
        };
      })["catch"](function (e) {
        return {
          status_code: 1,
          code: 'DBError',
          description: e
        };
      });
    }
    /**
     * 获取卡券分类信息
     * @param client
     * @returns {Promise.<T>}
     * @constructor
     */

  }, {
    key: "GetCoupon",
    value: function GetCoupon(client) {
      return GetSysDb$2(client.store_id).GetCoupon().then(function (res) {
        //console.log('结果：', res);
        return {
          status_code: 0,
          data: res || {}
        };
      })["catch"](function (err) {
        return {
          status_code: 1,
          code: 'DBError',
          description: err
        };
      });
    }
  }, {
    key: "GetMac",
    value: function GetMac(client) {
      return GetSysDb$2(client.store_id).GetMac().then(function (data) {
        return {
          status_code: 0,
          data: data
        };
      })["catch"](function (e) {
        return {
          status_code: 1,
          code: 'DBError',
          description: e
        };
      });
    } //设备信息

  }, {
    key: "GetDevicesRunningInfo",
    value: function GetDevicesRunningInfo(client) {
      return service.JavaServiceClient.getDevicesRunningInfo();
    } //系统信息

  }, {
    key: "GetSystemInfo",
    value: function GetSystemInfo(client) {
      return service.JavaServiceClient.getSystemInfo();
    } //重启pos

  }, {
    key: "GetForceRestart",
    value: function GetForceRestart(client) {
      return service.JavaServiceClient.forceRestart();
    } //运行exe文件

  }, {
    key: "RunEXE",
    value: function RunEXE(client, path) {
      return GetSysDb$2(client.store_id).RunEXE(path);
    }
  }, {
    key: "GetWorkInfo",
    value: function GetWorkInfo(client, user, number) {
      var now = service.moment().format('YYYY-MM-DD HH:mm:ss');
      return GetSysDb$2(client.store_id).WorkInfo().then(function (info) {
        if (info) {
          return service.bluebird.reject({
            data: {
              status_code: 0
            },
            NoError: true
          });
        }
      }).then(function () {
        return service.bluebird.all([GetSysDb$2(client.store_id).SetWorkInfo(now), GetSysDb$2(client.store_id).GetWorkPlan(), GetSysDb$2(client.store_id).GetPosMoney()]);
      }).then(function (_ref6) {
        var _ref7 = service.slicedToArray(_ref6, 3),
            info = _ref7[0],
            plan = _ref7[1],
            money = _ref7[2];

        var data = {
          workTime: now,
          user: user,
          number: number,
          money: money || 0
        };

        if (plan) {
          data.plan = plan;
        }

        return {
          status_code: 0,
          data: data
        };
      })["catch"](function (e) {
        if (e.NoError) {
          return e.data;
        }

        return {
          status_cdoe: 1,
          code: 'DB_ERROR',
          description: e
        };
      });
    } // 类别报表

  }, {
    key: "GetTypeForm",
    value: function GetTypeForm$1(client, data) {
      return GetTypeForm(_objectSpread$8({
        store_ids: service.SysData[client.store_id].store_id
      }, data)).then(function (res) {
        console.log(res, '类别报表类别报表类别报表类别报表');

        if (res.status_code === 0) {
          res.data = res.payload;
          delete res.payload;
          return res;
        }

        return res;
      });
    } // 时段报表

  }, {
    key: "GetTimeForm",
    value: function GetTimeForm$1(client, data) {
      return GetTimeForm(_objectSpread$8({
        store_ids: service.SysData[client.store_id].store_id
      }, data)).then(function (res) {
        console.log(res, '时段报表时段报表时段报表时段报表');

        if (res.status_code === 0) {
          res.data = res.payload;
          delete res.payload;
          return res;
        }

        res.description || (res.description = "获取报表异常");
        return res;
      });
    }
  }, {
    key: "Exec",
    value: function Exec(client, file) {
      return service.JavaServiceClient.exec(file)
      /*.then(res=> {
       console.log('执行结果》》》》', res);
       return res;
       })*/
      ["catch"](function (err) {
        if (err.status_code == 1) {
          return err;
        }

        return {
          status_code: 1,
          code: 'EXEC_ERR',
          description: JSON.stringify(err)
        };
      });
    }
  }, {
    key: "SameTime",
    value: function SameTime(client) {
      return GetSysDb$2(client.store_id).GetSaleTime().then(function (saleTime) {
        var data = service.moment().isAfter(service.moment(saleTime, 'YYYY-MM-DD'), "days");
        console.log(data, '营业日期是否小于当前日期');
        return {
          status_code: 0,
          data: data
        };
      })["catch"](function (e) {
        return {
          status_code: 1,
          code: 'FIND_ERROR',
          description: '查询错误',
          data: e
        };
      });
    }
    /**
     * 获取posinfo
     */

  }, {
    key: "GetPosInfo",
    value: function GetPosInfo(client) {
      return GetSysDb$2(client.store_id).GetPosInfo().then(function (data) {
        return {
          status_code: 0,
          data: data || {}
        };
      })["catch"](function (e) {
        return {
          status_code: 1,
          code: 'FIND_ERROR',
          description: '查询错误',
          data: e
        };
      });
    }
    /**
    * 开钱箱
    */

  }, {
    key: "OpenDraw",
    value: function OpenDraw(client) {
      service.Printer.cashBox(client.store_id, {
        localIp: client.localIp
      });
    }
  }, {
    key: "SetSaleTime",
    value: function SetSaleTime(client, data) {
      return GetSysDb$2(client.store_id).SetSaleTime(data).then(function () {
        return {
          status_cdoe: 0
        };
      })["catch"](function (e) {
        console.log('营业日期赋值异常', e);
        return {
          status_cdoe: 1,
          code: "DBERROR",
          data: e,
          description: "数据库错误"
        };
      });
    } //临时添加

  }, {
    key: "getTakeoutByDate",
    value: function getTakeoutByDate(client, date) {
      if (!window.getTakeoutByDate) {
        console.log('方法不存在');
        return;
      }

      return window.getTakeoutByDate(client, date);
    } // 每日支付

  }, {
    key: "DailyPayment",
    value: function DailyPayment$1(client, data) {
      var storeCode = "MJSH093"; // SysData.storeInfo.code

      return DailyPayment({
        "store_num": storeCode,
        "stat_day": data
      }).then(function (res) {
        console.log(res, '每日支付每日支付每日支付每日支付');

        if (res.status_code === 0) {
          res.data = res.payload;
          delete res.payload;
          return res;
        }

        res.description || (res.description = "获取每日支付异常");
        return res;
      });
    } //查询早餐信息

  }, {
    key: "GetBreakFast",
    value: function GetBreakFast$1(clientData, data) {
      service.set(clientData);
      return GetBreakFast(_objectSpread$8(_objectSpread$8({}, data), {}, {
        store_id: clientData.store_id
      })).then(function (res) {
        // console.log('查询早餐信息:', res)
        if (res.status_code === 1) {
          return service.bluebird.reject({
            status_code: 1,
            code: "ERR_GetBreakFast",
            description: "查询早餐信息异常",
            data: res
          });
        }

        res.data = res.payload;
        delete res.payload;
        return res;
      })["catch"](function (err) {
        return err;
      });
    } //核销早餐信息

  }, {
    key: "UsedBreakFast",
    value: function UsedBreakFast$1(clientData, data) {
      service.set(clientData);
      return UsedBreakFast(_objectSpread$8(_objectSpread$8({}, data), {}, {
        store_id: clientData.store_id
      })).then(function (res) {
        // console.log('核销早餐信息:', res)
        if (res.status_code === 1) {
          return service.bluebird.reject({
            status_code: 1,
            code: "ERR_UsedBreakFast",
            description: "核销早餐信息异常",
            data: res
          });
        }

        res.data = res.payload;
        delete res.payload;
        return res;
      })["catch"](function (err) {
        return err;
      });
    }
  }, {
    key: "GetPaymentDiscountTrans",
    value: function GetPaymentDiscountTrans(clientData) {
      service.set(clientData);
      return PaymentDiscountTrans().then(function (res) {
        console.log('拉取支付折扣互转:', res);

        if (res.status_code === 1) {
          return service.bluebird.reject({
            status_code: 1,
            code: "ERR_PaymentDiscountTrans",
            description: "拉取支付折扣互转异常",
            data: res
          });
        }

        res.data = res.payload;
        delete res.payload;
        return res;
      })["catch"](function (err) {
        return err;
      });
    }
  }]);

  return SysService;
}(), _temp)) || _class$2);

var crypt = main$1.createCommonjsModule(function (module) {
(function() {
  var base64map
      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',

  crypt = {
    // Bit-wise rotation left
    rotl: function(n, b) {
      return (n << b) | (n >>> (32 - b));
    },

    // Bit-wise rotation right
    rotr: function(n, b) {
      return (n << (32 - b)) | (n >>> b);
    },

    // Swap big-endian to little-endian and vice versa
    endian: function(n) {
      // If number given, swap endian
      if (n.constructor == Number) {
        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;
      }

      // Else, assume array and swap all items
      for (var i = 0; i < n.length; i++)
        n[i] = crypt.endian(n[i]);
      return n;
    },

    // Generate an array of any length of random bytes
    randomBytes: function(n) {
      for (var bytes = []; n > 0; n--)
        bytes.push(Math.floor(Math.random() * 256));
      return bytes;
    },

    // Convert a byte array to big-endian 32-bit words
    bytesToWords: function(bytes) {
      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
        words[b >>> 5] |= bytes[i] << (24 - b % 32);
      return words;
    },

    // Convert big-endian 32-bit words to a byte array
    wordsToBytes: function(words) {
      for (var bytes = [], b = 0; b < words.length * 32; b += 8)
        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a hex string
    bytesToHex: function(bytes) {
      for (var hex = [], i = 0; i < bytes.length; i++) {
        hex.push((bytes[i] >>> 4).toString(16));
        hex.push((bytes[i] & 0xF).toString(16));
      }
      return hex.join('');
    },

    // Convert a hex string to a byte array
    hexToBytes: function(hex) {
      for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.substr(c, 2), 16));
      return bytes;
    },

    // Convert a byte array to a base-64 string
    bytesToBase64: function(bytes) {
      for (var base64 = [], i = 0; i < bytes.length; i += 3) {
        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
        for (var j = 0; j < 4; j++)
          if (i * 8 + j * 6 <= bytes.length * 8)
            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));
          else
            base64.push('=');
      }
      return base64.join('');
    },

    // Convert a base-64 string to a byte array
    base64ToBytes: function(base64) {
      // Remove non-base-64 characters
      base64 = base64.replace(/[^A-Z0-9+\/]/ig, '');

      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;
          imod4 = ++i % 4) {
        if (imod4 == 0) continue;
        bytes.push(((base64map.indexOf(base64.charAt(i - 1))
            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))
            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));
      }
      return bytes;
    }
  };

  module.exports = crypt;
})();
});

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
var C__Users____Documents_hipos_service_node_modules_isBuffer = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
};

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

var crypt$1 = main$1.createCommonjsModule(function (module) {
(function() {
  var base64map
      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',

  crypt = {
    // Bit-wise rotation left
    rotl: function(n, b) {
      return (n << b) | (n >>> (32 - b));
    },

    // Bit-wise rotation right
    rotr: function(n, b) {
      return (n << (32 - b)) | (n >>> b);
    },

    // Swap big-endian to little-endian and vice versa
    endian: function(n) {
      // If number given, swap endian
      if (n.constructor == Number) {
        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;
      }

      // Else, assume array and swap all items
      for (var i = 0; i < n.length; i++)
        n[i] = crypt.endian(n[i]);
      return n;
    },

    // Generate an array of any length of random bytes
    randomBytes: function(n) {
      for (var bytes = []; n > 0; n--)
        bytes.push(Math.floor(Math.random() * 256));
      return bytes;
    },

    // Convert a byte array to big-endian 32-bit words
    bytesToWords: function(bytes) {
      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
        words[b >>> 5] |= bytes[i] << (24 - b % 32);
      return words;
    },

    // Convert big-endian 32-bit words to a byte array
    wordsToBytes: function(words) {
      for (var bytes = [], b = 0; b < words.length * 32; b += 8)
        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a hex string
    bytesToHex: function(bytes) {
      for (var hex = [], i = 0; i < bytes.length; i++) {
        hex.push((bytes[i] >>> 4).toString(16));
        hex.push((bytes[i] & 0xF).toString(16));
      }
      return hex.join('');
    },

    // Convert a hex string to a byte array
    hexToBytes: function(hex) {
      for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.substr(c, 2), 16));
      return bytes;
    },

    // Convert a byte array to a base-64 string
    bytesToBase64: function(bytes) {
      for (var base64 = [], i = 0; i < bytes.length; i += 3) {
        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
        for (var j = 0; j < 4; j++)
          if (i * 8 + j * 6 <= bytes.length * 8)
            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));
          else
            base64.push('=');
      }
      return base64.join('');
    },

    // Convert a base-64 string to a byte array
    base64ToBytes: function(base64) {
      // Remove non-base-64 characters
      base64 = base64.replace(/[^A-Z0-9+\/]/ig, '');

      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;
          imod4 = ++i % 4) {
        if (imod4 == 0) continue;
        bytes.push(((base64map.indexOf(base64.charAt(i - 1))
            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))
            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));
      }
      return bytes;
    }
  };

  module.exports = crypt;
})();
});

var charenc = {
  // UTF-8 encoding
  utf8: {
    // Convert a string to a byte array
    stringToBytes: function(str) {
      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
    },

    // Convert a byte array to a string
    bytesToString: function(bytes) {
      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
    }
  },

  // Binary encoding
  bin: {
    // Convert a string to a byte array
    stringToBytes: function(str) {
      for (var bytes = [], i = 0; i < str.length; i++)
        bytes.push(str.charCodeAt(i) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a string
    bytesToString: function(bytes) {
      for (var str = [], i = 0; i < bytes.length; i++)
        str.push(String.fromCharCode(bytes[i]));
      return str.join('');
    }
  }
};

var charenc_1 = charenc;

var md5 = main$1.createCommonjsModule(function (module) {
(function(){
  var crypt = crypt$1,
      utf8 = charenc_1.utf8,
      isBuffer = C__Users____Documents_hipos_service_node_modules_isBuffer,
      bin = charenc_1.bin,

  // The core
  md5 = function (message, options) {
    // Convert to byte array
    if (message.constructor == String)
      if (options && options.encoding === 'binary')
        message = bin.stringToBytes(message);
      else
        message = utf8.stringToBytes(message);
    else if (isBuffer(message))
      message = Array.prototype.slice.call(message, 0);
    else if (!Array.isArray(message))
      message = message.toString();
    // else, assume byte array already

    var m = crypt.bytesToWords(message),
        l = message.length * 8,
        a =  1732584193,
        b = -271733879,
        c = -1732584194,
        d =  271733878;

    // Swap endian
    for (var i = 0; i < m.length; i++) {
      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |
             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;
    }

    // Padding
    m[l >>> 5] |= 0x80 << (l % 32);
    m[(((l + 64) >>> 9) << 4) + 14] = l;

    // Method shortcuts
    var FF = md5._ff,
        GG = md5._gg,
        HH = md5._hh,
        II = md5._ii;

    for (var i = 0; i < m.length; i += 16) {

      var aa = a,
          bb = b,
          cc = c,
          dd = d;

      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);
      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);
      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);
      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);
      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);
      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);
      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);
      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);
      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);
      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);
      c = FF(c, d, a, b, m[i+10], 17, -42063);
      b = FF(b, c, d, a, m[i+11], 22, -1990404162);
      a = FF(a, b, c, d, m[i+12],  7,  1804603682);
      d = FF(d, a, b, c, m[i+13], 12, -40341101);
      c = FF(c, d, a, b, m[i+14], 17, -1502002290);
      b = FF(b, c, d, a, m[i+15], 22,  1236535329);

      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);
      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);
      c = GG(c, d, a, b, m[i+11], 14,  643717713);
      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);
      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);
      d = GG(d, a, b, c, m[i+10],  9,  38016083);
      c = GG(c, d, a, b, m[i+15], 14, -660478335);
      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);
      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);
      d = GG(d, a, b, c, m[i+14],  9, -1019803690);
      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);
      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);
      a = GG(a, b, c, d, m[i+13],  5, -1444681467);
      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);
      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);
      b = GG(b, c, d, a, m[i+12], 20, -1926607734);

      a = HH(a, b, c, d, m[i+ 5],  4, -378558);
      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);
      c = HH(c, d, a, b, m[i+11], 16,  1839030562);
      b = HH(b, c, d, a, m[i+14], 23, -35309556);
      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);
      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);
      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);
      b = HH(b, c, d, a, m[i+10], 23, -1094730640);
      a = HH(a, b, c, d, m[i+13],  4,  681279174);
      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);
      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);
      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);
      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);
      d = HH(d, a, b, c, m[i+12], 11, -421815835);
      c = HH(c, d, a, b, m[i+15], 16,  530742520);
      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);

      a = II(a, b, c, d, m[i+ 0],  6, -198630844);
      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);
      c = II(c, d, a, b, m[i+14], 15, -1416354905);
      b = II(b, c, d, a, m[i+ 5], 21, -57434055);
      a = II(a, b, c, d, m[i+12],  6,  1700485571);
      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);
      c = II(c, d, a, b, m[i+10], 15, -1051523);
      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);
      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);
      d = II(d, a, b, c, m[i+15], 10, -30611744);
      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);
      b = II(b, c, d, a, m[i+13], 21,  1309151649);
      a = II(a, b, c, d, m[i+ 4],  6, -145523070);
      d = II(d, a, b, c, m[i+11], 10, -1120210379);
      c = II(c, d, a, b, m[i+ 2], 15,  718787259);
      b = II(b, c, d, a, m[i+ 9], 21, -343485551);

      a = (a + aa) >>> 0;
      b = (b + bb) >>> 0;
      c = (c + cc) >>> 0;
      d = (d + dd) >>> 0;
    }

    return crypt.endian([a, b, c, d]);
  };

  // Auxiliary functions
  md5._ff  = function (a, b, c, d, x, s, t) {
    var n = a + (b & c | ~b & d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._gg  = function (a, b, c, d, x, s, t) {
    var n = a + (b & d | c & ~d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._hh  = function (a, b, c, d, x, s, t) {
    var n = a + (b ^ c ^ d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._ii  = function (a, b, c, d, x, s, t) {
    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };

  // Package private blocksize
  md5._blocksize = 16;
  md5._digestsize = 16;

  module.exports = function (message, options) {
    if (message === undefined || message === null)
      throw new Error('Illegal argument ' + message);

    var digestbytes = crypt.wordsToBytes(md5(message, options));
    return options && options.asBytes ? digestbytes :
        options && options.asString ? bin.bytesToString(digestbytes) :
        crypt.bytesToHex(digestbytes);
  };

})();
});

var _dec$3, _class$3;

function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$9(Object(source), true).forEach(function (key) { service.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$9(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var GetUserDb$1 = service.DbProxy.GetUserDb;

var getPermissions = function getPermissions(pid) {
  var permissions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  permissions = permissions || [];
  /**
   * 转换成数组
   */

  var regx = permissions.map(function (p) {
    return p.permission;
  });
  /**
   * 正则匹配所有符合规则的字符串
   */

  var results = regx.filter(function (r) {
    var replaceStr = r.replace('*', '+');
    var regxObj = new RegExp("^(".concat(replaceStr, ")"));
    return regxObj.test(pid);
  });
  /**
   * 将符合pid 适用的规则进行排序，
   * 排序规则为 将 规则转换成数组，找到数组长度最长的那个
   * （应该有更好的方式的！！！！）
   */

  var allowPermissions = permissions.filter(function (p) {
    return results.includes(p.permission);
  });

  var sortResult = service.lodash.orderBy(allowPermissions, ['need_auth', 'permission'], ['desc', 'desc']);

  if (sortResult.length > 0) {
    return {
      isShow: true,
      need_auth: sortResult[0].need_auth || false
    };
  }

  return {
    isShow: false,
    need_auth: true
  };
};

var UserService = (_dec$3 = mbus.Name('User'), _dec$3(_class$3 = /*#__PURE__*/function () {
  function UserService() {
    service.classCallCheck(this, UserService);
  }

  service.createClass(UserService, [{
    key: "getUser",
    value: function getUser(client, code, password) {
      var isAll = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var pos_password;

      if (password || password === '') {
        pos_password = md5(password);
      }

      return GetUserDb$1(client.store_id).findUserByCode(code, pos_password).then(function (user) {
        if (!user) {
          return DBError.UserError;
        }

        if (!isAll) {
          delete user.permissions;
          delete user.pos_password;
        }

        return {
          status_code: 0,
          data: user
        };
      })["catch"](function (e) {
        console.log(e);
        return DBError.FindError;
      });
    }
    /**
     * 登陆认证
     * @param client
     * @param code
     * @param password
     */

  }, {
    key: "loginAuth",
    value: function loginAuth(client, code, password) {
      var _this = this;

      var isCard = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

      if (!code || !password && !isCard) {
        return {
          code: 'USER_PASSWORD_ERROR',
          description: '用户名或密码不可以为空',
          status_code: 1
        };
      }

      return GetUserDb$1(client.store_id).loginValidate({
        code: code,
        busDate: service.SysData[client.store_id].busDate,
        deviceId: client.clientId
      }).then(function (res) {
        console.log('loginValidate res', res);

        if (res.allowLogin) {
          var shiftNumber = res.shiftNumber;
          var loginId = res.id;
          return _this.getUser(client, code, password, true).then(function (res) {
            if (res.status_code === 0) {
              var p = getPermissions('hex.pos.act.sign_in', res.data.permissions); // console.log('登陆权限', p);

              if (!p.isShow || p.need_auth) {
                return {
                  status_code: 1,
                  code: 'ERR_LOGIN_PERMISSION',
                  description: '没有登陆权限'
                };
              }
            }

            return res;
          }).then(function (res) {
            if (res.status_code === 0) {
              console.log('获取会员：', res);
              var c = service.Store.SetUser(client, _objectSpread$9(_objectSpread$9({}, res.data), {}, {
                shiftNumber: shiftNumber,
                loginId: loginId
              }));
              delete res.data.permissions;
              delete res.data.pos_password;
              res.data.shiftNumber = shiftNumber;
              res.data.loginId = loginId;
              res.url = c.url;
            }

            console.log('给ui传递登录成功的消息，需要带上shiftNumber', shiftNumber, res); // res.data = {
            // 	shiftNumber:shiftNumber,
            // 	loginId:loginId
            // }

            return res;
          });
        } else {
          return {
            status_code: 1,
            code: 'ERR_LOGIN_DUPLICATE',
            description: '该用户已在另一台设备登录'
          };
        }
      })["catch"](function (err) {
        console.log('loginValidate err', err);
      });
    } //顾客登录

  }, {
    key: "customerLogin",
    value: function customerLogin(client, user) {
      console.log('顾客登录:', client, user);
      service.Store.SetUser(client, user);
      return Promise.resolve({
        status_code: 0,
        data: _objectSpread$9(_objectSpread$9({}, user), client)
      });
    }
  }, {
    key: "existUser",
    value: function existUser(client, code, password) {
      return GetUserDb$1(client.store_id).findUserByCode(code, md5(password)).then(function (user) {
        if (!user) {
          return DBError.UserError;
        }

        return {
          status_code: 0
        };
      })["catch"](function (e) {
        console.log(e);
        return DBError.FindError;
      });
    }
  }, {
    key: "listUser",
    value: function listUser(client, opts) {
      var isLogin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var _opts = {};

      if (isLogin) {
        _opts = opts;
        opts = {
          page: 1,
          size: 99999
        };
      }

      return Promise.all([GetUserDb$1(client.store_id).listUser(opts), GetUserDb$1(client.store_id).allUserInfo()]).then(function (_ref) {
        var _ref2 = service.slicedToArray(_ref, 2),
            data = _ref2[0],
            infos = _ref2[1];

        var infoMap = {};

        if (infos && infos.length > 0) {
          infos.forEach(function (v) {
            infoMap[v.id] = v;
          });
        }

        if (!data || !data.users) {
          return DBError.FindError;
        }

        data.users.forEach(function (v) {
          if (infoMap[v.id]) {
            v.logout_time = infoMap[v.id].logout_time;
          } //delete v.permissions;


          delete v.pos_password;
        });
        return {
          status_code: 0,
          data: data
        };
      }).then(function (res) {
        if (isLogin) {
          var users = [];
          var pName = 'hex.pos.act.sign_in'; // isLogin 传入所要筛选的权限 str

          if (typeof isLogin == 'string') {
            pName = isLogin;
          }

          for (var _i in res.data.users) {
            var u = res.data.users[_i]; //console.log('用户', u);

            var p = getPermissions(pName, u.permissions || []); //console.log('登陆授权检查', u, p)

            if (p.isShow && !p.need_auth) {
              users.push(u);
            }
          }

          var size = parseInt(_opts.size || 5);
          var page = parseInt(_opts.page || 1);
          var _users = [];
          var i = (page - 1) * size;
          var length = i + size; //console.log(page, size, length, users);

          for (; i < length; i++) {
            if (!users[i]) {
              break;
            }

            _users.push(users[i]);
          }

          res.data.users = _users;
          res.data.all = Math.ceil(users.length / size);
        }

        return res;
      }).then(function (res) {
        res.data.users.forEach(function (v) {
          delete v.permissions;
        });
        return res;
      })["catch"](function (e) {
        console.log(e);
        return DBError.FindError;
      });
    }
  }, {
    key: "updatePassword",
    value: function updatePassword$1(client, code, oldPass, newPass) {
      return service.findUserByCode(code, md5(oldPass)).then(function (user) {
        if (!user) {
          return DBError.UserError;
        }

        return updatePassword(user.id, oldPass, newPass).then(function (res) {
          if (res.status_code === 0) {
            return GetUserDb$1(client.store_id).updatePassword(code, md5(oldPass), md5(newPass)).then(function (user) {
              return {
                status_code: 0,
                data: user
              };
            });
          }

          return res;
        });
      })["catch"](function (e) {
        console.log(e);

        if (e === 'user not found"') {
          return DBError.UserError;
        }

        return DBError.UpdateError;
      });
    }
    /**
     * 权限
     * @param client
     * @param pid
     * @returns {{status_code: number, code: string, description: string}}
     */

  }, {
    key: "getPermission",
    value: function getPermission(client) {
      // if (!pid) {
      // 	return {
      // 		status_code: 1,
      // 		code: 'ERR_PERMISSION_PARAM',
      // 		description: '参数出错'
      // 	};
      // }
      var user = service.Store.Local(client).user || {
        permissions: []
      };
      var permissions = user.permissions || []; //let aIndex = permissions.indexOf('hex.pos.*');

      return {
        status_code: 0,
        data: permissions
      };
    }
    /**
     * 授权
     * @returns {*}
     */

  }, {
    key: "auth",
    value: function auth(client, code, password, pid) {
      if (!code || !password || !pid) {
        return {
          code: 'USER_AUTH_ERROR',
          description: '用户名或密码或授权值不可以为空',
          status_code: 1
        };
      }

      return this.getUser(client, code, password, true).then(function (res) {
        if (res.status_code === 0) {
          var permissions = res.data.permissions || []; //console.log('权限', permissions);

          var p = getPermissions(pid, permissions); //console.log('授权情况', p);

          return {
            status_code: 0,
            data: !p.need_auth
          };
        }

        return res;
      });
    }
  }, {
    key: "logout",
    value: function logout(client) {
      var u = service.Store.GetUser(client);

      if (!u || !u.id) {
        return Promise.resolve({
          status_code: 0
        });
      }

      return GetUserDb$1(client.store_id).getUserInfo(u.id).then(function (user) {
        if (!user) {
          user = {};
        }

        console.log('user', user);
        user.logout_time = new Date().getTime();
        user.id = u.id;
        return {
          status_code: 0
        };
      });
    }
  }, {
    key: "generateLoginRecord",
    value: function generateLoginRecord(client, code) {
      console.log('generateLoginRecord');
      return GetUserDb$1(client.store_id).generateLoginRecord({
        code: code,
        busDate: service.SysData[client.store_id].busDate,
        deviceId: client.clientId
      }).then(function (res) {
        var shiftNumber = res.shiftNumber;
        service.Store.UpdateShiftNumer(client, _objectSpread$9(_objectSpread$9({}, res.data), {}, {
          shiftNumber: shiftNumber
        }));
        return {
          status_code: 0,
          data: res
        };
      })["catch"](function (err) {
        console.log('generateLoginRecord err', err);
      });
    }
  }]);

  return UserService;
}()) || _class$3);

var _dec$4, _class$4;

function ownKeys$a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$a(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$a(Object(source), true).forEach(function (key) { service.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var GetEnginDb = service.DbProxy.GetEnginDb; //缓存的会员促销列表

var PromotionListCache = false;
var MemberService = (_dec$4 = mbus.Name('Member'), _dec$4(_class$4 = /*#__PURE__*/function () {
  function MemberService() {
    service.classCallCheck(this, MemberService);
  }

  service.createClass(MemberService, [{
    key: "getMemberInfoByCard",

    /**
     * 会员查询
     * @param clientData
     * @param id
     * @constructor
     */
    value: function getMemberInfoByCard(client, id, ticketId) {
      var store_id = client.store_id;
      var membershipCooperation = service.SysData[client.store_id].membershipCooperation;
      service.set(client);
      return GetMemberInfoByCard(id, {
        store_id: store_id,
        membershipCooperation: membershipCooperation,
        ticketId: ticketId
      }).then(function (ret) {
        if (ret.status_code === 1) {
          return ret;
        }

        ret.data = ret.payload;
        delete ret.payload;
        return ret;
      }).then(function (ret) {
        var promotion_array = [];
        var promotion_id = ret && ret.data && ret.data.promotion_id && ret.data.promotion_id || "";

        if (promotion_id) {
          promotion_array = promotion_id.split(",");
        }

        if (!!promotion_array.length) {
          //缓存有 用缓存 不调用 db
          if (PromotionListCache) {
            ret.data.promotion_list = service.lodash.map(promotion_array, function (id) {
              return PromotionListCache[id];
            });
            ret.data.promotion_list = ret.data.promotion_list.filter(function (o) {
              return !!o;
            });
            return ret;
          }

          return GetEnginDb(client.store_id).GetEnginData().then(function (res) {
            PromotionListCache = {};

            service.lodash.map(res, function (item) {
              PromotionListCache[item.id] = {
                flag: true,
                ticket_display: item.display_name,
                promotion_id: item.id,
                trigger_times_custom: item.trigger_times_custom || false
              };
            });

            ret.data.promotion_list = service.lodash.map(promotion_array, function (id) {
              return PromotionListCache[id];
            });
            ret.data.promotion_list = ret.data.promotion_list.filter(function (o) {
              return !!o;
            });
            return ret;
          })["catch"](function (err) {
            console.log('获取今日促销异常', err);
            return ret;
          });
        }

        return ret;
      })["catch"](function (e) {
        console.log('error', e);
        return SysError.InteraceError;
      });
    }
    /**
     * 会员充值
     * @param clientData
     * @param id
     * @constructor
     */

  }, {
    key: "rechargeMember",
    value: function rechargeMember(client, data) {
      var _payment = service.SysData[client.store_id].keyboardCharge[data.paymentKeyboardId].payment;
      var params = {
        store_id: service.SysData[client.store_id].store_id,
        pos_id: service.SysData[client.store_id].pos_id,
        is_online: !!_payment.is_online_pay,
        sequence_id: 1,
        payment_config_code: _payment.cooperation_code,
        ticket_id: service.v4().replace(/-/g, ""),
        payment_name: _payment.name,
        payment_id: _payment.id,
        amount: data.amount,
        card_no: data.card_no,
        external_code: _payment.is_online_pay ? data.external_code : undefined
      }; //前台传{amount:"",card_no:"",external_code: "",}

      return RechargeMember(params, service.SysData[client.store_id]).then(function (ret) {
        if (ret.status_code === 1 || !ret.payload.success) {
          return Promise.reject(ret);
        }

        var _ref = service.SysData[client.store_id].paymentMeta[_payment.id] || {},
            is_pop_cash_box = _ref.is_pop_cash_box;

        if (is_pop_cash_box) {
          // console.log('会员充值需要开钱箱')
          try {
            service.Printer.cashBox(client.store_id, {
              localIp: client.localIp
            });
          } catch (e) {
            console.log('开钱箱失败');
          }
        }

        ret.data = ret.payload;
        delete ret.payload;
        return ret;
      })["catch"](function (e) {
        return {
          status_code: 1,
          description: e.description || e.payload && e.payload.resp_msg || "会员充值异常",
          code: "RECHARGE_ERR"
        };
      });
    }
    /**
     * 会员充值记录查询
     * @param clientData
     * @param id
     * @constructor
     */

  }, {
    key: "queryMemberRecharge",
    value: function queryMemberRecharge(client) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      data = _objectSpread$a({
        store_id: service.SysData[client.store_id].store_id
      }, data); //前台传{card_no:"",start_date:"",end_date:"",}

      return QueryMemberRecharge(data, service.SysData[client.store_id]).then(function (ret) {
        if (ret.status_code === 1 || !ret.payload.success) {
          return Promise.reject(ret);
        }

        ret.data = ret.payload.data;
        delete ret.payload;
        return ret;
      })["catch"](function (e) {
        return SysError.InteraceError;
      });
    }
    /**
     * 会员退充值
     * @param clientData
     * @param id
     * @constructor
     */

  }, {
    key: "refundMemberRecharge",
    value: function refundMemberRecharge(client) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      data = _objectSpread$a({
        store_id: service.SysData[client.store_id].store_id,
        pos_id: service.SysData[client.store_id].pos_id,
        ticket_id: service.v4().replace(/-/g, "")
      }, data); //前台传{amount:"",card_no:"",original_ticket_id: "",}

      return RefundMemberRecharge(data, service.SysData[client.store_id]).then(function (ret) {
        if (ret.status_code === 1 || !ret.payload.success) {
          ret.description || (ret.description = ret.payload.resp_msg);
          ret.code || (ret.code = ret.payload.response_code);
          return ret;
        } //console.log('会员退款支付方式数据',SysData.paymentMeta[data.payment_id])


        var _ref2 = service.SysData[client.store_id].paymentMeta[data.payment_id] || {},
            is_pop_cash_box = _ref2.is_pop_cash_box;

        if (is_pop_cash_box) {
          // console.log('会员退款需要开钱箱')
          try {
            service.Printer.cashBox(client.store_id, {
              localIp: client.localIp
            });
          } catch (e) {
            console.log('开钱箱失败');
          }
        }

        ret.data = ret.payload;
        delete ret.payload;
        return ret;
      })["catch"](function (e) {
        return SysError.InteraceError;
      });
    }
  }]);

  return MemberService;
}()) || _class$4);

function ownKeys$b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$b(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$b(Object(source), true).forEach(function (key) { service.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var GetTicketDb$3 = service.DbProxy.GetTicketDb,
    GetOrderDb$1 = service.DbProxy.GetOrderDb,
    GetPaymentDb$2 = service.DbProxy.GetPaymentDb;
var RefundDb = {};
/**
 * 支付功能模块
 */

var PaymentModule = new ( /*#__PURE__*/function () {
  function payment() {
    service.classCallCheck(this, payment);
  }

  service.createClass(payment, [{
    key: "Refund",

    /**
     * 退款
     * @param ticketId
     * @param msgData
     * @returns {Promise.<TResult>}
     * @constructor
     */
    value: function Refund(client, orderStore, ticketId) {
      var msgData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
        code: "",
        info: ""
      };
      var returnData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      var PrintKitchen = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;

      if (RefundDb[ticketId]) {
        return Promise.reject({
          status_code: 1,
          code: "ERR_REPEAT_REFUND_TIME",
          description: "订单已经退款或者正在退款中。。。"
        });
      }

      RefundDb[ticketId] = true;
      return Promise.all([GetTicketDb$3(client.store_id).GetTicketById(ticketId), GetOrderDb$1(client.store_id).GetOrder(ticketId)]).then(function (_ref) {
        var _ref2 = service.slicedToArray(_ref, 2),
            ticket = _ref2[0],
            order = _ref2[1];

        //检查是否可以退款
        if (!ticket || !order) {
          return Promise.reject({
            status_code: 1,
            code: 'FIND_ERROR',
            description: '订单不存在'
          });
        }

        if (order.mainStatus !== 'FINISH') {
          return Promise.reject({
            status_code: 1,
            code: "NOT_FINISH_ORDER",
            description: "不是正常完成的订单不可以退款"
          });
        }

        if (order.type == 'REFUND') {
          return Promise.reject({
            status_code: 1,
            code: "ERR_REFUND_ORDER",
            description: "退款的单不可以退款"
          });
        }

        if (order.refundTickeId) {
          return Promise.reject({
            status_code: 1,
            code: "ERR_REPEAT_REFUND_ORDER",
            description: "此订单已经退过款，不可以重复退款"
          });
        }

        return [ticket, order];
      }).then(function (_ref3) {
        var _ref4 = service.slicedToArray(_ref3, 2),
            ticket = _ref4[0],
            order = _ref4[1];

        //是不是杉德支付
        //console.log('是不是杉德支付》》》》》》》》》》', order, order.bizCode, order.payments.payments.length)
        //杉德支付退款
        if (order.bizCode == 'SHANDE' && order.payments._private.result.payments.length == 1) {
          var rData = {
            cardType: '01',
            //卡类型, 01为银行卡
            amt: Number(order.payments._private.result.payments[0].amount),
            ref: order.payments._private.shande.SysRefNo,
            //参考号, 支付返回值中的SysRefNo字段
            time: order.payments._private.shande.time,
            //交易时间，格式为MMDD
            id: order.ticketId //支付id，查询时需要

          }; // console.log('杉德退款数据', rData)

          return GetPaymentDb$2(client.store_id).CardCancel(rData).then(function (res) {
            // console.log('杉德退款结果', res)
            if (res.ResponseCode === '00') {
              // console.log('杉德退款成功', res);
              return [ticket, order];
            }

            return Promise.reject({
              status_code: 1,
              description: res,
              code: 'SAND_ERROR'
            });
          })["catch"](function (e) {
            console.log('杉德退款异常', e);

            if (e.status_code == 1) {
              return Promise.reject(e);
            }

            return Promise.reject({
              status_code: 1,
              description: e,
              code: 'SAND_ERROR'
            });
          });
        }

        return [ticket, order];
      }).then(function (_ref5) {
        var _ref6 = service.slicedToArray(_ref5, 2),
            ticket = _ref6[0],
            order = _ref6[1];

        //检查是否是线上
        if (order.isOnline) {
          service.set(client);
          return refund({
            ticket_id: order.paymentsId
          }).then(function (res) {
            if (res.status_code === 1) {
              return Promise.reject(res);
            }

            if (res.payload.pay_status != 'REFUNDED') {
              res.status_code = 1;
              res.data = res.payload;
              res.description = res.payload.message || "退款失败";
              delete res.payload;
              return Promise.reject(res);
            }

            return [ticket, order];
          }).then(function (_ref7) {
            var _ref8 = service.slicedToArray(_ref7, 2),
                ticket = _ref8[0],
                order = _ref8[1];

            var fp = order.payments._private.result.payments; // console.log("!!!结上支付结果：：", fp)

            var p = [];

            for (var i in fp) {
              var o = fp[i];

              if (o.external_code) {
                p.push(o);
              }
            }

            if (p.length) {
              return new Promise(function (resolve) {
                setTimeout(function () {
                  Functions.upMemberInfo(order, p).then(function (r) {
                    console.log('退款时更新会员信息完成');
                    resolve([ticket, order]);
                  })["catch"](function (err) {
                    console.log('退款时更新会员信息异常');
                    resolve([ticket, order]);
                  });
                }, 2000);
              });
            }

            return [ticket, order];
          });
        }

        return [ticket, order];
      }).then(function (_ref9) {
        var _ref10 = service.slicedToArray(_ref9, 2),
            ticket = _ref10[0],
            order = _ref10[1];

        return service.GetTicketId().then(function (ticketId) {
          return [ticket, order, ticketId];
        });
      }).then(function (_ref11) {
        var _ref12 = service.slicedToArray(_ref11, 3),
            ticket = _ref12[0],
            order = _ref12[1],
            ticketId = _ref12[2];

        return service.GetTicketNo(client.store_id, client.container, ticketId).then(function (ticketNo) {
          return [ticket, order, ticketNo, ticketId];
        });
      }).then(function (_ref13) {
        var _newData$refundMsg;

        var _ref14 = service.slicedToArray(_ref13, 4),
            ticket = _ref14[0],
            order = _ref14[1],
            ticketNo = _ref14[2],
            ticketId = _ref14[3];

        console.log('new ticket is:', _.cloneDeep(ticket)); //退款订单处理

        var newData = JSON.parse(JSON.stringify(order));
        newData.ticketId = ticketId;
        newData.originalTicketId = order.ticketId;
        newData.originalTicketNo = order.ticketNo;
        newData.ticketNo = ticketNo;
        newData.uploadStatus = "NOT_UPLOADED";
        newData.status = "REFUND";
        newData.type = "REFUND";
        newData.refundMsg = msgData || {};
        newData.qty = -1 * newData.qty;
        newData.busDate = service.SysData[client.store_id].busDate;
        newData.discountAmount = -1 * Number(newData.discountAmount);
        newData.groessAmount = -1 * Number(newData.groessAmount);
        newData.netAmount = -1 * Number(newData.netAmount);
        newData.payAmount = -1 * Number(newData.payAmount);
        newData.restAmount = -1 * Number(newData.restAmount);
        newData.retailAmount = -1 * Number(newData.retailAmount);
        newData.toppingAmount = -1 * Number(newData.toppingAmount);
        newData.totalAmount = -1 * Number(newData.totalAmount);
        newData.changeAmount = -1 * Number(newData.changeAmount);
        newData.peopleNumber = -1 * Number(newData.peopleNumber);
        newData.removeZeroAmount = -1 * Number(newData.removeZeroAmount);
        newData.rounding = -1 * Number(newData.rounding);
        newData.tax = -1 * Number(newData.tax);
        newData.taxList = _.map(order.taxList, function (item) {
          return _objectSpread$b(_objectSpread$b({}, item), {}, {
            subTotal: -1 * item.subTotal,
            taxAmount: -1 * item.taxAmount
          });
        });
        newData.serviceFee.value = -1 * Number(newData.serviceFee.value);
        newData.time = new Date().getTime();
        newData.orderLine.forEach(function (o) {
          //o.groess = -1 * o.groess;
          o.qty = -1 * o.qty;
          o.groessAmount = -1 * o.groessAmount;
          o.netAmount = -1 * o.netAmount; //o.retail = -1 * o.retail;
          //o.retailAmount = -1 * o.retailAmount;

          o.toppingAmount = -1 * o.toppingAmount;
          o.topping.forEach(function (to) {
            to.qty = -1 * to.qty;
            to.groessAmount = -1 * to.groessAmount;
            to.netAmount = -1 * to.netAmount; //to.retail = -1 * to.retail;
            //to.retailAmount = -1 * to.retailAmount;

            to.toppingAmount = -1 * to.toppingAmount;
          });
          o.combo.forEach(function (to) {
            to.qty = -1 * to.qty;
            to.groessAmount = -1 * to.groessAmount;
            to.netAmount = -1 * to.netAmount; //to.retail = -1 * to.retail;
            //to.retailAmount = -1 * to.retailAmount;

            to.toppingAmount = -1 * to.toppingAmount;
            to.topping.forEach(function (to2) {
              to2.qty = -1 * to2.qty;
              to2.groessAmount = -1 * to2.groessAmount;
              to2.netAmount = -1 * to2.netAmount; //to.retail = -1 * to.retail;
              //to.retailAmount = -1 * to.retailAmount;

              to2.toppingAmount = -1 * to2.toppingAmount;
            });
          });
        }); //天猫退款

        if (newData.tianmao) {
          newData.tianmao.forEach(function (obj) {
            obj.amount = -1 * obj.amount;
            obj.discount = -1 * obj.discount;
            obj.pay_amount = -1 * obj.pay_amount;
            obj.price = -1 * obj.price;
            obj.qty = -1 * obj.qty;
            obj.total_amount = -1 * obj.total_amount;
            obj.total_discount = -1 * obj.total_discount;
            var o = obj.product; //o.groess = -1 * o.groess;

            o.qty = -1 * o.qty;
            o.groessAmount = -1 * o.groessAmount;
            o.netAmount = -1 * o.netAmount; //o.retail = -1 * o.retail;
            //o.retailAmount = -1 * o.retailAmount;

            o.toppingAmount = -1 * o.toppingAmount;
            o.topping.forEach(function (to) {
              to.qty = -1 * to.qty;
              to.groessAmount = -1 * to.groessAmount;
              to.netAmount = -1 * to.netAmount; //to.retail = -1 * to.retail;
              //to.retailAmount = -1 * to.retailAmount;

              to.toppingAmount = -1 * to.toppingAmount;
            });
            o.combo.forEach(function (to) {
              to.qty = -1 * to.qty;
              to.groessAmount = -1 * to.groessAmount;
              to.netAmount = -1 * to.netAmount; //to.retail = -1 * to.retail;
              //to.retailAmount = -1 * to.retailAmount;

              to.toppingAmount = -1 * to.toppingAmount;
              to.topping.forEach(function (to2) {
                to2.qty = -1 * to2.qty;
                to2.groessAmount = -1 * to2.groessAmount;
                to2.netAmount = -1 * to2.netAmount; //to.retail = -1 * to.retail;
                //to.retailAmount = -1 * to.retailAmount;

                to2.toppingAmount = -1 * to2.toppingAmount;
              });
            });
          });
        } //console.log('退款',newData)


        newData.payments._private.result.final_payments.forEach(function (o) {
          o.receivable && (o.receivable = -1 * o.receivable);
          o.amount && (o.amount = -1 * o.amount);
          o.change && (o.change = -1 * o.change);
          o.overflow && (o.overflow = -1 * o.overflow);
          o.pay_amount && (o.pay_amount = -1 * o.pay_amount);
          o.result_amount && (o.result_amount = -1 * o.result_amount);
          o.result_net_amount && (o.result_net_amount = -1 * o.result_net_amount);
        });

        newData.payments._private.result.payments.forEach(function (o) {
          o.receivable && (o.receivable = -1 * o.receivable);
          o.amount && (o.amount = -1 * o.amount);
          o.change && (o.change = -1 * o.change);
          o.overflow && (o.overflow = -1 * o.overflow);
          o.pay_amount && (o.pay_amount = -1 * o.pay_amount);
          o.result_amount && (o.result_amount = -1 * o.result_amount);
          o.result_net_amount && (o.result_net_amount = -1 * o.result_net_amount);
        });

        for (var i in newData.promotion) {
          var d = newData.promotion[i] || []; //console.log('dd',d)

          if (!Array.isArray(d)) {
            for (var j in d) {
              var p = d[j];

              if (typeof p == 'number') {
                d[i] = -1 * d[j];
              }
            }

            continue;
          }

          d.forEach(function (o) {
            o.discount && (o.discount = -1 * o.discount);
            o.product = o.product || [];
            o.product.forEach(function (m) {
              m.amt = -1 * Number(m.amt);
              m.price = -1 * Number(m.price);
              m.qty = -1 * Number(m.qty);
            });
          });
        }

        order.refundMsg = newData.refundMsg;
        order.refundTickeId = newData.ticketId;
        order.refundTicketNo = newData.ticketNo;
        order.status = 'REFUNDCOMPLETED'; //退款小票处理

        var newTicket = JSON.parse(JSON.stringify(ticket)); //{...ticket};

        newTicket.status = 'REFUND';
        newTicket.refundInfo = {
          refund_id: '',
          ref_ticket_id: ticket.ticket_id,
          ref_ticket_no: ticket.ticket_no,
          refund_reason: ((_newData$refundMsg = newData.refundMsg) === null || _newData$refundMsg === void 0 ? void 0 : _newData$refundMsg.name) || ''
        };
        newTicket.ticket_no = newData.ticketNo;
        newTicket.ticketUno = "";
        newTicket.ticket_id = newData.ticketId;
        newTicket.tax = newData.tax;
        newTicket.taxList = newData.taxList;
        newTicket.bus_date = newData.busDate;
        ticket.refundInfo.refund_id = newData.ticketId;
        ticket.refundInfo.refund_no = newData.ticketNo;
        ticket.status = 'REFUNDCOMPLETED';

        if (newTicket.payments) {
          var _newTicket$promotions;

          console.log('newTicket is:', _.cloneDeep(newTicket));
          console.log('json stringfiy:', JSON.stringify(newTicket.payments));
          newTicket.payments = JSON.parse(JSON.stringify(newTicket.payments));
          newTicket.payments.forEach(function (v) {
            v.receivable = service.decimal.mul(v.receivable || 0, -1).toDecimalPlaces(2, 4).toNumber();
            v.pay_amount = service.decimal.mul(v.pay_amount || 0, -1).toDecimalPlaces(2, 4).toNumber();
          });
          ['taxAmount', 'gross_amount', 'net_amount', 'pay_amount', 'discount_amount', 'rounding', 'changeAmount', 'overflow_amount', 'serviceFee', 'tip'].forEach(function (v) {
            newTicket.amounts[v] = -1 * Number(newTicket.amounts[v]);
          });
          ['people', 'qty'].forEach(function (v) {
            newTicket[v] = -1 * Number(newTicket[v]);
          });
          newTicket.products = _.cloneDeep(ticket.products);
          newTicket.products.forEach(function (v) {
            var _v$combo_items, _v$accessories;

            v.amount = -1 * Number(v.amount);
            v.price = -1 * Number(v.price);
            v.qty = -1 * Number(v.qty);
            (_v$combo_items = v.combo_items) === null || _v$combo_items === void 0 ? void 0 : _v$combo_items.forEach(function (o) {
              o.amount = -1 * Number(o.amount);
              o.price = -1 * Number(o.price);
              o.qty = -1 * Number(o.qty);
            });
            (_v$accessories = v.accessories) === null || _v$accessories === void 0 ? void 0 : _v$accessories.forEach(function (o) {
              o.amount = -1 * Number(o.amount);
              o.price = -1 * Number(o.price);
              o.qty = -1 * Number(o.qty);
            });
          });
          newTicket.promotions = newTicket.promotions || [];
          (_newTicket$promotions = newTicket.promotions) === null || _newTicket$promotions === void 0 ? void 0 : _newTicket$promotions.forEach(function (v) {
            var _v$source;

            v.discount = -1 * Number(((_v$source = v.source) === null || _v$source === void 0 ? void 0 : _v$source.discount) || 0);
            v.products.forEach(function (o) {
              o.amt = -1 * Number(o.amt);
              o.price = -1 * Number(o.price);
              o.qty = -1 * Number(o.qty);
            });
          });
        } //ticket.status = 'REFUND';


        try {
          //杉德支付退款多项支付方式替换
          if (order.bizCode == 'SHANDE' && order.payments._private.result.payments.length > 1) {
            if (service.SysData[client.store_id].shandeRefundPayment.id && service.SysData[client.store_id].shandeRefundPayment.payment) {
              newData.payments._private.result.final_payments.forEach(function (o) {
                if (o.payment_id == service.SysData[client.store_id].shandeRefundPayment.id) {
                  o.payment_id = service.SysData[client.store_id].shandeRefundPayment.payment.id;
                  o.payment_name = service.SysData[client.store_id].shandeRefundPayment.payment.name;
                }
              });

              newData.payments._private.result.payments.forEach(function (o) {
                if (o.payment_id == service.SysData[client.store_id].shandeRefundPayment.id) {
                  o.payment_id = service.SysData[client.store_id].shandeRefundPayment.payment.id;
                  o.payment_name = service.SysData[client.store_id].shandeRefundPayment.payment.name;
                }
              });

              if (newTicket.payments) {
                newTicket.payments.forEach(function (v) {
                  if (v.id == service.SysData[client.store_id].shandeRefundPayment.id) {
                    v.id = service.SysData[client.store_id].shandeRefundPayment.payment.id;
                  }
                });
              }
            } else {
              console.log('杉德支付多笔并且没找到现金支付替换！！！！');
            }
          }
        } catch (err) {
          console.log('多笔杉德退款替换现金异常', err);
        }

        return Promise.all([GetTicketDb$3(client.store_id).SaveTicket(ticket), GetTicketDb$3(client.store_id).SaveTicket(newTicket), GetOrderDb$1(client.store_id).SaveOrder(order), GetOrderDb$1(client.store_id).SaveOrder(newData), Promise.resolve(order), Promise.resolve(newData), Promise.resolve(newTicket), Promise.resolve(ticket)]);
      }).then(function (_ref15) {
        var _ref16 = service.slicedToArray(_ref15, 8),
            ticket = _ref16[0],
            newTicket = _ref16[1],
            order = _ref16[2],
            newOrder = _ref16[3],
            orderData = _ref16[4],
            newData = _ref16[5],
            newTicketData = _ref16[6],
            ticketData = _ref16[7];

        return [ticket, newTicket, order, newOrder, orderData, newData, newTicketData];
      }).then(function (_ref17) {
        var _ref18 = service.slicedToArray(_ref17, 7),
            ticket = _ref18[0],
            newTicket = _ref18[1],
            order = _ref18[2],
            newOrder = _ref18[3],
            orderData = _ref18[4],
            newData = _ref18[5],
            newTicketData = _ref18[6];

        if (!order.ok || !newOrder.ok) {
          //todo
          console.log('保存异常', order, newOrder);
        } //console.log('退款数据', orderData)


        var is_pop_cash_box = false;
        var payments = orderData.payments && orderData.payments._private && orderData.payments._private.result && orderData.payments._private.result.payments || [];

        for (var i in payments) {
          var o = payments[i] || {};
          var payment_id = o.payment_id || o._id;

          if (payment_id) {
            var p = service.SysData[client.store_id].paymentMeta[payment_id]; //console.log('支付方式', p)

            if (p.is_pop_cash_box) {
              is_pop_cash_box = true;
              break;
            }
          }
        }

        var store_id = client.store_id,
            localIp = client.localIp;

        if (is_pop_cash_box) {
          console.log('退款需要打钱箱');

          try {
            service.Printer.cashBox(store_id, {
              localIp: localIp
            });
          } catch (e) {}
        }

        var postData = {
          orderType: 'pos',
          orderId: newTicketData.ticket_id || newTicketData.ticketId,
          localIp: localIp,
          printDiff: true
        };
        console.log('准备打印', postData, "system.order.print.".concat(store_id)); // 新打印

        try {
          service.Printer.ticket(store_id, postData);
        } catch (e) {}

        var kitchenPostData = {
          orderType: 'pos',
          orderId: newTicketData.ticket_id || newTicketData.ticketId,
          localIp: localIp,
          printDiff: true
        };

        if (PrintKitchen) {
          console.log('准备打印', postData, "system.order.print.".concat(store_id)); // 新打印 支付后厨打，和保存订单同步，防止小票打印失败导致不厨打

          try {
            service.Printer.cookStickers(store_id, kitchenPostData);
          } catch (e) {}
        } //退款打印
        // Print.ticket(newData, client)
        // if (PrintKitchen) {
        //     Print.RefundKitchen(newData, client);
        // }


        if (returnData) {
          return {
            status_code: 0,
            data: orderData
          };
        }

        return {
          status_code: 0,
          data: newData
        };
      }).then(function (res) {
        delete RefundDb[ticketId];
        return res;
      })["catch"](function (e) {
        delete RefundDb[ticketId];

        if (e.status_code !== 1) {
          console.log('错误', e);
          return {
            status_code: 1,
            code: "ERR_CODE",
            description: "代码处理异常"
          };
        }

        return e;
      });
    }
    /**
     * 重结
     * @param client
     * @param ticketId
     * @param msgData
     * @returns {Promise.<TResult>}
     * @constructor
     */

  }, {
    key: "Reset",
    value: function Reset(client, orderStore, ticketId, msgData) {
      // console.log('service  modules payment payment.js payment Reset')
      return Promise.all([this.Refund(client, orderStore, ticketId, msgData, true, false), service.GetTicketNo(client.store_id, client.container, ticketId)]).then(function (_ref19) {
        var _ref20 = service.slicedToArray(_ref19, 2),
            res = _ref20[0],
            ticketNo = _ref20[1];

        if (res.status_code == 1) {
          return res;
        }

        var data = _objectSpread$b({}, res.data);

        data.originalTicketId = data.ticketId;
        data.originalTicketNo = data.ticketNo;
        delete data.ticketId;
        delete data.paymentsId;
        data.ticketNo = ticketNo;
        data.refundTickeId = "";
        data.refundTicketNo = "";
        data.pastPayments = [];
        data.payments = null;
        data.uploadStatus = ""; //data.refundMsg = {};

        data.payAmount = 0;
        data.type = "RESET";
        data.mainStatus = "SERVING";
        data.status = "ORDER"; // data.mainStatus = "PAYMENT";
        // data.status = "CHECKOUT";

        data.endTime = "";
        data.isOnline = false;
        data.isPay = false;
        var store = orderStore.CreateOrder(data);
        var order = store.order;
        return order.Save(client).then(function (r) {
          //console.log('保存重结结果：', r)
          //console.log('重结之后：', store);
          return r;
        });
      });
    }
  }]);

  return payment;
}())();

var Str = new ( /*#__PURE__*/function () {
  function _class() {
    service.classCallCheck(this, _class);
  }

  service.createClass(_class, [{
    key: "ToCDB",
    //全角转半角
    value: function ToCDB(str) {
      var tmp = "";

      for (var i = 0; i < str.length; i++) {
        if (str.charCodeAt(i) == 12288) {
          tmp += String.fromCharCode(str.charCodeAt(i) - 12256);
          continue;
        }

        if (str.charCodeAt(i) > 65280 && str.charCodeAt(i) < 65375) {
          tmp += String.fromCharCode(str.charCodeAt(i) - 65248);
        } else {
          tmp += String.fromCharCode(str.charCodeAt(i));
        }
      }

      return tmp;
    }
  }]);

  return _class;
}())();

var _dec$5, _class$5;

function ownKeys$c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$c(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$c(Object(source), true).forEach(function (key) { service.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var GetPaymentDb$3 = service.DbProxy.GetPaymentDb,
    GetOrderDb$2 = service.DbProxy.GetOrderDb;
var PaymentService = (_dec$5 = mbus.Name('Payment'), _dec$5(_class$5 = /*#__PURE__*/function () {
  function PaymentService() {
    service.classCallCheck(this, PaymentService);
  }

  service.createClass(PaymentService, [{
    key: "BalanceQuery",

    /**
     * 余额查询
     * @param client
     * @returns {{}}
     * @constructor
     */
    value: function BalanceQuery(client) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        "paymentKeyboardId": "",
        "external_code": "",
        card_pwd: ""
      };

      //console.log('接收到参数', data);
      if (!data.paymentKeyboardId || !data.external_code) {
        return {
          status_code: 1,
          code: 'BALANCE_QUERY_PARAM_ERROR',
          description: '参数错误',
          i18n: 'parameterError'
        };
      }

      var pdata = service.SysData[client.store_id].keyboardPayment[data.paymentKeyboardId];

      if (!pdata || !pdata.payment) {
        return {
          status_code: 1,
          code: 'BALANCE_QUERY_PARAM_VALUE_ERROR',
          description: '找不到支付键盘或键盘找不到支付来源，查询参数值错误'
        };
      }

      var cooperation_code = pdata.payment.cooperation_code;

      if (!cooperation_code) {
        return {
          status_code: 1,
          code: 'BALANCE_QUERY_KEY_SET_ERROR',
          description: '键盘配置错误，cooperation_code不能为空'
        };
      }

      var config = pdata.payment.config;

      if (config) {
        if (config.regex) {
          data.external_code = Str.ToCDB(data.external_code);
          data.external_code = data.external_code.replace(/\?/g, "");
          data.external_code = data.external_code.replace(/;/g, "");

          var _data = RegEx(data, config.regex); //console.log('正则返回结果》', _data)


          data = _objectSpread$c(_objectSpread$c({}, data), _data);
        }
      }

      var p = {
        card_no: data.external_code,
        origorderno: data.external_code,
        store_id: service.SysData[client.store_id].store_id,
        pos_id: service.SysData[client.store_id].pos_id
      };

      if (data.card_pwd) {
        p.card_pwd = data.card_pwd;
      }

      if (data.track2_data) {
        p.track2_data = data.track2_data;
      }

      var obj = _objectSpread$c({
        cooperation_code: cooperation_code
      }, p); //console.log('参数》', obj, p)


      return balanceQuery(obj, p).then(function (res) {
        if (res.status_code !== 0) {
          return res;
        }

        res.data = res.payload;
        delete res.payload;
        return res;
      })["catch"](function (err) {
        console.log('查询异常', err);
        return {
          status_code: 1,
          code: 'BALANCE_QUERY_ERROR',
          description: JSON.stringify(err)
        };
      });
    }
    /**
     * 退款
     * @param client
     * @param ticketId
     * @param msgData
     * @constructor
     */

  }, {
    key: "Refund",
    value: function Refund(client, ticketId) {
      var msgData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
        code: "",
        info: ""
      };
      var orderStore = service.Store.Order(client);
      return PaymentModule.Refund(client, orderStore, ticketId, msgData, false, window.globalHiposConfig.enabledKitchenPrintAfterRefund).then(function (res) {
        return res;
      });
    }
  }, {
    key: "Reset",
    value: function Reset(client, ticketId) {
      var msgData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
        code: "",
        info: ""
      };
      var orderStore = service.Store.Order(client);
      return PaymentModule.Reset(client, orderStore, ticketId, msgData);
    }
    /**
     * 酒店房间信息
     * @param c
     * @param data
     * @constructor
     */

  }, {
    key: "GetHotelRoom",
    value: function GetHotelRoom(c) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      data = _objectSpread$c({
        hotel_code: service.SysData[client.store_id].hotelCode,
        room_no: ""
      }, data); //console.log('请求房间号：', data);

      return getHotelRoom(data).then(function (res) {
        //console.log('获取房间结果：', res);
        if (res.status_code === 1) {
          return res;
        }

        res.data = res.payload;
        delete res.payload;
        return res;
      })["catch"](function (e) {
        console.log(e);
        return SysError.InteraceError;
      });
    }
    /**
     * 查询房间信息
     * @param c
     * @param data
     * @constructor
     */

  }, {
    key: "GetRoomInfo",
    value: function GetRoomInfo(c) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      service.set(c);
      return getRoomInfo(_objectSpread$c(_objectSpread$c({}, data), {}, {
        store_id: c.store_id
      })).then(function (res) {
        if (res.status_code === 1) {
          return service.bluebird.reject({
            status_code: 1,
            code: "ERR_GETROOMINFO",
            description: "没有该房间信息",
            data: res
          });
        }

        res.data = res.payload;
        delete res.payload;
        return res;
      })["catch"](function (e) {
        console.log('查询房间信息:', e);
        return e;
      });
    }
    /**
     * 查询AR信息
     * @param c
     * @param data
     * @constructor
     */

  }, {
    key: "GetARInfo",
    value: function GetARInfo(c) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      // console.log('查询AR信息', data);
      service.set(c);
      return getARInfo(_objectSpread$c(_objectSpread$c({}, data), {}, {
        store_id: c.store_id
      })).then(function (res) {
        //console.log('获取房间结果：', res);
        if (res.status_code === 1) {
          return service.bluebird.reject({
            status_code: 1,
            code: "ERR_GETARINFO",
            description: "没有该企业信息",
            data: res
          });
        }

        res.data = res.payload;
        delete res.payload;
        return res;
      })["catch"](function (e) {
        console.log('查询AR信息异常：', e);
        return e;
      });
    }
    /**
     * 挂协议查询
     * @param client
     * @param origorderno
     * @returns {Promise.<T>}
     * @constructor
     */

  }, {
    key: "CardQuery",
    value: function CardQuery(client) {
      var origorderno = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      return cardQuery({
        store_id: service.SysData[client.store_id].store_id,
        origorderno: origorderno,
        cooperation_code: 'P0054'
      }).then(function (res) {
        //console.log('挂协议查询', res);
        if (res.status_code == 0) {
          res.payload || (res.payload = {});

          if (!res.payload.success) {
            return {
              status_code: 1,
              code: 'ERR_CARD_QUERY_EXISTENT',
              description: res.payload.resp_msg || '结果为空'
            };
          }

          res.data = res.payload;
          delete res.payload;
          return res;
        }

        return res;
      })["catch"](function (err) {
        console.log('CardQuery err', err);
        return {
          status_code: 1,
          code: 'ERR_CARD_QUERY',
          description: '网络或服务器错误，访问远程接口异常,请稍后重试',
          data: err
        };
      });
    }
    /**
     * 查询款待员工列表
     * @param client
     * @param data
     * @constructor
     */

  }, {
    key: "GetTreatList",
    value: function GetTreatList(client, data) {
      service.set(client);
      return getTreatList({
        store_id: client.store_id,
        search: data
      }).then(function (res) {
        // console.log('查询款待员工列表:', res)
        if (res.status_code === 1) {
          return service.bluebird.reject({
            status_code: 1,
            code: "ERR_GETTREATLIST",
            description: "查询款待员工列表异常",
            data: res
          });
        }

        res.data = res.payload;
        delete res.payload;
        return res;
      })["catch"](function (err) {
        console.log('GetTreatList err', err);
        return err;
      });
    } //杉德支付

  }, {
    key: "CardPay",
    value: function CardPay(client, data) {
      if (!data || !data.cardType) {
        return service.bluebird.resolve({
          status_code: 1,
          code: 'PARAM_ERROR',
          description: '参数错误'
        });
      }

      if (!data.amt) {
        data.amt = 0;
      }

      return GetPaymentDb$3(client.store_id).CardPay(data).then(function (res) {
        if (res.ResponseCode === '00') {
          return {
            status_code: 0,
            data: res
          };
        }

        return {
          status_code: 1,
          description: res,
          code: 'SAND_ERROR'
        };
      })["catch"](function (e) {
        return {
          status_code: 1,
          description: e,
          code: 'SAND_ERROR'
        };
      });
    } //杉德支付退款

  }, {
    key: "CardCancel",
    value: function CardCancel(client, data) {
      if (!data || !data.cardType || !data.ref || !data.time) {
        return service.bluebird.resolve({
          status_code: 1,
          code: 'PARAM_ERROR',
          description: '参数错误'
        });
      }

      if (!data.amt) {
        data.amt = 0;
      }

      return GetPaymentDb$3(client.store_id).CardCancel(data).then(function (res) {
        if (res.ResponseCode === '00') {
          return {
            status_code: 0,
            data: res
          };
        }

        return {
          status_code: 1,
          description: res,
          code: 'SAND_ERROR'
        };
      })["catch"](function (e) {
        return {
          status_code: 1,
          description: e,
          code: 'SAND_ERROR'
        };
      });
    }
  }, {
    key: "GetPayInfoById",
    value: function GetPayInfoById(client, id) {
      return GetPaymentDb$3(client.store_id).GetPayInfoById(id).then(function (data) {
        return {
          status_code: 0,
          data: data
        };
      })["catch"](function (e) {
        return {
          status_code: 1,
          code: 'DB_ERROR',
          description: e
        };
      });
    }
  }]);

  return PaymentService;
}()) || _class$5);

var _dec$6, _class$6;
var GetOrderDb$3 = service.DbProxy.GetOrderDb,
    GetTsDb$1 = service.DbProxy.GetTsDb;
var TableService = (_dec$6 = mbus.Name('Table'), _dec$6(_class$6 = /*#__PURE__*/function () {
  function TableService() {
    service.classCallCheck(this, TableService);
  }

  service.createClass(TableService, [{
    key: "init",
    value: function init(client) {
      console.error('调了init，需要删除'); // return ts.init()
      //     .then(ret => {
      //         return { status_code: 0, data: ret }
      //     }).catch(e => {
      //         return e;
      //     })
    } // initialize(client) {
    //     return ts.initialize()
    //         .then(ret => {
    //             return { status_code: 0, data: ret };
    //         }).catch(e => {
    //             return e;
    //         });
    // }

  }, {
    key: "syncTableInfo",
    value: function syncTableInfo(client) {
      return GetTsDb$1(client.store_id).syncTableInfo().then(function (ret) {
        return {
          status_code: 0,
          data: ret
        };
      })["catch"](function (e) {
        return e;
      });
    }
  }, {
    key: "inspect",
    value: function inspect(client) {
      return GetTsDb$1(client.store_id).inspect().then(function (ret) {
        return {
          status_code: 0,
          data: ret
        };
      })["catch"](function (e) {
        return e;
      });
    }
  }, {
    key: "sync",
    value: function sync(client) {
      return GetTsDb$1(client.store_id).sync().then(function (ret) {
        return {
          status_code: 0,
          data: ret
        };
      })["catch"](function (e) {
        return e;
      });
    }
  }, {
    key: "reset",
    value: function reset(client) {
      return GetTsDb$1(client.store_id).reset().then(function (ret) {
        return {
          status_code: 0,
          data: ret
        };
      })["catch"](function (e) {
        return e;
      });
    }
  }, {
    key: "open",
    value: function open(client, tid, oid, customerCount, ticketNo) {
      return GetTsDb$1(client.store_id).open(tid, oid, customerCount, ticketNo).then(function (ret) {
        return {
          status_code: 0,
          data: ret
        };
      })["catch"](function (e) {
        return e;
      });
    }
  }, {
    key: "close",
    value: function close(client, oid) {
      return GetTsDb$1(client.store_id).close(oid).then(function (ret) {
        return {
          status_code: 0,
          data: ret
        };
      })["catch"](function (e) {
        return e;
      });
    }
  }, {
    key: "switch",
    value: function _switch(client, oid, tid) {
      return GetOrderDb$3(client.store_id).GetOrder(oid).then(function (res) {
        return GetTsDb$1(client.store_id).switchTable(oid, tid, res.status).then(function (ret) {
          return {
            status_code: 0,
            data: ret
          };
        })["catch"](function (e) {
          return e;
        });
      })["catch"](function (err) {
        console.log('GetOrderDb换桌异常', err);
        return err;
      });
    }
  }, {
    key: "merge",
    value: function merge(client, oid) {
      var _GetTsDb;

      for (var _len = arguments.length, merged_oids = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        merged_oids[_key - 2] = arguments[_key];
      }

      return (_GetTsDb = GetTsDb$1(client.store_id)).merge.apply(_GetTsDb, [oid].concat(merged_oids)).then(function (ret) {
        return {
          status_code: 0,
          data: ret
        };
      })["catch"](function (e) {
        return e;
      });
    }
  }, {
    key: "getAllTable",
    value: function getAllTable(client) {
      var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return GetTsDb$1(client.store_id).getAllTable(detail).then(function (ret) {
        return {
          status_code: 0,
          data: ret
        };
      })["catch"](function (e) {
        return e;
      });
    }
  }, {
    key: "getAllZone",
    value: function getAllZone(client) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return GetTsDb$1(client.store_id).getAllZone(options).then(function (ret) {
        return {
          status_code: 0,
          data: ret
        };
      })["catch"](function (e) {
        return e;
      });
    }
  }, {
    key: "search",
    value: function search(client, keyword) {
      return GetTsDb$1(client.store_id).search(keyword);
    }
  }, {
    key: "getZone",
    value: function getZone(client, id, options) {
      return GetTsDb$1(client.store_id).getZone(id, options).then(function (ret) {
        return {
          status_code: 0,
          data: ret
        };
      })["catch"](function (e) {
        return e;
      });
    }
  }, {
    key: "getTableById",
    value: function getTableById(client, id) {
      return GetTsDb$1(client.store_id).getTableById(id).then(function (ret) {
        return {
          status_code: 0,
          data: ret
        };
      })["catch"](function (e) {
        return e;
      });
    }
  }, {
    key: "getTableByOrderId",
    value: function getTableByOrderId(client, id) {
      return GetTsDb$1(client.store_id).getTableByOrderId(id).then(function (ret) {
        return {
          status_code: 0,
          data: ret
        };
      })["catch"](function (e) {
        return e;
      });
    }
  }, {
    key: "getOrderById",
    value: function getOrderById(client, id) {
      return GetTsDb$1(client.store_id).getOrderById(id).then(function (ret) {
        return {
          status_code: 0,
          data: ret
        };
      })["catch"](function (e) {
        return e;
      });
    }
  }, {
    key: "getOrdersByZone",
    value: function getOrdersByZone(client, zoneId) {
      return GetTsDb$1(client.store_id).getOrdersByZone(zoneId);
    }
  }, {
    key: "getOrdersByTable",
    value: function getOrdersByTable(client, id) {
      var history = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      return GetTsDb$1(client.store_id).getOrdersByTable(id, history = false).then(function (ret) {
        return {
          status_code: 0,
          data: ret
        };
      })["catch"](function (e) {
        console.log('获取订单数据失败：', e);
        return e;
      });
    }
  }, {
    key: "changeTableStatus",
    value: function changeTableStatus(client, tableId, OrderId, status) {
      return GetTsDb$1(client.store_id).changeTableStatus(tableId, OrderId, status).then(function (ret) {
        return {
          status_code: 0,
          data: ret
        };
      })["catch"](function (e) {
        return e;
      });
    }
  }, {
    key: "inspect",
    value: function inspect(client) {
      return GetTsDb$1(client.store_id).inspect();
    }
  }, {
    key: "getPredeterminesByTable",
    value: function getPredeterminesByTable(client, tableId) {
      return GetTsDb$1(client.store_id).getPredeterminesByTable(tableId).then(function (ret) {
        return {
          status_code: 0,
          data: ret
        };
      })["catch"](function (e) {
        return e;
      });
    }
  }, {
    key: "setTableCustomer",
    value: function setTableCustomer(client, tid, oid, count) {
      return GetTsDb$1(client.store_id).setTableCustomer(tid, oid, count).then(function (ret) {
        return {
          status_code: 0,
          data: ret
        };
      })["catch"](function (e) {
        return e;
      });
    }
  }]);

  return TableService;
}()) || _class$6);
 //export let Ts = ts;

var _dec$7, _class$7;

function ownKeys$d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$d(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$d(Object(source), true).forEach(function (key) { service.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var debug$3 = require('debug')('hex:hiposNewAge:promotion:service');
var GetSysDb$3 = service.DbProxy.GetSysDb;
var PromotionService = (_dec$7 = mbus.Name('Promotion'), _dec$7(_class$7 = /*#__PURE__*/function () {
  function PromotionService() {
    service.classCallCheck(this, PromotionService);

    pay2promotion.Promotion = this;
  }

  service.createClass(PromotionService, [{
    key: "_lineSchema",
    value: function _lineSchema(o) {
      //加料商品
      var accies = o.topping.map(function (to) {
        //console.log('促销项：',to)
        return {
          "name": to.name,
          //商品名字
          "price": to.groess,
          //商品单价
          "amt": to.groessAmount,
          //商品总价
          "qty": to.qty,
          //数量
          "key_id": to.productId,
          //商品id
          "categories": to.categories || [] //商品分类id数组

        };
      });
      return {
        "name": o.name,
        //商品名字
        "price": o.groess,
        //商品单价
        "amt": o.groessAmount,
        //商品总价（不含加料）
        "accAmt": o.toppingAmount,
        //加料总价
        "qty": o.qty,
        //数量
        "key_id": o.productId,
        //商品id
        "categories": o.categories || [],
        //商品分类id数组
        "accies": accies
      };
    }
  }, {
    key: "_inSchema",
    value: function _inSchema(_ref) {
      var store_id = _ref.store_id,
          isActionContext = _ref.isActionContext,
          _ref$subTotal = _ref.subTotal,
          subTotal = _ref$subTotal === void 0 ? 0 : _ref$subTotal,
          _ref$lines = _ref.lines,
          lines = _ref$lines === void 0 ? [] : _ref$lines,
          _ref$promotionData = _ref.promotionData,
          promotionData = _ref$promotionData === void 0 ? {} : _ref$promotionData;
      var o = {
        storeInfo: {
          //门店信息
          id: store_id
        },
        subTotal: subTotal,
        //订单总价
        lines: lines,
        discs: []
        /*"discs": [           //今日促销（预估模式时，为所有该门点可用的今日促销；非预估模式时，为选中的今日促销）
        {"promotion_id": "4042918825959178241"},     //如果选择了同一个今日促销需要使用多次，传多个相同的promotion_id
        {"promotion_id": "4042918825959178241"},
        ],*/

        /*
         //shouldPayLine可以不传
         "shouldPayLine": {       //选中的支付方式
         "code": "123456",
         "id": "3987819505677725697"
         },*/

        /*
          //actionContext可以不传
         "actionContext": {           //预估模式中的actionContext，计算今日促销是否可用
         "type": "predict"
         },
         "actionContext": [           //非预估模式中的actionContext，类型变为array，换购选中的商品与对应的促销规则
         {
         "promotion_id": "4043301057874264065",
         "product": [
         {
         "price": 5,     //商品单价
         "amt": 5,       //商品总价（不含加料）
         "accAmt": 0,     //加料总价
         "qty": 1,        //数量
         "key_id": "3845421221831245825", //商品id
         "accies": []     //选中的加料
         }
         ]
         }
         ]
          */

      };

      if (isActionContext) {
        o.actionContext = {
          "type": "predict",
          // 加员工的角色id，[]
          "role": isActionContext
        };
      }

      o = _objectSpread$d(_objectSpread$d({}, o), promotionData);
      return o;
    }
  }, {
    key: "_execute",
    value: function _execute(store_id, storeData) {
      var _this = this;

      var isActionContext = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var promotionData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var order = storeData.order;
      var orderData = order.GetOrderData();
      var lines = [];
      orderData.orderLine.map(function (o) {
        // 如果退菜不计入促销
        if (o.status !== "RETREAT") {
          lines.push(_this._lineSchema(o));
        }
      });

      var inSchema = this._inSchema({
        store_id: store_id,
        isActionContext: isActionContext,
        subTotal: orderData.groessAmount,
        lines: lines,
        promotionData: promotionData
      });

      if (inSchema.actionContext) {
        for (var i in inSchema.actionContext) {
          var o = inSchema.actionContext[i];
          var product = o.product || [];

          for (var j in product) {
            var p = product[j];
            inSchema.subTotal = service.decimal.add(inSchema.subTotal, p.amt || 0).toDecimalPlaces(2, 4).toNumber();
            inSchema.subTotal = service.decimal.add(inSchema.subTotal, p.accAmt || 0).toDecimalPlaces(2, 4).toNumber();
          }
        }
      }

      console.log('调用促销数据:', JSON.stringify(inSchema));

      try {
        return engine.execute(inSchema).then(function (res) {
          debug$3('促销引擎结果：', JSON.stringify(res));
          console.log('促销引擎结果：', res);

          if (res.success) {
            return {
              status_code: 0,
              data: res.payload
            };
          }

          if (res.warn && res.code == 'PROMOTION_NEED_UI_CONFIRM') {
            var err = {
              e: false
            };
            res.payload = (res.payload || []).map(function (o1) {
              var _obj = o1 && o1.payload && o1.payload.reason || {};

              var _loop = function _loop(key) {
                _obj[key] && _obj[key].products && (o1.payload.reason[key].products = _obj[key].products.map(function (o2) {
                  var data = service.SysData[store_id].product[o2.id || o2.key_id];

                  if (!data) {
                    err.e = true;
                    err['reason_' + key + '_products'] || (err['reason_' + key + '_products'] = []);
                    err['reason_' + key + '_products'].push(o2);
                    data = o2;
                    o2.visible = false;
                  } else {
                    o2.visible = true;
                  }

                  return _objectSpread$d({
                    name: data.name,
                    price: data.retail
                  }, o2);
                }));
              };

              for (var key in _obj) {
                _loop(key);
              }

              return o1;
            }); // if (err.e) {
            //     return {
            //         status_code: 1,
            //         code: "ERR_CONFIG_PROMOTION",
            //         description: "1促销商品配置出错，请联系管理员配置",
            //         data: err
            //     };
            // }
          }

          return {
            status_code: 0,
            code: "NON_CONFORMITY_PROMOTION",
            description: res.code,
            data: res
          };
        })["catch"](function (e) {
          return e && e.status_code == 1 ? e : {
            status_code: 1,
            code: "ERR_PROMOTION",
            description: "促销引擎出错，请到企业微信群报修",
            data: e
          };
        });
      } catch (e) {
        return {
          status_code: 1,
          code: "ERR_CODE_PROMOTION",
          description: "促销引代码异常，请到企业微信群报修",
          data: e
        };
      }
    }
    /**
     * 获取 预估模式中的actionContext，计算今日促销是否可用
     * @param clientData
     * @param storeData
     * @constructor
     */

  }, {
    key: "GetList",
    value: function GetList(clientData, storeData) {
      var isCategory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var userRoles = arguments.length > 3 ? arguments[3] : undefined;
      var promotionData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
      return this._execute(clientData.store_id, storeData, userRoles, promotionData).then(function (res) {
        console.log('res', res);

        if (res.status_code != 0 || !isCategory) {
          return res;
        }

        return GetSysDb$3(clientData.store_id).GetCategoryPromotion().then(function (r) {
          res.data.category = [];

          if (!r) {
            return res;
          }

          var c = {};
          (res.data.manual || []).forEach(function (o) {
            if (o.promotion_category) {
              c[o.promotion_category] || (c[o.promotion_category] = []);
              c[o.promotion_category].push(o);
            }
          });
          r.forEach(function (o) {
            o.list = c[o.id] || [];
          });
          res.data.category = r;
          return res;
        });
      });
    }
    /**
     * 执行促销引擎
     * @param clientData
     * @param storeData
     * @param promotionData
     * @returns {{status_code, code, description, data}|*}
     * @constructor
     */

  }, {
    key: "Execute",
    value: function Execute(clientData, storeData, promotionData) {
      var _this2 = this;

      var isNoTreatment = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var allClear = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      console.log('执行促销：', storeData, promotionData, 'allClear', allClear);
      var order = storeData.order;
      var orderData = order.GetOrderData();
      console.log('orderData', orderData); //console.log('促销引擎参数》》》', promotionData.discs)
      //检查促销包含有卡券的参数

      for (var i in promotionData.discs) {
        var o = promotionData.discs[i];

        if (o.coupon && !o._extend) {
          var _p = orderData._heavy.promotionObj.coupon[o.coupon] || {};

          if (_p._param && _p._param._extend) {
            o._extend = _p._param._extend;
          } else {
            return {
              status_code: 1,
              code: "PROMOTION_PARAM_ERR",
              description: "卡券促销参数信息不全",
              data: o
            };
          }
        }
      }

      var result = orderData.promotion.result || [];
      var promotionObj = orderData._heavy.promotionObj || {};

      if (!isNoTreatment) {
        var _loop2 = function _loop2(id) {
          var obj = service.lodash.find(promotionData.discs || [], function (_o) {
            return _o.coupon == id;
          });

          if (!obj) {
            var _o = promotionObj.coupon[id];
            promotionData.discs.push(_o._param);
          }
        };

        for (var id in promotionObj.coupon) {
          _loop2(id);
        }
      }

      orderData._heavy.promotionObj.promotionParam = JSON.parse(JSON.stringify(promotionData));
      return this._execute(clientData.store_id, storeData, false, promotionData).then(function (res) {
        var _orderData$coupons;

        console.log('_execute res', res);
        var moneyCouponIdx = -1; // 判断是否有会员卡券

        if ((_orderData$coupons = orderData.coupons) === null || _orderData$coupons === void 0 ? void 0 : _orderData$coupons.length) {
          console.log('coupons', orderData.coupons);
          moneyCouponIdx = service.lodash.findIndex(orderData.coupons, function (coupon) {
            return coupon.code !== '4';
          });
        }

        if (allClear || moneyCouponIdx > -1) {
          console.log('allclear');
          res = {
            status_code: 0,
            code: "NON_CONFORMITY_PROMOTION",
            description: "PROMOTION_NOT_MATCH",
            data: {
              success: false,
              code: "PROMOTION_NOT_MATCH",
              description: "没有符合的促销规则"
            }
          };
        }

        if (res.status_code === 0) {
          var _order = storeData.order;
          var present = res.data.present || []; //里有 赠品

          var trade = res.data.trade || [];
          var summary = res.data.summary || {
            discount: 0,
            grantTotal: 0,
            subTotal: 0
          };
          var err = {
            e: false,
            trade: [],
            present: []
          };
          present = present.map(function (o) {
            o.product = (o.product || []).map(function (p) {
              var data = service.SysData[clientData.store_id].product[p.key_id];

              if (!data) {
                err.e = true;
                err.present.push(p);
                data = {};
              }

              return _objectSpread$d(_objectSpread$d({}, p), {}, {
                name: data.name,
                price: data.retail
              });
            });
            return o;
          });
          trade = trade.map(function (o) {
            o.product = (o.product || []).map(function (p) {
              var data = service.SysData[clientData.store_id].product[p.id || p.key_id]; //console.log('data2222222222222>',data)

              if (!data) {
                err.e = true;
                err.trade.push(p);
                data = {};
              }

              return _objectSpread$d(_objectSpread$d({}, p), {}, {
                name: data.name,
                price: data.retail
              });
            });
            return o;
          });

          if (err.e) {
            return {
              status_code: 1,
              code: "ERR_CONFIG_PROMOTION",
              description: "2促销商品配置出错，请联系管理员配置",
              data: err
            };
          }

          var discount = res.data.discount || []; // 里有 金额折扣，百分比折扣，组合优惠
          //console.log('促销的处理后的最终结果', discount, present, trade, summary);

          var myData = _this2._setPromotionResult({
            discount: [].concat(service.toConsumableArray(discount), service.toConsumableArray(present), service.toConsumableArray(trade)),
            present: present,
            trade: trade,
            summary: summary,
            promotionData: promotionData,
            result: result,
            promotionObj: promotionObj
          }); //console.log('自定义处理结果：', myData);


          FuncCoupon.filterMemberCoupon(_order, myData.couponObj); //会员卡券过滤

          orderData._heavy.promotionObj.coupon = myData.couponObj;
          orderData._heavy.promotionObj.other = myData.otherObj;

          _order.SetPromotion({
            discount: discount,
            present: present,
            trade: trade,
            summary: summary,
            result: myData.data
          });

          _order.SetPromotionParam(promotionData); //促销引擎参数


          _order.SetIsPromotion(true);

          return res;
        }

        return Promise.reject(res);
      }).then(function (res) {
        console.log('开始提交核销:', service.SysData[clientData.store_id], service.SysData, clientData);
        return CouponPay.prepay(clientData, order, service.SysData[clientData.store_id]).then(function (r) {
          console.log('提前核销结果：', r);

          if (r.status_code == 0) {
            var fail = [];
            var final_payments = r.data && r.data.final_payments || [];

            for (var _i in final_payments) {
              var po = final_payments[_i]; //console.log('支付情况', po);

              if (po.pay_status != "PAID") {
                fail.push(po);
              }
            }

            if (fail.length) {
              return {
                res: res,
                fail: fail
              };
            }
          }

          return res;
        });
      }) //收集数据
      .then(function (res) {
        var fail = res.fail;

        if (fail) {
          //收集数据
          var _order2 = storeData.order;

          var _orderData = _order2.GetOrderData();

          var couponSuccess = {};
          var couponFailed = {};
          var payFail = {};
          var promotionCoupon = _orderData._heavy.promotionObj.coupon;

          for (var _i2 in _orderData.promotion.result) {
            var _o2 = _orderData.promotion.result[_i2];

            var _data = _o2.coupon || {
              success: [],
              failed: []
            };

            for (var j in _data.failed) {
              couponFailed[_data.failed[j]] = _data.failed[j];
            }

            for (var _j in _data.success) {
              var c = promotionCoupon[_data.success[_j]];

              if (c) {
                couponSuccess[_data.success[_j]] = c._param;
              }
            }
          } //处理数据


          for (var _i3 in fail) {
            var _o3 = fail[_i3];
            payFail[_o3.external_code] = {
              external_code: _o3.external_code,
              payment_name: _o3.payment_name,
              message: _o3.message
            };

            for (var _j2 in promotionData.discs) {
              var k = promotionData.discs[_j2];

              if (k.coupon == _o3.external_code) {
                promotionData.discs.splice(_j2, 1);
                break;
              }
            }

            delete _orderData._heavy.promotionObj.coupon[_o3.external_code];
            delete couponSuccess[_o3.external_code];
            FuncCoupon.restoreMemberCoupon(clientData.store_id, _orderData, _o3.external_code);
          } //console.log('收集核销失败数据############################', fail, orderData, payFail, couponSuccess, couponFailed);


          return {
            res: res,
            fail: fail,
            payFail: payFail,
            couponSuccess: couponSuccess,
            couponFailed: couponFailed
          };
        }

        return res;
      }).then(function (res) {
        var fail = res.fail,
            payFail = res.payFail,
            couponSuccess = res.couponSuccess,
            couponFailed = res.couponFailed;

        if (payFail) {
          //console.log('处理核销失败的##############################', fail, payFail, couponSuccess, couponFailed)
          //console.log('参数：：', promotionData);
          return _this2.Execute(clientData, storeData, promotionData).then(function (_res) {
            //console.log('失败后再次促销引擎111', _res);
            //console.log('失败后再次促销引擎222', res);
            var _payFail = [];
            var _couponFailed = [];

            for (var _i4 in payFail || []) {
              //_res.payFail = payFail;
              //break;
              _payFail.push(payFail[_i4]);
            }

            for (var _i5 in couponFailed || []) {
              //_res.couponFailed = couponFailed;
              //break;
              _couponFailed.push(couponFailed[_i5]);
            }

            if (_payFail.length) {
              _res.payFail = _payFail;
            }

            if (_couponFailed.length) {
              _res.couponFailed = _couponFailed;
            }

            return _res;
          });
        }

        return res;
      }).then(function (res) {
        return order.Save(clientData).then(function (r) {
          console.log('处理提前核销的卡券', res);
          var orderData = order.GetOrderData();
          console.log('处理提前核销的卡券2', orderData);
          return _objectSpread$d(_objectSpread$d({
            status_code: 0
          }, res), {}, {
            data: _objectSpread$d(_objectSpread$d({}, res.data), {}, {
              order: orderData
            })
          });
        });
      })["catch"](function (err) {
        console.log("couponcatch_", err);
        return err.status_code == 1 ? err : {
          status_code: 1,
          code: 'ERR',
          data: err,
          description: '促销异常'
        };
      });
    } //拼促销结果

  }, {
    key: "_setPromotionResult",
    value: function _setPromotionResult(_ref2) {
      var discount = _ref2.discount,
          promotionData = _ref2.promotionData,
          promotionObj = _ref2.promotionObj;
      console.log('促销拼成行', JSON.stringify({
        discount: discount,
        promotionData: promotionData,
        promotionObj: promotionObj
      }));
      var data = []; //成功的卡券记录

      var couponObj = {};
      var otherObj = {};

      var _loop3 = function _loop3(i) {
        var o = discount[i];
        o._extend = {
          isPay: false,
          //是否已经核销
          success: true,
          //是否符合促销规则
          prepay: false,
          //是否提前核销
          coupon: []
        };

        if (o.coupon) {
          var success = o.coupon.success || [];
          o._extend.qty = success.length; //console.log('符合促销的数据！！！', success);

          o._extend.coupon = success;
          o.saleType = 'COUPON_MONEY';

          var _co = _objectSpread$d({}, o);

          delete _co.coupon;
          delete _co.source;

          var _loop4 = function _loop4(_i7) {
            var id = success[_i7];

            var obj = service.lodash.find(promotionData.discs || [], function (_o) {
              return _o.coupon == id;
            }); //console.log('提交的参数', obj);


            if (obj._extend && obj._extend.prepay) {
              o._extend.prepay = obj._extend.prepay;
              _co._extend.prepay = obj._extend.prepay;
            }

            var coupon = promotionObj.coupon[id]; //console.log('什么鬼!!!!!!!!!!!!!!!!!!',obj,o)
            //配置出错促销返回更新一下卡券个数

            obj.qty = o.source.context.trigger;
            obj._extend && obj._extend.extend && (obj._extend.extend.quantity = obj.qty);
            _co._param = obj;

            var _cdata = void 0;

            if (coupon) {
              coupon._extend.qty = o._extend.qty;
              _co._extend = _objectSpread$d(_objectSpread$d(_objectSpread$d({}, _co._extend), coupon._extend), {}, {
                coupon: _co._extend.coupon,
                success: true
              });
              o._extend = _objectSpread$d(_objectSpread$d(_objectSpread$d({}, o._extend), coupon._extend), {}, {
                coupon: o._extend.coupon,
                success: true
              });
              _cdata = JSON.parse(JSON.stringify(_co));
              delete promotionObj.coupon[id];
            } else {
              //todo 组的追加问题
              _cdata = JSON.parse(JSON.stringify(_co));
              _cdata._extend && (_cdata._extend.isPay = false); //delete _cdata._param;
              //console.log('新加的！！！！！！！！！！！！！！！！！！！！！！！！！', JSON.stringify(_cdata))
            } //console.log('>>>>>>>>>>>>>>>>', JSON.stringify(obj));


            couponObj[id] = _cdata;
          };

          for (var _i7 in success) {
            _loop4(_i7);
          }
        } else {
          var trigger = parseInt(o.source && o.source.context && o.source.context.trigger || 0);
          o._extend.qty = trigger;
          otherObj[o.promotion_id] = _objectSpread$d({}, o);

          var obj = service.lodash.find(promotionData.discs || [], function (_o) {
            return _o.promotion_id == o.promotion_id;
          });

          if (obj) {
            //console.log('!!!!!!!!!!!!!!!!!!?????????????????',obj)
            otherObj[o.promotion_id]._param = obj;
          } //console.log('!!!!!!!!!!!!!!>>>>>>>>>>>>>>', obj)


          var other = promotionObj.other[o.promotion_id];

          if (other) {
            var qty = other._extend.qty || 0;

            var _qty = qty - trigger;

            if (_qty <= 0) {
              delete promotionObj.other[o.promotion_id];
            } else {
              promotionObj.other[o.promotion_id]._extend.qty = _qty;
            }
          }
        }

        data.push(o);
      };

      for (var i in discount) {
        _loop3(i);
      } //console.log('当前成功的卡券', couponObj, otherObj, promotionObj);


      for (var _i6 in promotionObj.coupon) {
        var o = promotionObj.coupon[_i6];

        if (!couponObj[_i6] && o._extend) {
          o._extend.qty = 1;
          o._extend.success = false;
          o._extend.coupon = [_i6];
          couponObj[_i6] = o;

          if (o._param) {
            o._param.qty = 1;
          }

          data.push(o);
        }
      }
      /*
       for (let i in promotionObj.other) {
       let o = promotionObj.other[i];
       let n = o._extend.qty;
       if (otherObj[o.promotion_id]) {
       n -= otherObj[o.promotion_id]._extend.qty;
       }
        if (n > 0) {
       o._extend.success = false;
        for (let qty = 0; qty < n; qty++) {
       o._extend.qty = 1;
       otherObj[o.promotion_id] = o;
       data.push(o);
       }
       }
        }
       */


      return {
        couponObj: couponObj,
        otherObj: otherObj,
        data: data
      };
    }
  }]);

  return PromotionService;
}()) || _class$7);

var _dec$8, _class$8;

/**
 * Created by laomao on 2018/1/5.
 */
var debug$4 = require('debug')('hex:hiposNewAge:print:service');
var GetPrinterTemplatesDb$1 = service.DbProxy.GetPrinterTemplatesDb;

var tmpl = function tmpl(xml, data) {
  try {
    xml = service.tmpl(xml, data);
    return xml; // let template = Handlebars.compile(xml);
    // return template(data);
  } catch (err) {
    console.log('打印模板解析出错', err);
    return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<output>\n    <ticket>\n        <line>\n            <text align=\"center\" length=\"42\">\u6253\u5370\u6A21\u677F\u89E3\u6790\u51FA\u9519</text>\n        </line>\n    </ticket>\n</output>";
  }
};

var PrintModule = service.JavaServiceClient.GetModule('DEVICE_ROUTER'); //PrintModule.print(xml, index, 当前机器Ip)

/*serviceName  hipos
 moduleName DEVICE_ROUTER
 methodName print
 参数 (xml,index,当前机器Ip)*/

var PrintService = (_dec$8 = mbus.Name('Print'), _dec$8(_class$8 = /*#__PURE__*/function () {
  function PrintService() {
    service.classCallCheck(this, PrintService);
  }

  service.createClass(PrintService, [{
    key: "Exec",

    /**
     * 执行打印
     * @param client
     * @param xml
     * @param index
     * @param ip
     * @constructor
     */
    value: function Exec(client) {
      var xml = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<output>\n    <ticket>\n        <line>\n            <text align=\"center\" length=\"42\">hi print!!!</text>\n        </line>\n    </ticket>\n</output>";
      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var ip = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : client.localIp;
      var type = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "ticket";
      var source = arguments.length > 5 ? arguments[5] : undefined;
      // console.log('客户机信息:', client, ip)
      console.log('print %s %s %s', xml, index, ip, source);
      /**
       * xml
       * 打印机索引
       * ip地址
       */

      return PrintModule.print(xml, index, ip, type, source, client).then(function (res) {
        debug$4('打印成功', res);
        return {
          status_code: 0,
          data: res
        };
      }, function (err) {
        if (err.status_code == 1) {
          return err;
        }

        debug$4('打印失败', err);
        return {
          status_code: 1,
          code: "ERR_PRINT",
          description: err.description || "打印异常",
          data: err
        };
      });
    }
  }, {
    key: "execPrint",
    value: function execPrint(client, xml) {
      var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      xml = tmpl(xml, data); // 传摸板走打印

      return this.Exec(client, xml);
    }
  }, {
    key: "print",
    value: function print(client, name) {
      var _this = this;

      var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      // console.log(SysData)
      // let posInfo = SysData.pos;
      // data.posInfo = posInfo
      var p = Promise.resolve(null);

      if (client.tag) {
        // console.log('检查到有tag:', client.tag)
        p = GetPrinterTemplatesDb$1(client.store_id).GetTemplates(name + '.' + client.tag, client.source);
      }

      return p.then(function (r) {
        if (r === null) {
          return GetPrinterTemplatesDb$1(client.store_id).GetTemplates(name, client.source);
        }

        return r;
      }).then(function (res) {
        if (res === null) {
          //console.log('模板不存在', typeof res)
          return Promise.reject({
            status_code: 1,
            code: "NOT_TEMPLATE",
            description: "模板不存在"
          });
        } else {
          //console.log('打印模板', res)
          return {
            status_code: 0,
            data: res
          };
        }
      }).then(function (res) {
        try {
          if (data.orderList) {
            data.orderList.startTimeString = "";

            if (typeof data.orderList.startTime == 'number') {
              data.orderList.startTimeString = service.moment(data.orderList.startTime).format('YYYY-MM-DD H:mm:ss');
            }
          }

          return _this.execPrint(client, res.data, data);
        } catch (err) {
          console.log("模板解析失败", err);
          return Promise.reject({
            status_code: 1,
            code: "ERR_BUILD_TMPL",
            description: "编译打印模板异常",
            data: err
          });
        }
      })["catch"](function (err) {
        if (err.status_code == 1) {
          return err;
        }

        return {
          status_code: 1,
          code: "ERR_PRINT",
          description: "打印异常",
          data: err
        };
      });
    }
  }]);

  return PrintService;
}()) || _class$8);

var _dec$9, _class$9;
var GetTicketDb$4 = service.DbProxy.GetTicketDb;
var TicketService = (_dec$9 = mbus.Name('Ticket'), _dec$9(_class$9 = /*#__PURE__*/function () {
  function TicketService() {
    service.classCallCheck(this, TicketService);
  }

  service.createClass(TicketService, [{
    key: "TicketList",

    /**
     * 小票列表
     */
    value: function TicketList(client, opts) {
      return GetTicketDb$4(client.store_id).GetTicketList(opts).then(function (res) {
        return {
          status_code: 0,
          data: res
        };
      })["catch"](function (e) {
        return {
          code: 'FIND_ERROR',
          status_code: 1,
          description: '查询错误',
          data: e
        };
      });
    }
  }, {
    key: "GetUnUploadTicketsIdtype",
    value: function GetUnUploadTicketsIdtype(client) {
      return GetTicketDb$4(client.store_id).getUnUploadTicketsId().then(function (res) {
        return {
          status_code: 0,
          data: res
        };
      })["catch"](function (e) {
        return {
          code: 'FIND_ERROR',
          status_code: 1,
          description: '查询错误',
          data: e
        };
      });
    }
  }]);

  return TicketService;
}()) || _class$9);

var _dec$a, _class$a;
var StartService = (_dec$a = mbus.Name('Log'), _dec$a(_class$a = /*#__PURE__*/function () {
  function StartService() {
    service.classCallCheck(this, StartService);
  }

  service.createClass(StartService, [{
    key: "Start",
    value: function Start(clientData, clientId) {
      if (clientId) {
        clientData.clientId = clientId;
      }

      return service.Store.StartLog(clientData, clientId);
    }
  }, {
    key: "End",
    value: function End(clientData, clientId) {
      if (clientId) {
        clientData.clientId = clientId;
      }

      return service.Store.EndLog(clientData);
    }
  }]);

  return StartService;
}()) || _class$a);

var _dec$b, _class$b;
var GetPredeterminDb = service.DbProxy.GetPredeterminDb;
var PredeterminService = (_dec$b = mbus.Name('Predetermin'), _dec$b(_class$b = /*#__PURE__*/function () {
  function PredeterminService() {
    service.classCallCheck(this, PredeterminService);
  }

  service.createClass(PredeterminService, [{
    key: "SavePredetermin",

    /**
     * 保存预定
     */
    value: function SavePredetermin(client, data) {
      // if (data) {
      //   data.store = SysData[client.store_id].storeInfo;
      // }
      return GetPredeterminDb(data.store_id).SavePredetermin(data).then(function (res) {
        return {
          status_code: 0,
          data: res
        };
      })["catch"](function (e) {
        return {
          status_code: 1,
          description: '保存错误',
          code: 'SAVE_ERROR',
          data: e
        };
      });
    }
    /**
     * 查询预定
     */

  }, {
    key: "GetPredetermin",
    value: function GetPredetermin(client, data) {
      return GetPredeterminDb(client.store_id).GetPredetermin(data).then(function (res) {
        return {
          status_code: 0,
          data: res.docs
        };
      })["catch"](function (e) {
        return {
          status_code: 1,
          description: '查询错误',
          code: 'FIND_ERROR',
          data: e
        };
      });
    }
    /**
     * 取消预订
     */

  }, {
    key: "CancelPredetermin",
    value: function CancelPredetermin(client, id) {
      return GetPredeterminDb(client.store_id).DeletePredetermin(id).then(function () {
        return {
          status_code: 0
        };
      })["catch"](function (e) {
        return {
          status_code: 1,
          description: '查询错误',
          code: 'FIND_ERROR',
          data: e
        };
      });
    }
    /**
     * 查询预定列表
     */

  }, {
    key: "GetPredetermineList",
    value: function GetPredetermineList(client, data) {
      return GetPredeterminDb(client.store_id).GetPredetermineList(data).then(function (res) {
        return {
          status_code: 0,
          data: res
        };
      })["catch"](function (e) {
        return {
          status_code: 1,
          description: '查询错误',
          code: 'FIND_ERROR',
          data: e
        };
      });
    }
    /**
     * 按桌位查询预定列表
     */

  }, {
    key: "GetTablePredetermineList",
    value: function GetTablePredetermineList(client) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return GetPredeterminDb(client.store_id).GetTablePredetermineList(data).then(function (res) {
        return {
          status_code: 0,
          data: res
        };
      })["catch"](function (e) {
        return {
          status_code: 1,
          description: '查询错误',
          code: 'FIND_ERROR',
          data: e
        };
      });
    }
  }]);

  return PredeterminService;
}()) || _class$b);

var _dec$c, _class$c;
var GetPayInfoDb$1 = service.DbProxy.GetPayInfoDb,
    GetSysDb$4 = service.DbProxy.GetSysDb;
var PayInfoService = (_dec$c = mbus.Name('PayInfo'), _dec$c(_class$c = /*#__PURE__*/function () {
  function PayInfoService() {
    service.classCallCheck(this, PayInfoService);
  }

  service.createClass(PayInfoService, [{
    key: "savePayInfo",
    value: function savePayInfo(client, data) {
      if (!data) {
        data = {};
      }

      data.pos && (data.pos.name = client.posName);
      data.pos_id = service.SysData[client.store_id].pos_id;
      return GetSysDb$4(client.store_id).GetSaleTime().then(function (busDate) {
        if (!busDate) {
          busDate = service.moment().format('YYYY-MM-DD');
        }

        data.busDate = busDate;
        var type = data.type;

        if (!type || type !== 'payin' && type !== 'payout') {
          data.type = 'payin';
        }

        data.posName = client.posName;
        return GetPayInfoDb$1(client.store_id).savePayInfo(data);
      }).then(function () {
        try {
          service.Printer.cashBox(client.store_id, {
            localIp: client.localIp
          });
        } catch (e) {}

        return {
          status_code: 0,
          data: data
        };
      }).then(function (res) {
        GetPayInfoDb$1(client.store_id).uploadPayInfo(data)["catch"](function (e) {
          console.log("上传payinfo 失败", e, data);
        });
        return res;
      })["catch"](function (e) {
        console.log(e);
        return {
          status_code: 1,
          code: 'DB_ERROR',
          description: e
        };
      });
    }
  }, {
    key: "listPayInfo",
    value: function listPayInfo(client, data) {
      if (!data) {
        data = {};
      }

      return GetPayInfoDb$1(client.store_id).listPayInfo(data).then(function (res) {
        return {
          status_code: 0,
          data: res
        };
      })["catch"](function (e) {
        return {
          status_code: 1,
          code: 'DB_ERROR',
          description: e
        };
      });
    }
  }, {
    key: "printPayList",
    value: function printPayList(client, data) {
      GetPayInfoDb$1(client.store_id).printPayList(data).then(function (res) {
        return {
          status_code: 0,
          data: res
        };
      })["catch"](function (e) {
        return {
          status_code: 1,
          code: 'DB_ERROR',
          description: e
        };
      });
    }
  }]);

  return PayInfoService;
}()) || _class$c);

var _dec$d, _class$d;

function ownKeys$e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$e(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$e(Object(source), true).forEach(function (key) { service.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var CouponService = (_dec$d = mbus.Name('Coupon'), _dec$d(_class$d = /*#__PURE__*/function () {
  function CouponService() {
    service.classCallCheck(this, CouponService);
  }

  service.createClass(CouponService, [{
    key: "getCouponById",

    /**
     * 获取卡券
     * @param clientData
     * @param data
     * @constructor
     */
    value: function getCouponById(client, data, cid) {
      if (!data.c_code || !data.coupon_no) {
        return {
          status_code: 1,
          description: "提交信息不全",
          code: "COUPON_ERROR"
        };
      }

      var params = _objectSpread$e({
        store_id: service.SysData[client.store_id].store_id
      }, data);

      var obj = service.SysData[client.store_id].coupon[cid];
      var reData = {};

      if (obj) {
        //需要不需要走正则拆参数什么的
        if (obj.config && obj.config.regex) {
          reData = RegEx(params, obj.config.regex);
          params = _objectSpread$e(_objectSpread$e({}, params), reData);
        }
      }

      return GetCoupon(params).then(function (ret) {
        ret.data = ret.payload;
        delete ret.payload;
        return ret;
      }) //有密码得自动获取密码的卡券处理
      .then(function (ret) {
        if (reData.coupon_pwd && ret.status_code == 0 && ret.data.details && ret.data.details[0] && ret.data.success) {
          ret.data.details[0].coupon_pwd = reData.coupon_pwd;
        }

        return ret;
      })["catch"](function (e) {
        return SysError.InteraceError;
      });
    }
    /**
     * 核销产品券
     * @param clientData
     * @param data
     * @constructor
     */

  }, {
    key: "PayProCoupon",
    value: function PayProCoupon$1(client, storeData) {
      var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (!data.coupons
      /*|| !data.product_code*/
      ) {
          return Promise.reject({
            status_code: 1,
            description: "提交信息不全",
            code: "PAY_COUPON_ERROR"
          });
        }

      var order = storeData.order;
      var orderData = order.GetOrderData();
      var ProductParams = CouponPay.getProductParams(orderData, data, service.SysData[client.store_id]);

      if (ProductParams.status_code != 0) {
        return ProductParams;
      }

      var params = ProductParams.data;
      var _tmpCoupons = {};

      for (var i in params.coupons) {
        var coupons = params.coupons[i];
        _tmpCoupons[coupons.external_code] = coupons;
      }

      FuncCoupon.filterMemberCoupon(order, _tmpCoupons); //会员卡券筛选

      _tmpCoupons = null; //是否提前核销

      var prepay = false;
      params.coupons.filter(function (o) {
        if (o.prepay) {
          prepay = true;
        } else {
          if (FuncCoupon.setProductCoupon(client.store_id, order, service.SysData[store_id], o.product_code, {
            external_code: o.external_code,
            sequence_id: o.sequence_id
          }, false)) {
            var _o = JSON.parse(JSON.stringify(o));

            _o.isPay = false;
            orderData._heavy.promotionObj.product[o.external_code] = _o;
          }
        }

        return o.prepay;
      });
      return order.Save(client).then(function (_res) {
        //console.log('保存结果', _res, params, orderData);
        if (!prepay) {
          return {
            status_code: 0,
            data: order.GetOrderData(true)
          };
        } //console.log('提前核销', params);
        //核销


        return PayProCoupon(params).then(function (ret) {
          //console.log('返回', ret);
          if (ret.status_code !== 0) {
            return Promise.reject(ret);
          }

          var payload = ret.payload || {};
          var final_payments = payload.final_payments || [];
          var payments = payload.payments || []; //orderData.coupon = [];

          var fail = [];
          var isSuccess = false;

          for (var _i in final_payments) {
            var o = final_payments[_i];

            var _data = orderData._heavy.coupon.data[o.sequence_id] || {
              req: {}
            };

            _data.pay_status = o.pay_status;
            _data.isSuccess = false;

            if (o.pay_status == 'PAID') {
              var _code = _data.req.product_code;
              _data.isSuccess = true; //console.log('当前核销的', _data, o, _code, SysData.product);

              isSuccess = FuncCoupon.setProductCoupon(client.store_id, order, service.SysData[client.store_id], _code, {
                external_code: o.external_code,
                sequence_id: o.sequence_id
              }, true);

              if (isSuccess) {
                var _o = JSON.parse(JSON.stringify(_data));

                _o.req.isPay = true;
                orderData._heavy.promotionObj.product[_o.req.external_code] = _o.req;
              } else {
                console.log('卡券商品没找到');
              }
            } else {
              fail.push({
                data: _data,
                payment: o
              });
              console.log('核销失败 Todo', o); //Todo
            }
          }

          return order.Save(client).then(function (_res) {
            if (isSuccess) {
              if (fail.length) {
                return {
                  status_code: 0,
                  warning: true,
                  failData: fail,
                  data: order.GetOrderData(true)
                };
              } //console.log('核销产品卡券结果', orderData)


              return {
                status_code: 0,
                data: order.GetOrderData(true)
              };
            }

            ret.status_code = 1;
            ret.data = ret.payload;
            ret.code = ret.code || "ERR_PAY_COUPON";
            ret.description = ret.description || "核销失败";
            delete ret.payload;
            return Promise.reject(ret);
          });
        })["catch"](function (e) {
          console.log('核销异常！！！！', e);
          return e.status_code == 1 ? e : SysError.InteraceError;
        });
      });
    }
    /**
     * 反核销产品券
     * @param clientData
     * @param data
     * @constructor
     */

  }, {
    key: "CancelPayProCoupon",
    value: function CancelPayProCoupon$1(client, storeData) {
      var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var order = storeData.order;
      var orderData = order.GetOrderData();
      var params = {
        ticket_id: orderData.paymentsId,
        coupons: data.coupons
      };
      return CancelPayProCoupon(params).then(function (ret) {
        ret.data = ret.payload;
        delete ret.payload;
        return ret;
      })["catch"](function (e) {
        return SysError.InteraceError;
      });
    }
  }, {
    key: "DelCoupon",
    value: function DelCoupon(client, storeData, index) {
      var order = storeData.order;
      var orderData = order.GetOrderData();
      var promotion = orderData.promotion;
      var result = promotion.result || [];
      var coupon = result[index];

      if (coupon) {
        var promise = Promise.resolve({
          status_code: 0
        });
        var couponData = coupon._extend.coupon || [];

        if (coupon._extend && coupon._extend.isPay) {
          //console.log('需要反核销！！！！！！！！！！！！！！！！！！！！！！！！！！！！1', coupon);
          //反核销代码
          var params = {
            ticket_id: orderData.paymentsId,
            coupons: []
          };

          for (var i in coupon._extend.coupon) {
            var id = coupon._extend.coupon[i]; //console.log('配置》》》', orderData._heavy.promotionObj.coupon[id])

            var sequence_id = orderData._heavy.promotionObj.coupon[id]._param._extend.sequence_id;
            var external_code = id;
            params.coupons.push({
              sequence_id: sequence_id,
              external_code: external_code
            });
          } //console.log('删除卡券需要反核销参数', params)


          promise = CancelPayProCoupon(params).then(function (res) {
            if (res.status_code == 0) {
              res.data = res.payload;
              delete res.payload;
              var err = false;

              for (var _i2 in res.data.final_payments) {
                var o = res.data.final_payments[_i2];

                if (o.pay_status != "CANCELLED") {
                  err = true;
                }
              }

              if (err) {
                res.status_code = 1;
                return Promise.reject(res);
              }
            }

            return res;
          });
        }

        return promise.then(function (r) {
          //console.log('卡券删除反不反核销结果', r);
          if (r.status_code != 0) {
            return r;
          }

          promotion.result.splice(index, 1); //更新会员卡券个数

          for (var _i3 in couponData) {
            var _id = couponData[_i3];
            delete orderData._heavy.promotionObj.coupon[_id];
            FuncCoupon.restoreMemberCoupon(client.store_id, orderData, _id);
          } // console.log('删除会员卡券:',coupon);


          order.SetIsPromotion(false);
          order.SetPromotion({});
          orderData.DelPromotionParam(coupon);
          orderData.Calculator();
          return order.Save(client).then(function (r) {
            // console.log('=====删除卡券保存订单======：',order.GetOrderData())
            return {
              status_code: 0,
              data: order.GetOrderData(true)
            };
          });
        })["catch"](function (e) {
          console.log('删除卡券异常', e);

          if (e.status_code == 1) {
            e.description = e.data && e.data.final_payments && e.data.final_payments[0] && e.data.final_payments[0].message || "删除卡券异常";
            return e;
          }

          return SysError.InteraceError;
        });
      }

      return {
        status_code: 1,
        description: "删除的卡券不存在",
        code: "COUPON_EMPTY"
      };
    }
    /**
     * 卡券查询
     * @param client
     * @param data
     * @param cid       //卡券分类id
     * @returns {{}}
     * @constructor
     */

  }, {
    key: "Query",
    value: function Query(client, storeData, data, cid) {
      if (!data.coupon_no) {
        return {
          status_code: 1,
          description: "提交信息不全",
          code: "COUPON_ERROR"
        };
      } //


      if (!service.SysData[client.store_id].coupon[cid]) {
        return {
          code: 'COUPON_NOT_FIND',
          description: '找不到卡券分类',
          status_code: 1
        };
      }

      var obj = service.SysData[client.store_id].coupon[cid]; //console.log('卡券信息》》》》》》》', obj)

      var params = _objectSpread$e(_objectSpread$e({
        store_id: service.SysData[client.store_id].store_id
      }, data), {}, {
        c_code: data.c_code || obj.code
      }); //需要不需要走正则拆参数什么的


      if (obj.config && obj.config.regex) {
        var reData = RegEx(params, obj.config.regex);
        params = _objectSpread$e(_objectSpread$e({}, params), reData);
      } // console.log('提交查询接口参数', params, obj);


      return GetCoupon(params).then(function (ret) {
        // console.log('卡券查询结果：', ret)
        ret.data = ret.payload;
        delete ret.payload;
        return ret;
      }).then(function (ret) {
        //console.log(ret, ret.status_code == 0, (typeof ret.data.success != "undefined"), !ret.data.success)
        //转格式
        if (ret.status_code == 0 && typeof ret.data.success != "undefined" && !ret.data.success) {
          ret.status_code = 1;
          ret.description = ret.data.resp_msg || "该卡可能不存在";
          delete ret.data;
          ret.code = "COUPON_INVALID";
          return ret;
        } //天猫卡券


        if (params.c_code == 'TM001') {
          var order = storeData.order;
          var orderData = order.GetOrderData(); // console.log('已经添加的',orderData.tianmao)

          var countPurses = [];
          var details = ret.data && ret.data.details || [];

          for (var i in details) {
            var o = details[i];
            var product = service.SysData[client.store_id].product[o.product_ids];

            if (!product) {
              return {
                status_code: 1,
                code: 'NOT_PRODUCRT',
                description: "找不到兑换的商品"
              };
            }

            var _qty = 0;

            for (var k in orderData.tianmao) {
              var _o = orderData.tianmao[k];

              if (_o.external_code == o.code_no) {
                _qty += _o.qty;
              }
            }

            o.available_count -= _qty; // console.log('已经选择了',_qty,o.available_count)

            if (o.available_count <= 0) {
              return {
                status_code: 1,
                code: 'PRODUCRT_NUMBER_ZERO',
                description: "可选商品数量为0"
              };
            }

            var countPursesItem = {
              payment_channel: o.payment_channel,
              payment_channel_name: o.payment_channel_name,
              promotion_rule: o.promotion_rule,
              promotion_rule_name: o.promotion_rule_name,
              tmall_discount_channle_code: o.tmall_discount_channle_code,
              tmall_discount_channle_name: o.tmall_discount_channle_name,
              amount: o.amount || 0,
              price: o.price || 0,
              order_price: o.order_price || 0,
              code_no: o.code_no,
              balance: o.available_count,
              //balance:  6,         // 测试
              limitName: o.member_coupon_name,
              isTM001: true,
              serviceInfoList: [{
                code_no: o.code_no,
                priceUnit: "个",
                promotion: _objectSpread$e(_objectSpread$e({}, product), {}, {
                  code: product.code,
                  display_name: o.member_coupon_name,
                  id: product.product_id,
                  name: product.name,
                  groess: o.amount,
                  groessAmount: o.price,
                  main_type: "TM001",
                  status: "INIT"
                })
              }]
            };
            countPurses.push(countPursesItem);
          }

          ret.data.content.countPurses = countPurses;
          return ret;
        } //权益卡售卖


        if (obj.biz_code == "rightsCardSale") {
          if (ret.status_code == 0) {
            if (ret.data.success) {
              var c = ret.data.details[0] || {}; // console.log('权益卡授卖', ret)

              var product_id = c.product_ids;
              var external_code = c.code_no;

              if (product_id && external_code) {
                return service.Store.Order(client).Current().then(function (res) {
                  var order = storeData.order;

                  if (order) {
                    var _orderData = order.GetOrderData(); //防止重复添加同一张


                    for (var _i4 in _orderData.orderLine) {
                      if (_orderData.orderLine[_i4].external_code == external_code) {
                        return {
                          code: 'RESET_COUPON',
                          description: '不能重复使用权益卡',
                          status_code: 1
                        };
                      }
                    }

                    var sid = parseInt(_orderData._heavy.coupon.sequenceId) || 0;
                    sid++;
                    _orderData._heavy.coupon.sequenceId = sid;
                    var sequence_id = sid;
                    var isPay = false;
                    var goods = order.AddOrder(product_id, "", "product", {
                      sequence_id: sequence_id,
                      isPay: isPay,
                      external_code: external_code
                    });

                    if (!goods) {
                      return {
                        code: 'ADD_ORDER_COUPON',
                        description: '权益卡加入订单行失败',
                        status_code: 1
                      };
                    }

                    _orderData._heavy.promotionObj.product[external_code] = {
                      amount: 0,
                      external_code: external_code,
                      isPay: isPay,
                      is_online: true,
                      payment_config_code: obj.coop_code,
                      payment_name: goods.name,
                      sequence_id: sequence_id,
                      type: "NORMAL",
                      extend: {
                        track2_data: params.track2_data //quantity: 2

                      }
                    }; // console.log('卡券分类数据', obj);

                    ret.order = order.GetOrderData(true);
                  }

                  return ret;
                });
              }
            }
          }

          return ret;
        }

        return ret;
      })["catch"](function (e) {
        console.log('错误', e);
        return e.status_code == 1 ? e : SysError.InteraceError;
      });
    }
  }]);

  return CouponService;
}()) || _class$d);

var _dec$e, _class$e;
var GetTakeoutDb = service.DbProxy.GetTakeoutDb,
    GetTicketDb$5 = service.DbProxy.GetTicketDb,
    GetSysDb$5 = service.DbProxy.GetSysDb;

var TakeoutService = (_dec$e = mbus.Name('Takeout'), _dec$e(_class$e = /*#__PURE__*/function () {
  function TakeoutService() {
    var _this = this;

    service.classCallCheck(this, TakeoutService);

    //
    //监听外卖消息
    service.registerNats('client_getTakeOut_auto_order.*', function (_ref) {
      var orders = _ref.orders,
          store_id = _ref.store_id;
      var orderPool = orders.map(function (order) {
        return _this.autoOrdered(order, store_id);
      });
      Promise.all(orderPool).then(function (res) {
        //外卖
        service.execClient("getTakeOut_notice.".concat(store_id)).then(function (res) {})["catch"](function (e) {
          console.log('getTakeOut_notice err：', e);
        });
      })["catch"](function (e) {
        console.log('自动接单失败啦啦啦啦啦：', e);
      });
    }); //监听外卖消息

    service.registerNats('client_getTakeOut_service.*', function (_ref2) {
      var orders = _ref2.orders,
          store_id = _ref2.store_id;
      //    let orderPool = orders.map(order => this.recevier_order(order))
      // 	Promise.all(orderPool).then(res => {
      //外卖提
      //    console.log('通知客户端刷新数据')
      service.execClient("getTakeOut.".concat(store_id), {
        orders: orders,
        store_id: store_id
      }).then(function (res) {
        console.log('获取所有外卖', res);
      })["catch"](function (err) {
        console.log('获取所有外卖异常', err);
      }); // });
    });
  }

  service.createClass(TakeoutService, [{
    key: "autoOrdered",
    value: function autoOrdered(order, store_id) {
      if (window.globalHiposConfig.takeoutOnAutomatic && order.status == 'UNPROCESSED') {
        return this.Order({
          store_id: store_id
        }, {
          source: '',
          ticket_id: order.ticket_id
        }).then(function (res) {
          // console.log('外卖自动接单正常返回')
          return res;
        })["catch"](function (err) {
          console.log('外卖自动接口异常', err);
        });
      }

      return Promise.resolve("ordered");
    }
    /**
     * 下单
     * @param client
     * @param data
     * @returns {Promise.<T>}
     * @constructor
     */

  }, {
    key: "Order",
    value: function Order(client, data) {
      var _this2 = this;

      return service.ExecAsyncWeb({
        apiname: 'storm/isAlive',
        method: 'POST',
        headers: {
          'store_id': client.store_id
        }
      }, null).then(function (res) {
        if (res && res.content) {
          console.log('gatewa已连接，走gateway下单');
          return GateWay.Push({
            command: 'takeaway.order.confirm',
            contents: [data],
            store_id: client.store_id
          });
        }

        return Promise.reject('gateway未连接');
      }).then(function (res) {
        return {
          status_code: 0,
          data: res
        };
      })["catch"](function (err) {
        return _this2.httpOrder(client, data);
      });
    }
  }, {
    key: "httpOrder",
    value: function httpOrder(client, data) {
      // console.log('http请求外卖下单',client, data)
      //http下单
      service.set(client);
      return onOrder({
        "ticket_id": data.ticket_id,
        "device": {
          "id": service.SysData[client.store_id].pos_id
        } // "store_id": client.store_id

      }).then(function (res) {
        if (res.status_code == 0) {
          window.globalHiposConfig.showTakeout && window.getApi && window.getApi(client.store_id);
          res.data = res.payload;
          delete res.payload;
        }

        return res;
      })["catch"](function (err) {
        console.log('http接单结果err', err);
      });
    }
    /**
     * 取消订单
     * @param client
     * @param data
     * @returns {Promise.<T>}
     * @constructor
     */

  }, {
    key: "Cancel",
    value: function Cancel(client) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        source: '',
        ticket_id: ''
      };
      return GateWay.Push({
        command: 'takeaway.order.cancel',
        contents: [data],
        store_id: client.store_id
      }).then(function (res) {
        // console.log('取消订单', res);
        return {
          status_code: 0,
          data: res
        };
      })["catch"](function (err) {
        return {
          status_code: 1,
          code: "ERR_TAKEOUT_CANCEL",
          description: "外卖取消订单异常",
          data: err
        };
      });
    }
    /**
     * 退单
     * @param client
     * @param data
     * @returns {Promise.<T>}
     * @constructor
     */

  }, {
    key: "Refund",
    value: function Refund(client) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        source: '',
        ticket_id: ''
      };
      return GateWay.Push({
        command: 'takeaway.order.refund',
        contents: [data],
        store_id: client.store_id
      }).then(function (res) {
        // console.log('退单订单', res);
        return {
          status_code: 0,
          data: res
        };
      })["catch"](function (err) {
        return {
          status_code: 1,
          code: "ERR_TAKEOUT_REFUND",
          description: "外卖退单异常",
          data: err
        };
      });
    }
    /**
     * 是否启用自动接单
     * @param value
     */

  }, {
    key: "OpenSwitch",
    value: function OpenSwitch(client, value) {
      // todo 
      window.globalHiposConfig.takeoutOnAutomatic = value;
      return {
        status_code: 0,
        data: {
          value: value
        }
      };
    }
    /**
     * 退单
     * @param client
     * @param data
     * @returns {Promise.<T>}
     * @constructor
     */

  }, {
    key: "AgreeRefund",
    value: function AgreeRefund(client) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        ticket_id: ''
      };
      return GateWay.Push({
        command: 'takeaway.order.agreerefund',
        contents: [data],
        store_id: client.store_id
      }).then(function (res) {
        // console.log('同意退单订单', res);
        return {
          status_code: 0,
          data: res
        };
      })["catch"](function (err) {
        return {
          status_code: 1,
          code: "ERR_TAKEOUT_REFUND",
          description: "外卖同意退单异常",
          data: err
        };
      });
    }
    /**
     * 获取所有外卖
     */

  }, {
    key: "GetAllTakeout",
    value: function GetAllTakeout(client) {
      return GetTakeoutDb(client.store_id).getData(service.SysData[client.store_id].busDate).then(function (res) {
        // console.log('取出所有外卖', res)
        var store_id = client.store_id;
        var data = res && res.docs || [];
        service.execClient("getTakeOut.".concat(store_id), {
          orders: data,
          store_id: store_id
        }).then(function (res) {// console.log('获取所有外卖', res)
        })["catch"](function (err) {
          console.log('获取所有外卖异常', err);
        });
        return {
          status_code: 0
        };
      })["catch"](function (err) {
        return {
          status_code: 1,
          code: "ERR_GET_TAKEOUT",
          description: "获取所有外卖异常",
          data: err
        };
      });
    }
    /**
     * 获取当日所有外卖
     */

  }, {
    key: "GetSamedayTakeout",
    value: function GetSamedayTakeout(client) {
      // 当前时间
      var times = service.moment(new Date()).format('YYYYMMDDHH');
      var hours = service.moment(new Date()).hour(); // console.log(hours, '!!!!!!!!!!!!', times)

      var hoursData = [];

      for (var h = 0, i = 0; h <= hours; h++, i++) {
        var newtimes = times - i; // console.log(newtimes, '!1111111111111!!', h)

        hoursData.push(GetTakeoutDb(client.store_id).getIdsByHour(newtimes));
      }

      return Promise.all(hoursData).then(function (res) {
        var datas = [].concat.apply([], res);

        if (datas.length) {
          return GetTakeoutDb(client.store_id).getTakeoutById(datas).then(function (_res) {
            if (_res) {
              var store_id = client.store_id;
              service.execClient("getTakeOut.".concat(store_id), {
                orders: _res,
                store_id: store_id
              }).then(function (res) {})["catch"](function (err) {
                console.log('获取当日所有外卖异常', err);
              });
            }

            return {
              status_code: 0
            };
          })["catch"](function (err) {
            console.log('获取当日所有外卖异常', err);
            return {
              status_code: 1,
              code: "ERR_GET_TAKEOUT",
              description: "获取当日所有外卖异常",
              data: err
            };
          });
        }

        return {
          status_code: 0
        };
      })["catch"](function (err) {
        return {
          status_code: 1,
          code: "ERR_GET_TAKEOUT",
          description: "获取当日所有外卖异常",
          data: err
        };
      });
    } // d打印外卖

  }, {
    key: "PrintTackout",
    value: function PrintTackout(client, ticket_id) {
      return GetTakeoutDb(client.store_id).getTakeoutById(ticket_id).then(function (res) {
        service.Print.Takeout(res, client);
        return {
          status_code: 0
        };
      });
    }
  }]);

  return TakeoutService;
}()) || _class$e);

var _dec$f, _class$f;
var GetCashDb = service.DbProxy.GetCashDb;
var CashService = (_dec$f = mbus.Name('Cash'), _dec$f(_class$f = /*#__PURE__*/function () {
  function CashService() {
    service.classCallCheck(this, CashService);
  }

  service.createClass(CashService, [{
    key: "setCashList",

    /**
      *保存开钱箱记录，
      *参数data，必传id， busDate，time 
    **/
    value: function setCashList(client, operator) {
      var data = {
        ticket_id: service.v4().replace(/-/g, ""),
        start_time: service.moment().format("YYYY-MM-DD HH:mm:ss"),
        end_time: service.moment().format("YYYY-MM-DD HH:mm:ss"),
        version: '2.0',
        time: new Date().getTime(),
        pos_id: service.SysData[client.store_id].pos_id,
        bus_date: service.SysData[client.store_id].busDate,
        store_id: client.store_id,
        pos: service.SysData[client.store_id].pos,
        store: service.SysData[client.store_id].storeInfo,
        operator: operator,
        operator_id: operator.id
      };
      return GetCashDb(client.store_id).saveCashInfo(data).then(function () {
        GetCashDb(client.store_id).uploadCashInfo(data)["catch"](function (e) {
          console.log("上传Cashbox失败", e, data);
        });

        try {
          service.Printer.cashBox(client.store_id, {
            localIp: client.localIp
          });
        } catch (e) {
          console.log('开钱箱失败');
        }

        return {
          status_code: 0,
          data: data
        };
      })["catch"](function (e) {
        console.log(e, '保存开钱箱记录异常');
        return {
          status_code: 1,
          code: 'DB_ERROR',
          description: '保存开钱箱记录异常'
        };
      });
    }
    /**
      *获取开钱箱记录，
      *data 为条件, 可以有 {start, end, page, size}
    **/

  }, {
    key: "getCashList",
    value: function getCashList(client, data) {
      if (!data) {
        data = {};
      }

      return GetCashDb(client.store_id).findCashInfoList(data).then(function (res) {
        return {
          status_code: 0,
          data: res
        };
      })["catch"](function (e) {
        return {
          status_code: 1,
          code: 'DB_ERROR',
          description: '获取开钱箱记录异常'
        };
      });
    }
  }]);

  return CashService;
}()) || _class$f);

var _dec$g, _class$g;

function ownKeys$f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$f(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$f(Object(source), true).forEach(function (key) { service.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Created by laomao on 2018/1/5.
 */
var debug$5 = require("debug")("hex:hiposNewAge:print:service");
var PrintModule$1 = service.JavaServiceClient.GetModule("DEVICE_ROUTER");
var GetSysDb$6 = service.DbProxy.GetSysDb,
    GetOrderDb$4 = service.DbProxy.GetOrderDb,
    GetPrinterTemplatesDb$2 = service.DbProxy.GetPrinterTemplatesDb,
    GetTsDb$2 = service.DbProxy.GetTsDb;

var GetXml = function GetXml(storeId, tplName, data, source) {
  // console.log('tplName',tplName, 'data', data)
  return Promise.resolve().then(function () {
    if (service.SysData[storeId].tplCache && typeof service.SysData[storeId].tplCache["".concat(tplName, "_").concat(source)] === 'function') {
      console.log('获取缓存数据模板');
      return service.SysData[storeId].tplCache["".concat(tplName, "_").concat(source)];
    } else {
      return GetPrinterTemplatesDb$2(storeId).GetTemplates(tplName, source).then(function (res) {
        var func = service.tmpl(res);

        service.SysData[storeId].tplCache["".concat(tplName, "_").concat(source)] = func;
        return Promise.resolve(func);
      })["catch"](function () {
        var tml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                  <output>\n                      <ticket>\n                          <line>\n                              <text align=\"center\" length=\"42\">\u6253\u5370\u6A21\u677F\u89E3\u6790\u51FA\u9519</text>\n                          </line>\n                      </ticket>\n                  </output>";
        return service.tmpl(tml);
      });
    }
  }).then(function (tpl) {
    console.log('打印模板', tpl(data));
    return tpl(data);
  });
};

var KitchenPrintService = (_dec$g = mbus.Name("KitchenPrint"), _dec$g(_class$g = /*#__PURE__*/function () {
  function KitchenPrintService() {
    service.classCallCheck(this, KitchenPrintService);
  }

  service.createClass(KitchenPrintService, [{
    key: "Exec",

    /**
     * 执行打印
     * @param client
     * @param xml
     * @param index
     * @param ip
     * @constructor
     */
    value: function Exec() {
      var xml = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<output>\n    <ticket>\n        <line>\n            <text align=\"center\" length=\"42\">hi print!!!</text>\n        </line>\n    </ticket>\n</output>";
      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var clientData = arguments.length > 2 ? arguments[2] : undefined;
      var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "ticket";
      var source = arguments.length > 4 ? arguments[4] : undefined;
      var ip = clientData && clientData.ip || ""; // console.log('print>>>> %s %s %s', xml, index, ip, type);

      /**
       * xml
       * 打印机索引
       * ip地址
       */
      //console.log('开始打印:', 'id:' + index, 'ip:' + ip, 'type:' + type);

      return PrintModule$1.print(xml, index, ip, type, source, clientData).then(function (res) {
        //console.timeEnd('Exec-index')
        if (res.status_code === 1) {
          return Promise.reject(res);
        }

        return {
          status_code: 0,
          data: res
        };
      })["catch"](function (err) {
        if (err.status_code == 1) {
          return err;
        }

        return {
          status_code: 1,
          code: "ERR_PRINT",
          description: err.description || "打印异常",
          data: err
        };
      });
    } //对订单数据格式化

  }, {
    key: "formatData",
    value: function formatData() {
      var _this = this;

      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var options = arguments.length > 1 ? arguments[1] : undefined;
      var status = arguments.length > 2 ? arguments[2] : undefined;
      var result = [];

      service.lodash.forEach(data, function (item) {
        item.qty = item.qty < 0 ? -item.qty : item.qty; // 是否需要展开qty 

        if (options.showQty.indexOf(status) > -1 && item.qty > 1) {
          // 需减套餐数量
          if (item.combo && item.combo.length > 0) {
            item.combo = _this.changeQty(item.combo, item.qty);
          }

          for (var i = 0; i < item.qty; i++) {
            result = service.lodash.concat(result, _objectSpread$f(_objectSpread$f({}, item), {}, {
              qty: 1
            }));
          }
        } else {
          result = service.lodash.concat(result, _objectSpread$f({}, item));
        }
      });

      result = service.lodash.map(result, function (item) {
        //  是否展开套餐
        if (options.showCombo.indexOf(status) > -1 && item.combo && item.combo.length > 0) {
          item.child_combo = _this.formatData(item.combo, options, 'combo');
        } // 是否展开加料


        if (options.showTopping.indexOf(status) > -1 && item.topping && item.topping.length > 0) {
          item.child_topping = _this.formatData(item.topping, options, 'topping');
        }

        return item;
      });
      return result;
    }
    /**
     * 厨房打印
     * @param data
     * @constructor
     */

  }, {
    key: "Print",
    value: function Print(clientData, headLists, targetLists, footerLists) {
      var _this2 = this;
      // 厨打配置
      var options = {
        showQty: ["normal", "topping", "combo"],
        showCombo: ["normal", "topping", "combo"],
        showTopping: []
      };
      var headAllPlace = 0;
      var footerAllPlace = 0;

      if (headLists.orderLine.length) {
        var headOrderDatas = this.formatData(headLists.orderLine, options, 'normal');
        var headKitchenData = this.getkitchenData(clientData, false, headOrderDatas, NaN, 0);
        headAllPlace = headKitchenData.place;
        console.log('headAllPlace', headKitchenData);
      }

      if (footerLists.orderLine.length) {
        var footerOrderDatas = this.formatData(footerLists.orderLine, options, 'normal');
        var footerKitchenData = this.getkitchenData(clientData, false, footerOrderDatas, NaN, 0);
        footerAllPlace = footerKitchenData.place;
        console.log('footerAllPlace', footerKitchenData);
      }

      console.log('headAllPlace', headAllPlace, 'f', footerAllPlace); // 获取需要打印的数据

      var orderDatas = this.formatData(targetLists.orderLine, options, 'normal');
      console.log('orderDatas', orderDatas, 'headAlPlace', headAllPlace);
      var kitchenData = this.getkitchenData(clientData, false, orderDatas, '', headAllPlace);
      console.log('kitchenData', kitchenData); // 循环打印数据

      service.lodash.map(kitchenData.printDatas, function (printData) {
        console.log('循环printDatas', printData);
        var obj = JSON.parse(JSON.stringify(targetLists));
        var allPlace = kitchenData.place + footerAllPlace;
        obj.orderLine = [];
        obj.orderLine.push(_objectSpread$f(_objectSpread$f({}, printData.goods), {}, {
          allPlace: allPlace
        }));
        console.log('obj', obj, 'allPlace', allPlace);

        for (var i in printData.print) {
          var record = {
            isPrint: true,
            tableFrom: '',
            ticketFrom: obj.ticketId,
            time: service.moment().format('HH:mm:ss DD/MM')
          };

          if (targetLists.isRefund || targetLists.status == "REFUND") {
            record.status = "CANCEL";
          }

          var ppp = printData.print[i];

          var _pg = _objectSpread$f(_objectSpread$f({}, printData), {}, {
            print: ppp
          });

          _pg.record = record;

          _this2._kitchen(obj, _pg, clientData, targetLists);
        }
      });

      return {
        status_code: 0
      };
    } // 获取厨打商品对应打印设备

  }, {
    key: "getPrintDevice",
    value: function getPrintDevice(clientData, orderLine) {
      var printDevices = [];
      var printId = orderLine.printCategory; // 查询匹配项

      service.lodash.map(service.SysData[clientData.store_id].printDevices, function (printDevice) {
        if (printId == printDevice.id) {
          printDevices.push(printDevice.data);
        }
      });

      return printDevices;
    } //厨打数据组装

  }, {
    key: "getkitchenData",
    value: function getkitchenData(clientData, isRefund, data, sourceName, sourcePlace, sourceRemark) {
      // console.log('getkitchendataf')
      console.log('sourcePlace', sourcePlace);
      var printData = [];
      var place = sourcePlace !== NaN ? sourcePlace : place;

      for (var i = 0; i < data.length; i++) {
        var orderLine = data[i]; // console.log('orderline', orderLine)

        place++; // 如果有子项，递归获取打印数据

        if (orderLine.child_combo || orderLine.child_topping) {
          place--;

          if (orderLine.child_combo && orderLine.child_combo.length) {
            // 记录父级商品名，父级位置提供厨打
            var _result = this.getkitchenData(clientData, isRefund, orderLine.child_combo, orderLine.name, place, orderLine.remark);

            printData = printData.concat(_result.printDatas);
            place = _result.place;
          }

          if (orderLine.child_topping && orderLine.child_topping.length) {
            // 记录父级商品名，父级位置提供厨打
            var _result2 = this.getkitchenData(clientData, isRefund, orderLine.child_topping, orderLine.name, place, orderLine.remark);

            printData = printData.concat(_result2.printDatas);
            place = _result2.place;
          }
        } else {
          // 获取最近的操作记录
          var record = orderLine.record ? orderLine.record[orderLine.record.length - 1] || {} : {};
          var kitchenTime = record.time ? record.time : service.moment().format('HH:mm:ss DD/MM');
          var toppingStr = ''; // 拼加料

          if (orderLine.topping && orderLine.topping.length) {
            service.lodash.map(orderLine.topping, function (item) {
              toppingStr += item.name + '*' + item.qty + '、';
            });

            toppingStr = toppingStr.substring(0, toppingStr.length - 1);
          }

          var skuRemarkStrArr = [];
          var skuRemarkStr = ''; // 拼spu规格 每两个规格成一行

          if (orderLine.skuRemark && orderLine.skuRemark.length) {
            service.lodash.map(orderLine.skuRemark, function (item, index) {
              if (item !== 0 && item % 2 == 0) {
                skuRemarkStr = skuRemarkStr.substring(0, skuRemarkStr.length - 1);
                skuRemarkStrArr.push(skuRemarkStr);
                skuRemarkStr = '';
              }

              skuRemarkStr += item.values == 'string' ? item.values : item.values.name + "、";
            });

            skuRemarkStr = skuRemarkStr.substring(0, skuRemarkStr.length - 1);
            skuRemarkStrArr.push(skuRemarkStr);
          }

          var remark = sourceRemark ? sourceRemark : orderLine.remark; // 判断是否是退单厨打
          // if(isRefund){
          // 判断是否是厨打商品并且未打印

          if (orderLine.printCategory) {
            // 获取厨打商品对应的打印设备
            var printDevices = this.getPrintDevice(clientData, orderLine); // 判断是否存在打印设备，商品状态是否可打印

            if (printDevices.length) {
              //拼装数据推入打印数据中
              printData.push({
                record: record,
                print: printDevices,
                goods: _objectSpread$f(_objectSpread$f({}, orderLine), {}, {
                  sourceName: sourceName,
                  sourcePlace: place,
                  kitchenTime: kitchenTime,
                  toppingStr: toppingStr,
                  remark: remark,
                  skuRemarkStrArr: skuRemarkStrArr
                })
              });
            }
          } // }else{
          //     // 判断是否是厨打商品并且未打印
          //     if ((orderLine.printCategory && record.time && !record.isPrint || window.globalHiposConfig.payKitchenPrint)/*&&isCancel*/) {
          //         // 获取厨打商品对应的打印设备
          //         let printDevices = this.getPrintDevice(clientData, orderLine);
          //         // 判断是否存在打印设备，商品状态是否可打印
          //         if (printDevices.length && orderLine.status && ( orderLine.status != 'INIT' || window.globalHiposConfig.payKitchenPrint) && orderLine.status != 'FREEDISH') {
          //             //拼装数据推入打印数据中
          //             printData.push({ record, print: printDevices, goods: {...orderLine, sourceName, sourcePlace: place, kitchenTime, toppingStr, remark, skuRemarkStrArr} });
          //             //console.log('push printData', printData);
          //         }
          //     }
          // }

        }
      }

      var result = {
        printDatas: printData,
        place: place
      };
      return result;
    }
  }, {
    key: "_kitchen",
    value: function _kitchen(obj, printGoods, clientData, orderData) {
      var _this3 = this;

      var print = printGoods.print,
          record = printGoods.record;
      var source = '';
      var day_seq = '';
      var send_type = '';

      if (orderData && orderData.extend) {
        if (orderData.extend.takeaway_info) {
          source = orderData.extend.takeaway_info.source;
          day_seq = orderData.extend.takeaway_info.day_seq; // 骑手号 sn

          send_type = orderData.extend.takeaway_info.delivery_type || ''; // 来源

          obj.takeoutTableNum = orderData.extend.takeaway_info.tableNum || ''; // 外卖桌位号

          obj.takeoutTakeMealSn = orderData.extend.takeaway_info.take_meal_sn || ''; // 推送的取餐号
        }
      } // let sendTypeArr = ['', '外卖', '自取', '堂食', '外卖'];


      obj.takeoutSendType = '外卖';

      if (source === 'wechatapp' || source === 'wechatapp_seat') {
        var sendTypeArr = ['', '外卖', '自取', '堂食', '外卖'];
        obj.takeoutSendType = sendTypeArr[send_type] || '外卖';
      } else if (source === 'koubei') {
        obj.takeoutSendType = '堂食';
      } // if(send_type !== ''){
      //     obj.takeoutSendType = sendTypeArr[send_type];
      // }


      var ZHDate = {
        "bd": {
          "code": "bd",
          "name": "百度在线",
          "id": 132
        },
        "mt": {
          "code": "mt",
          "name": "美",
          "id": 133
        },
        "eleme": {
          "code": "elm",
          "name": "饿",
          "id": 135
        },
        "wx": {
          "code": "Onlinewx",
          "name": "官网微信",
          "id": 136
        },
        "web": {
          "code": "Onlineweb",
          "name": "官网网页版",
          "id": 109
        },
        "jd": {
          "code": "jd",
          "name": "京东到家外送",
          "id": 137
        },
        "H5": {
          "code": "Onlineh5",
          "name": "官网H5",
          "id": 110
        },
        "dianping": {
          "code": "dianping",
          "name": "点评",
          "id": 111
        },
        "default": {
          "code": "Onlinecc",
          "name": "堂",
          "id": 105
        },
        "koubei": {
          "code": "koubei",
          "name": "口碑",
          "id": 138
        },
        "tmall": {
          "code": "tmall",
          "name": "猫",
          "id": 139
        },
        'wechatapp': {
          "code": "wechatapp",
          "name": "小",
          "id": 140
        },
        "wechatapp_seat": {
          "code": "wechatapp_seat",
          "name": "微信小程序-堂食",
          "id": 200
        },
        "null": {
          "name": '堂'
        }
      }; // 来源

      obj.zhSource = ZHDate[source] && ZHDate[source].name || ZHDate["default"].name;
      var llSendTypeArr = ['', '小外', '小', '小', '小外'];

      if (send_type !== '') {
        obj.llZhSource = llSendTypeArr[send_type] || '小';
      } // 转换打印渠道


      var printSource = 'pc';

      if (orderData.order_source === 'takeout') {
        if (source === 'wechatapp' || source === 'wechatapp_seat') {
          printSource = send_type === 1 || send_type === 4 ? 'wechat-takeout' : 'wechat-seat';
        } else {
          printSource = 'takeout';
        }
      } else {
        printSource = orderData.order_source || 'pc';
      } // 骑手信息


      obj.day_seq = day_seq; // ticketNo

      var ticketNo = obj.ticketNo ? obj.ticketNo : '';
      var storeConfig = service.SysData[clientData.store_id].storeConfig || {}; // 如家交易号规则携带前缀 

      if (ticketNo && storeConfig.clientSerialNumber !== 2) {
        ticketNo = (Array(5).join("0") + ticketNo).slice(-5);
      }

      obj.ticketNo = ticketNo;

      if (!record) {
        record = {
          time: service.moment(new Date()).format('HH:mm:ss DD/MM')
        };
      }

      service.set(clientData); //console.log('orderData', orderData)
      // 商品打印分类与打印机分类匹配

      Promise.all([GetTsDb$2(clientData.store_id).getTableById(window.globalHiposConfig.payKitchenPrint ? orderData ? orderData.ticketId : record.tableFrom : record.tableFrom), //   GetOrderDb(clientData.store_id).GetOrder(window.globalHiposConfig.payKitchenPrint ? (orderData ? orderData.ticketId : record.ticketFrom ) : record.ticketFrom),
      GetSysDb$6(clientData.store_id).GetPosConfig().then(function (res) {
        if (res) {
          delete res.relation;
          delete res._dev;
          delete res._id;
        }

        return res || {};
      }), // GetSysDb(clientData.store_id).GetStoreInfo().then(res => {
      //     return res || {};
      // }),
      GetSysDb$6(clientData.store_id).GetPosInfo().then(function (res) {
        return res || {};
      })]).then(function (_ref) {
        var _ref2 = service.slicedToArray(_ref, 3),
            tableFrom = _ref2[0],
            GPosConfig = _ref2[1],
            posInfo = _ref2[2];

        var storeInfo = service.SysData[clientData.store_id].storeInfo || {};
        record.tableFromData = tableFrom; //   record.ticketFromData = ticketFrom;

        record.time = service.moment(record.time || new Date()).format('HH:mm:ss DD/MM');
        record.placeTime = service.moment(obj.startTime).format('HH:mm:ss DD/MM');
        record.kitchenTime = service.moment(new Date()).format('HH:mm:ss DD/MM'); //console.log('===========| recordTime:  |============')
        //console.log(record.time);
        //console.log(record.placeTime)
        //console.log(record.kitchenTime)
        //console.log('----------------------------------')

        var pos_id = service.SysData[clientData.store_id].pos_id;
        GPosConfig = _objectSpread$f(_objectSpread$f({}, GPosConfig), {}, {
          pos_id: pos_id
        });
        var pdata = {
          orderList: obj,
          record: record,
          GPosConfig: GPosConfig,
          storeInfo: storeInfo,
          posInfo: posInfo,
          Reprint: true
        };
        var _data = [];

        _data.push(pdata); // console.log('厨打数据:', pdata);
        // GetPrinterTemplatesDb(clientData.store_id).GetTemplates('kitchen').then((res) => {


        GetXml(clientData.store_id, 'kitchen', _data, clientData.source).then(function (xmlStr) {
          if (xmlStr) {
            //console.log('res', res)
            try {
              // let pdata = { orderList: obj, record, GPosConfig, storeInfo, posInfo };
              // console.log('厨打数据:', pdata);
              return _this3.Exec(xmlStr, print.id || print.priority, clientData, print.type, printSource).then(function (res) {//console.log('厨打结果：', res);
              });
            } catch (err) {//console.log('厨打模板解析出错', err);
            }
          }
        })["catch"](function (err) {
          console.log('GetPrinterTemplatesDb异常', err);
        });
      })["catch"](function (err) {
        console.log('_kitchen异常', err);
      });
    }
  }]);

  return KitchenPrintService;
}()) || _class$g);

exports.CashService = CashService;
exports.CouponService = CouponService;
exports.DailyService = DailyService;
exports.KitchenPrintService = KitchenPrintService;
exports.LogService = StartService;
exports.MemberService = MemberService;
exports.OrderService = OrderService;
exports.PayInfoService = PayInfoService;
exports.PaymentService = PaymentService;
exports.PredeterminService = PredeterminService;
exports.PrintService = PrintService;
exports.PromotionService = PromotionService;
exports.SysService = SysService;
exports.TableService = TableService;
exports.TakeoutService = TakeoutService;
exports.TicketService = TicketService;
exports.UserService = UserService;
